================================================================================
FILE: E:\DEVELOP2\REACT\map-test\.env
SIZE: 320 bytes
================================================================================
     1: # .env
     2: VITE_API_BASE=http://localhost:8080/api
     3: VITE_TILE_URL=http://localhost:8008/{z}/{x}/{y}.jpg
     4: VITE_TILE_HYBRID=http://localhost:8008/{z}/{x}/{y}.jpg
     5: VITE_TILE_SATELLITE=http://localhost:5005/{z}/{x}/{y}.jpg
     6: VITE_TILE_MIN_ZOOM=0
     7: VITE_TILE_MAX_ZOOM=19
     8: VITE_TILE_TMS=true
     9: VITE_TILE_ATTRIBUTION=© Local cache


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\.env.example
SIZE: 457 bytes
================================================================================
     1: # === Environment Example ===
     2: # API base (frontend will call `${VITE_API_BASE}/api/...` if not ending with /api )
     3: VITE_API_BASE=http://localhost:8080
     4: # Optional: override proxy target during dev
     5: VITE_PROXY_API=http://localhost:8080
     6: # Session settings
     7: VITE_IDLE_MINUTES=10
     8: VITE_TOKEN_REFRESH_LEEWAY_SEC=90
     9: # Tiles
    10: VITE_TILE_HYBRID=http://localhost:8008/{z}/{x}/{y}.jpg
    11: VITE_TILE_SATELLITE=http://localhost:5005/{z}/{x}/{y}.jpg
    12: VITE_TILE_TMS=true


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\.env.production
SIZE: 20 bytes
================================================================================
     1: VITE_API_BASE=/api


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\.github\workflows\ci.yml
SIZE: 363 bytes
================================================================================
     1: name: CI
     2: 
     3: on:
     4:   push:
     5:     branches: [main]
     6:   pull_request:
     7:     branches: [main]
     8: 
     9: jobs:
    10:   build:
    11:     runs-on: ubuntu-latest
    12:     steps:
    13:       - uses: actions/checkout@v4
    14:       - uses: actions/setup-node@v4
    15:         with:
    16:           node-version: "20"
    17:           cache: "npm"
    18:       - run: npm ci
    19:       - run: npm run lint
    20:       - run: npm run build


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\eslint.config.js
SIZE: 1799 bytes
================================================================================
     1: import js from "@eslint/js";
     2: import globals from "globals";
     3: import reactHooks from "eslint-plugin-react-hooks";
     4: import reactRefresh from "eslint-plugin-react-refresh";
     5: import { defineConfig, globalIgnores } from "eslint/config";
     6: 
     7: export default defineConfig([
     8:   // Ignore build output and this config file itself
     9:   globalIgnores(["dist", "eslint.config.js"]),
    10:   // Node environment for config and script files
    11:   {
    12:     files: [
    13:       "vite.config.js",
    14:       "vite.config.*.js",
    15:       "*.config.js",
    16:       "*.config.cjs",
    17:       "*.config.mjs",
    18:       "scripts/**/*.js",
    19:     ],
    20:     languageOptions: {
    21:       globals: globals.node,
    22:       ecmaVersion: "latest",
    23:       sourceType: "module",
    24:     },
    25:   },
    26:   {
    27:     files: ["**/*.{js,jsx}"],
    28:     extends: [
    29:       js.configs.recommended,
    30:       reactHooks.configs["recommended-latest"],
    31:       reactRefresh.configs.vite,
    32:     ],
    33:     languageOptions: {
    34:       ecmaVersion: 2020,
    35:       globals: globals.browser,
    36:       parserOptions: {
    37:         ecmaVersion: "latest",
    38:         ecmaFeatures: { jsx: true },
    39:         sourceType: "module",
    40:       },
    41:     },
    42:     rules: {
    43:       // Keep real danger rules as errors
    44:       "no-eval": "error",
    45:       "no-implied-eval": "error",
    46:       "no-new-func": "error",
    47:       // Downgrade stylistic / cleanup rules to warnings so CI has zero errors
    48:       "no-unused-vars": ["warn", { varsIgnorePattern: "^[A-Z_]" }],
    49:       "no-empty": ["warn", { allowEmptyCatch: true }],
    50:       // Console: only error in production build, otherwise warn
    51:       "no-console":
    52:         process.env.NODE_ENV === "production"
    53:           ? ["error", { allow: ["warn", "error"] }]
    54:           : "warn",
    55:       // Avoid failing build for stylistic try/catch wrapper
    56:       "no-useless-catch": "warn",
    57:     },
    58:   },
    59: ]);


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\index.html
SIZE: 2406 bytes
================================================================================
     1: <!DOCTYPE html>
     2: <html lang="en">
     3:   <head>
     4:     <meta charset="UTF-8" />
     5:     <link rel="icon" type="image/svg+xml" href="/src/assets/zamin-logo.png" />
     6:     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     7:     <!-- Basic restrictive CSP (adjust connect-src in env if needed). For full protection set on server headers. -->
     8:     <!-- NOTE: frame-ancestors ignored in <meta>; set via real HTTP response header for clickjacking protection. -->
     9:     <meta
    10:       http-equiv="Content-Security-Policy"
    11:       content="default-src 'self'; script-src 'self' 'sha256-oW38UIaT3mr2zAnGZaQXvRR9eB5NPEJfsP9/or8ZdJc=' https://challenges.cloudflare.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob: https: http:; font-src 'self' data:; connect-src 'self' http://localhost:8080 https: wss: ws://localhost:8080; frame-src 'self' https://challenges.cloudflare.com; object-src 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests"
    12:     />
    13:     <!-- Security / privacy headers (some browsers respect via meta, still set on server) -->
    14:     <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    15:     <meta
    16:       http-equiv="Referrer-Policy"
    17:       content="strict-origin-when-cross-origin"
    18:     />
    19:     <meta
    20:       http-equiv="Permissions-Policy"
    21:       content="geolocation=(), camera=(), microphone=()"
    22:     />
    23:     <title>Zamin AAT</title>
    24:     <!-- Temani paintdan oldin qo‘llash (FOUC yo‘qoladi) -->
    25:     <script>
    26:       (function () {
    27:         var KEY = "theme";
    28:         var saved = null;
    29:         try {
    30:           saved = localStorage.getItem(KEY);
    31:         } catch (e) {}
    32:         if (saved !== "light" && saved !== "dark" && saved !== "system") {
    33:           saved = "dark"; // 🔥 DEFAULT: dark
    34:         }
    35:         var isSys = saved === "system";
    36:         var mq =
    37:           window.matchMedia &&
    38:           window.matchMedia("(prefers-color-scheme: dark)");
    39:         var mode = isSys ? (mq && mq.matches ? "dark" : "light") : saved;
    40:         var root = document.documentElement;
    41:         root.setAttribute("data-theme", mode);
    42:         if (mode === "dark") root.classList.add("dark");
    43:         else root.classList.remove("dark");
    44:       })();
    45:     </script>
    46:     <meta name="color-scheme" content="dark light" />
    47:   </head>
    48:   <body>
    49:     <div id="root"></div>
    50:     <script type="module" src="/src/main.jsx"></script>
    51:   </body>
    52: </html>


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\package.json
SIZE: 1112 bytes
================================================================================
     1: {
     2:   "name": "agro-map",
     3:   "private": true,
     4:   "version": "0.0.0",
     5:   "type": "module",
     6:   "scripts": {
     7:     "dev": "vite",
     8:     "build": "vite build",
     9:     "lint": "eslint . --max-warnings=200",
    10:     "preview": "vite preview",
    11:     "serve": "npx --yes serve -s dist"
    12:   },
    13:   "dependencies": {
    14:     "apexcharts": "^5.3.3",
    15:     "axios": "^1.11.0",
    16:     "leaflet": "^1.9.4",
    17:     "dompurify": "^3.1.6",
    18:     "react-toastify": "^9.1.3",
    19:     "leaflet-draw": "^1.0.4",
    20:     "rc-tree": "^5.13.1",
    21:     "react": "^18.3.1",
    22:     "react-apexcharts": "^1.7.0",
    23:     "react-dom": "^18.3.1",
    24:     "react-icons": "^5.5.0",
    25:     "react-leaflet-draw": "^0.20.6",
    26:     "react-pro-sidebar": "^1.1.0",
    27:     "react-router-dom": "^7.8.1",
    28:     "sass": "^1.90.0",
    29:     "uuid": "^11.1.0"
    30:   },
    31:   "devDependencies": {
    32:     "@eslint/js": "^9.32.0",
    33:     "@types/react": "^18.3.1",
    34:     "@types/react-dom": "^18.3.1",
    35:     "@vitejs/plugin-react": "^4.7.0",
    36:     "eslint": "^9.32.0",
    37:     "eslint-plugin-react-hooks": "^5.2.0",
    38:     "eslint-plugin-react-refresh": "^0.4.20",
    39:     "globals": "^16.3.0",
    40:     "vite": "^7.1.0"
    41:   }
    42: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\README.md
SIZE: 2205 bytes
================================================================================
     1: ## Agro Map frontend
     2: 
     3: Leaflet + React (Vite) asosidagi geo / inshoot boshqaruv interfeysi.
     4: 
     5: ### Stack
     6: 
     7: - React 18 + Vite
     8: - Leaflet, react-leaflet-draw
     9: - Axios (token refresh + interceptorlar)
    10: - rc-tree (tashkilot daraxti)
    11: - react-toastify (bildirishnomalar)
    12: - SCSS modul & tematik o'zgaruvchilar
    13: 
    14: ### Tez boshlash
    15: 
    16: ```bash
    17: cp .env.example .env   # kerakli qiymatlarni sozlang
    18: npm install
    19: npm run dev
    20: ```
    21: 
    22: Brauzer: http://localhost:5173 (yoki Vite chiqargan port)
    23: 
    24: ### Muhim environment o'zgaruvchilar
    25: 
    26: | O'zgaruvchi                            | Ma'no                                     |
    27: | -------------------------------------- | ----------------------------------------- |
    28: | VITE_API_BASE                          | Backend root (mas: http://localhost:8080) |
    29: | VITE_IDLE_MINUTES                      | Sessiya bo'sh turish daqiqalari           |
    30: | VITE_TOKEN_REFRESH_LEEWAY_SEC          | Refresh tampon (sekund)                   |
    31: | VITE_TILE_HYBRID / VITE_TILE_SATELLITE | Keshlangan plitalar URL shablonlari       |
    32: | VITE_TILE_TMS                          | TMS yoqilgan (true/false)                 |
    33: 
    34: ### Build (production)
    35: 
    36: ```bash
    37: npm run build
    38: ```
    39: 
    40: Natija `dist/` papkada. Static server (nginx, caddy, serve) orqali tarqating:
    41: 
    42: ```bash
    43: npm run preview   # lokal ishlab ko‘rish
    44: ```
    45: 
    46: Nginx misol config bo'lagi:
    47: 
    48: ```
    49: location / {
    50: 	root   /var/www/agro-map/dist;
    51: 	try_files $uri /index.html;
    52: }
    53: location /api/ {
    54: 	proxy_pass http://localhost:8080/api/; # backend
    55: }
    56: ```
    57: 
    58: ### Lint
    59: 
    60: ```bash
    61: npm run lint
    62: ```
    63: 
    64: ### Debug yordamchi
    65: 
    66: Konsol loglarini yoqish:
    67: 
    68: ```js
    69: localStorage.setItem("debug", "1");
    70: ```
    71: 
    72: O‘chirish:
    73: 
    74: ```js
    75: localStorage.removeItem("debug");
    76: ```
    77: 
    78: ### Sessiya ogohlantirish
    79: 
    80: `session:expiring` hodisasi (60s oldin) — `AppShell` toast ko‘rsatadi. Zarur bo‘lsa qo'shimcha tinglovchilar qo‘shing.
    81: 
    82: ### Xavfsizlik
    83: 
    84: Popup va dinamik HTML `sanitizeHTML` orqali tozalanadi. Har qanday innerHTML kiritishdan avval shu utilni ishlating.
    85: 
    86: ### Cluster / Performance
    87: 
    88: `ClusteredFacilityMarkers.jsx` tajriba komponenti. Katta datasetlarda marker klasterlardan foydalaning.
    89: 
    90: ---
    91: 
    92: © 2025 Agro Map


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\admin.js
SIZE: 6941 bytes
================================================================================
     1: // src/api/admin.js
     2: import { httpGet, httpPost } from "./http";
     3: import { me, getDeviceId } from "./auth";
     4: 
     5: /** Online count (fallback 0 agar endpoint bo'lmasa) */
     6: export async function getOnlineCount() {
     7:   try {
     8:     return await httpGet("/auth/online-count");
     9:   } catch {
    10:     return { online: 0 };
    11:   }
    12: }
    13: 
    14: /**
    15:  * Sessions ro'yxati – SERVER PAGINATION ham, eski massiv format ham qo‘llanadi.
    16:  * opts: { userId, includeRevoked=false, includeExpired=false, page=0, size=10, sort="lastSeenAt,desc" }
    17:  * Endpoint: /api/auth/sessions
    18:  */
    19: export async function listSessions(opts = {}) {
    20:   const {
    21:     userId,
    22:     includeRevoked = false,
    23:     includeExpired = false,
    24:     page = 0,
    25:     size = 10,
    26:     sort = "lastSeenAt,desc",
    27:   } = opts;
    28: 
    29:   const params = { includeRevoked, includeExpired, page, size, sort };
    30:   if (userId != null) params.userId = userId;
    31: 
    32:   const res = await httpGet("/auth/sessions", params);
    33: 
    34:   // Fallback uchun joriy foydalanuvchi (eski massiv formatda username/userId bo‘lmasligi mumkin)
    35:   let fallbackUserId = userId ?? null;
    36:   let fallbackUsername = null;
    37:   if (fallbackUserId == null) {
    38:     const u = await me().catch(() => null);
    39:     fallbackUserId = u?.id ?? null;
    40:     fallbackUsername = u?.username ?? u?.login ?? u?.email ?? null;
    41:   }
    42: 
    43:   const isNum = (v) => typeof v === "number" && Number.isFinite(v);
    44: 
    45:   let contentRaw = [];
    46:   let pageNo = page;
    47:   let pageSize = size;
    48:   let totalAll = 0;
    49:   let totalPages = 1;
    50: 
    51:   if (Array.isArray(res)) {
    52:     // Eski backend: oddiy massiv
    53:     contentRaw = res;
    54:     totalAll = res.length;
    55:     totalPages = Math.max(1, Math.ceil(totalAll / Math.max(1, pageSize)));
    56:   } else {
    57:     // Yangi backend: PageResponse
    58:     const raw = res || {};
    59:     contentRaw = Array.isArray(raw.content) ? raw.content : [];
    60:     pageNo = isNum(raw.page) ? raw.page : isNum(raw.number) ? raw.number : page;
    61:     pageSize = isNum(raw.size)
    62:       ? raw.size
    63:       : isNum(raw.pageSize)
    64:       ? raw.pageSize
    65:       : size;
    66:     totalAll = isNum(raw.total)
    67:       ? raw.total
    68:       : isNum(raw.totalElements)
    69:       ? raw.totalElements
    70:       : isNum(raw.totalCount)
    71:       ? raw.totalCount
    72:       : contentRaw.length;
    73:     totalPages = isNum(raw.totalPages)
    74:       ? raw.totalPages
    75:       : Math.max(1, Math.ceil(totalAll / Math.max(1, pageSize)));
    76:   }
    77: 
    78:   const baseIndex = pageNo * pageSize; // № ustuni uchun
    79: 
    80:   const content = contentRaw.map((s, i) => ({
    81:     id: baseIndex + i + 1,
    82:     deviceId: s.deviceId,
    83:     ip: s.ip,
    84:     userAgent: s.userAgent,
    85:     createdAt: s.createdAt,
    86:     lastSeenAt: s.lastSeenAt,
    87:     expiresAt: s.expiresAt,
    88:     revoked: !!s.revoked,
    89:     tokenSuffix: s.tokenSuffix,
    90:     userId: s.userId ?? fallbackUserId ?? undefined,
    91:     username: s.username ?? fallbackUsername ?? undefined,
    92:   }));
    93: 
    94:   return {
    95:     content,
    96:     page: pageNo,
    97:     size: pageSize,
    98:     total: totalAll,
    99:     totalPages,
   100:   };
   101: }
   102: 
   103: /** Bitta device sessiyasini bekor qilish */
   104: export async function revokeDevice(userIdParam, deviceId) {
   105:   const user = await me().catch(() => null);
   106:   const userId = userIdParam ?? user?.id;
   107:   const qs = new URLSearchParams({
   108:     userId: String(userId),
   109:     deviceId,
   110:   }).toString();
   111:   return httpPost(`/auth/sessions/revoke?${qs}`, {});
   112: }
   113: 
   114: /** Joriy foydalanuvchi uchun: boshqalarning sessiyalarini bekor qilish (o'zingizni saqlab) */
   115: export async function revokeAllForUser(userIdParam) {
   116:   const u = await me().catch(() => null);
   117:   const userId = userIdParam ?? u?.id;
   118:   const keepDeviceId = getDeviceId();
   119:   const qs = new URLSearchParams({
   120:     userId: String(userId),
   121:     keepDeviceId,
   122:   }).toString();
   123:   return httpPost(`/auth/sessions/revoke-others?${qs}`, {});
   124: }
   125: 
   126: /**
   127:  * Audit log ro'yxati (paging).
   128:  * opts: { page=0, size=20, userId, deviceId, event, from, to, sort="ts,desc" }
   129:  * Endpoint: /api/admin/audit
   130:  */
   131: export async function listAudit(opts = {}) {
   132:   const {
   133:     page = 0,
   134:     size = 20,
   135:     userId,
   136:     deviceId,
   137:     event,
   138:     from,
   139:     to,
   140:     sort = "ts,desc",
   141:   } = opts;
   142: 
   143:   const params = { page, size, sort };
   144:   if (userId != null) params.userId = userId;
   145:   if (deviceId) params.deviceId = deviceId;
   146:   if (event) params.event = event;
   147:   if (from) params.from = from;
   148:   if (to) params.to = to;
   149: 
   150:   const res = await httpGet("/admin/audit", params);
   151:   const raw = res || {};
   152:   const isNum = (v) => typeof v === "number" && Number.isFinite(v);
   153: 
   154:   const contentRaw = Array.isArray(raw.content) ? raw.content : [];
   155:   const content = contentRaw.map((a) => ({
   156:     id: a.id,
   157:     event: a.event,
   158:     username: a.username ?? a.user?.username ?? null,
   159:     userId: a.userId ?? a.user?.id ?? null,
   160:     deviceId: a.deviceId,
   161:     ip: a.ip,
   162:     userAgent: a.userAgent,
   163:     ts: a.ts,
   164:   }));
   165: 
   166:   const pageNo = isNum(raw.page) ? raw.page : page;
   167:   const pageSize = isNum(raw.size) ? raw.size : size;
   168:   const totalAll = isNum(raw.total)
   169:     ? raw.total
   170:     : isNum(raw.totalElements)
   171:     ? raw.totalElements
   172:     : content.length;
   173:   const totalPages = isNum(raw.totalPages)
   174:     ? raw.totalPages
   175:     : Math.max(1, Math.ceil(totalAll / Math.max(1, pageSize)));
   176: 
   177:   return { content, page: pageNo, size: pageSize, total: totalAll, totalPages };
   178: }
   179: 
   180: /**
   181:  * Online foydalanuvchilar ro'yxati (paging + server sort).
   182:  * opts: { page=0, size=20, sort="id,desc" }
   183:  * Endpoint: /api/admin/users/online
   184:  * Response: PageResponse<UserRes> (id, username, fullName, role, status, orgId, orgName, department, position, title, phone, avatarUrl)
   185:  */
   186: export async function listOnlineUsers(opts = {}) {
   187:   const { page = 0, size = 20, sort = "id,desc" } = opts;
   188: 
   189:   const params = { page, size, sort };
   190:   const res = await httpGet("/admin/users/online", params);
   191: 
   192:   const isNum = (v) => typeof v === "number" && Number.isFinite(v);
   193:   const raw = res || {};
   194: 
   195:   const contentRaw = Array.isArray(raw.content) ? raw.content : [];
   196:   const pageNo = isNum(raw.page) ? raw.page : isNum(raw.number) ? raw.number : page;
   197:   const pageSize = isNum(raw.size)
   198:     ? raw.size
   199:     : isNum(raw.pageSize)
   200:     ? raw.pageSize
   201:     : size;
   202:   const totalAll = isNum(raw.total)
   203:     ? raw.total
   204:     : isNum(raw.totalElements)
   205:     ? raw.totalElements
   206:     : contentRaw.length;
   207:   const totalPages = isNum(raw.totalPages)
   208:     ? raw.totalPages
   209:     : Math.max(1, Math.ceil(totalAll / Math.max(1, pageSize)));
   210: 
   211:   const baseIndex = pageNo * pageSize;
   212: 
   213:   const content = contentRaw.map((u, i) => ({
   214:     rowNo: baseIndex + i + 1, // jadvaldagi "№"
   215:     id: u.id,
   216:     username: u.username,
   217:     fullName: u.fullName,
   218:     role: u.role,
   219:     status: u.status,
   220:     orgId: u.orgId,
   221:     orgName: u.orgName,
   222:     department: u.department,
   223:     position: u.position,
   224:     title: u.title,
   225:     phone: u.phone,
   226:     avatarUrl: u.avatarUrl,
   227:   }));
   228: 
   229:   return { content, page: pageNo, size: pageSize, total: totalAll, totalPages };
   230: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\auth.js
SIZE: 5828 bytes
================================================================================
     1: // src/api/auth.js
     2: import { httpGet, httpPost } from "./http";
     3: import axios from "axios"; // proactive refresh uchun bevosita chaqiramiz
     4: import {
     5:   setAccessToken as memSetToken,
     6:   getAccessToken as memGetToken,
     7:   setAccessExpireAt as memSetExp,
     8:   getAccessExpireAt as memGetExp,
     9: } from "./tokenStore";
    10: 
    11: /** LocalStorage keys */
    12: const ACCESS_KEY = "token"; // access token (JWT)
    13: const ACCESS_EXP_KEY = "tokenExpAt"; // access expire time (ms since epoch)
    14: 
    15: // --- Device ID (barqaror) ---
    16: export function getDeviceId() {
    17:   try {
    18:     let id = localStorage.getItem("deviceId");
    19:     if (!id) {
    20:       const rndBytes = (len = 16) =>
    21:         window.crypto?.getRandomValues
    22:           ? Array.from(window.crypto.getRandomValues(new Uint8Array(len)))
    23:           : Array.from({ length: len }, () => Math.floor(Math.random() * 256));
    24:       const toHex = (arr) =>
    25:         arr.map((b) => (b & 0xff).toString(16).padStart(2, "0")).join("");
    26:       const p1 = toHex(rndBytes(8)).slice(0, 8);
    27:       const p2 = toHex(rndBytes(4)).slice(0, 4);
    28:       const p3 = toHex(rndBytes(4)).slice(0, 4);
    29:       const p4 = toHex(rndBytes(4)).slice(0, 4);
    30:       const p5 = toHex(rndBytes(12)).slice(0, 12);
    31:       id = `${p1}-${p2}-${p3}-${p4}-${p5}`;
    32:       localStorage.setItem("deviceId", id);
    33:     }
    34:     return id;
    35:   } catch {
    36:     return "unknown-device";
    37:   }
    38: }
    39: 
    40: // --- Token helpers ---
    41: export function setAccessToken(t) {
    42:   memSetToken(t || null);
    43: }
    44: export function getToken() {
    45:   return memGetToken();
    46: }
    47: // refresh token endi HttpOnly cookie’da, front o‘qimaydi
    48: 
    49: /** Access token expire timestamp (ms) */
    50: export function setAccessExpireAt(ms) {
    51:   memSetExp(ms ?? null);
    52: }
    53: export function getAccessExpireAt() {
    54:   return memGetExp();
    55: }
    56: 
    57: /** Access tokenni refresh qilish (proaktiv yoki qo'lda).  */
    58: let _manualRefreshing = null;
    59: export async function refreshAccessToken() {
    60:   if (_manualRefreshing) return _manualRefreshing; // single-flight
    61: 
    62:   const RAW_BASE = import.meta.env.VITE_API_BASE ?? "/api";
    63:   const BASE = RAW_BASE.endsWith("/api") ? RAW_BASE : `${RAW_BASE}/api`;
    64:   const deviceId = getDeviceId();
    65: 
    66:   _manualRefreshing = axios
    67:     .post(
    68:       `${BASE}/auth/refresh`,
    69:       { deviceId },
    70:       { headers: { "X-Device-Id": deviceId }, withCredentials: true }
    71:     )
    72:     .then(({ data }) => {
    73:       const { accessToken, accessExpiresAt, token } = data || {};
    74:       const newAccess = accessToken || token;
    75:       if (!newAccess) throw new Error("Malformed refresh response");
    76:       setAccessToken(newAccess);
    77:       if (accessExpiresAt) {
    78:         const ms =
    79:           typeof accessExpiresAt === "string"
    80:             ? Date.parse(accessExpiresAt)
    81:             : accessExpiresAt;
    82:         if (ms) setAccessExpireAt(ms);
    83:       } else {
    84:         const payload = decodeJWT();
    85:         if (payload?.exp) setAccessExpireAt(payload.exp * 1000);
    86:       }
    87:       return newAccess;
    88:     })
    89:     .finally(() => {
    90:       _manualRefreshing = null;
    91:     });
    92:   return _manualRefreshing;
    93: }
    94: 
    95: /** Login – backend TokenPair (accessToken, refreshToken, accessExpiresAt) */
    96: export async function login(username, password, extra = {}) {
    97:   const deviceId = getDeviceId();
    98:   const RAW_BASE = import.meta.env.VITE_API_BASE ?? "/api";
    99:   const BASE = RAW_BASE.endsWith("/api") ? RAW_BASE : `${RAW_BASE}/api`;
   100:   const { data } = await axios.post(
   101:     `${BASE}/auth/login`,
   102:     { username, password, deviceId, ...pickCaptcha(extra) },
   103:     { withCredentials: true, headers: { "X-Device-Id": deviceId } }
   104:   );
   105: 
   106:   const { accessToken, accessExpiresAt, token } = data || {};
   107:   const access = accessToken || token;
   108: 
   109:   if (access) setAccessToken(access);
   110:   if (accessExpiresAt) {
   111:     const ms =
   112:       typeof accessExpiresAt === "string"
   113:         ? Date.parse(accessExpiresAt)
   114:         : accessExpiresAt;
   115:     if (ms) setAccessExpireAt(ms);
   116:   } else {
   117:     // fallback: from JWT exp
   118:     const payload = decodeJWT();
   119:     if (payload?.exp) setAccessExpireAt(payload.exp * 1000);
   120:   }
   121:   return !!access;
   122: }
   123: 
   124: function pickCaptcha(obj) {
   125:   if (!obj) return {};
   126:   const out = {};
   127:   if (obj.captchaId) out.captchaId = obj.captchaId;
   128:   if (obj.captchaAnswer) out.captchaAnswer = obj.captchaAnswer;
   129:   return out;
   130: }
   131: 
   132: /** Logout – server revoke + local storage clear */
   133: export async function logout() {
   134:   try {
   135:     const RAW_BASE = import.meta.env.VITE_API_BASE ?? "/api";
   136:     const BASE = RAW_BASE.endsWith("/api") ? RAW_BASE : `${RAW_BASE}/api`;
   137:     const deviceId = getDeviceId();
   138:     await axios.post(
   139:       `${BASE}/auth/logout`,
   140:       { deviceId },
   141:       { withCredentials: true, headers: { "X-Device-Id": deviceId } }
   142:     );
   143:   } finally {
   144:     setAccessToken(null);
   145:     setAccessExpireAt(null);
   146:   }
   147: }
   148: 
   149: /** JWT mavjudligini tekshirish (access yaroqli yoki refresh bor) */
   150: export function isAuthenticated() {
   151:   const access = getToken();
   152:   if (access && !isExpired(access)) return true;
   153:   return false;
   154: }
   155: 
   156: /** /auth/me – foydalanuvchini olish (Bearer’ni http.js qo‘shadi) */
   157: export async function me() {
   158:   return httpGet("/auth/me");
   159: }
   160: 
   161: /** Heartbeat – real-time online */
   162: export async function heartbeat() {
   163:   return httpPost("/auth/heartbeat", { deviceId: getDeviceId() });
   164: }
   165: 
   166: // --- Utility ---
   167: export function decodeJWT() {
   168:   const t = getToken();
   169:   if (!t) return null;
   170:   try {
   171:     const [, payload] = t.split(".");
   172:     return JSON.parse(atob(payload.replace(/-/g, "+").replace(/_/g, "/")));
   173:   } catch {
   174:     return null;
   175:   }
   176: }
   177: 
   178: function isExpired(jwt) {
   179:   try {
   180:     const [, payload] = jwt.split(".");
   181:     const data = JSON.parse(
   182:       atob(payload.replace(/-/g, "+").replace(/_/g, "/"))
   183:     );
   184:     if (!data.exp) return false;
   185:     return Date.now() / 1000 > data.exp;
   186:   } catch {
   187:     return true;
   188:   }
   189: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\captcha.js
SIZE: 401 bytes
================================================================================
     1: // src/api/captcha.js
     2: import { httpGet, httpPost } from "./http";
     3: 
     4: /**
     5:  * GET /api/captcha/new -> { id, image, ttlSeconds }
     6:  */
     7: export async function getNewCaptcha() {
     8:   return httpGet("/captcha/new");
     9: }
    10: 
    11: /**
    12:  * POST /api/captcha/verify { id, answer } -> { ok: boolean }
    13:  */
    14: export async function verifyCaptcha({ id, answer }) {
    15:   return httpPost("/captcha/verify", { id, answer });
    16: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\deviceId.js
SIZE: 359 bytes
================================================================================
     1: // src/utils/deviceId.js
     2: import { v4 as uuidv4 } from "uuid";
     3: 
     4: const KEY = "deviceId";
     5: 
     6: export function getDeviceId() {
     7:   try {
     8:     let id = localStorage.getItem(KEY);
     9:     if (!id) {
    10:       id = uuidv4();
    11:       localStorage.setItem(KEY, id);
    12:     }
    13:     return id;
    14:   } catch {
    15:     // SSR yoki private rejimda
    16:     return "unknown-device";
    17:   }
    18: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\drawings.js
SIZE: 723 bytes
================================================================================
     1: // src/api/drawings.js
     2: import { api } from "./http";
     3: 
     4: export const getLatestDrawing = async () => {
     5:   const res = await api.get("/drawings/latest");
     6:   return res.status === 204 ? null : res.data;
     7: };
     8: 
     9: export const saveDrawing = async (geojson, name = "default") => {
    10:   const { data } = await api.post("/drawings", { name, geojson });
    11:   return data;
    12: };
    13: 
    14: // Optional helper (backend may or may not implement).
    15: // Silently swallows 404 so callers can call without existence check.
    16: export const deleteDrawing = async (name) => {
    17:   try {
    18:     await api.delete(`/drawings/${encodeURIComponent(name)}`);
    19:     return true;
    20:   } catch (e) {
    21:     if (e?.response?.status === 404) return false;
    22:     throw e;
    23:   }
    24: };


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\facilities.js
SIZE: 3220 bytes
================================================================================
     1: // src/api/facilities.js
     2: import { api } from "./http";
     3: 
     4: /* Normalizers */
     5: function normalizeFacility(x) {
     6:   if (!x) return null;
     7:   return {
     8:     id: x.id,
     9:     orgId: x.orgId,
    10:     orgName: x.orgName,
    11:     name: x.name,
    12:     type: x.type,
    13:     status: x.status,
    14:     lat: x.lat,
    15:     lng: x.lng,
    16:     zoom: x.zoom ?? null,
    17:     attributes: x.attributes ?? {},
    18:     geometry: x.geometry ?? null,
    19:     createdAt: x.createdAt,
    20:     updatedAt: x.updatedAt,
    21:   };
    22: }
    23: function normalizeList(list) {
    24:   if (Array.isArray(list)) return list.map(normalizeFacility);
    25:   if (list && Array.isArray(list.content))
    26:     return list.content.map(normalizeFacility);
    27:   return [];
    28: }
    29: function withAttributes(obj = {}) {
    30:   const o = { ...(obj || {}) };
    31:   if (!o.attributes || typeof o.attributes !== "object") o.attributes = {};
    32:   return o;
    33: }
    34: 
    35: /** Server-side pagination bilan obyektlar ro'yxati */
    36: export async function listFacilitiesPage(opts = {}) {
    37:   const {
    38:     orgId,
    39:     q,
    40:     status,
    41:     type,
    42:     types,
    43:     bbox,
    44:     page = 0,
    45:     size = 10,
    46:     sort,
    47:   } = opts;
    48: 
    49:   const params = new URLSearchParams();
    50: 
    51:   if (orgId != null) params.set("orgId", String(orgId));
    52:   if (q) params.set("q", q);
    53:   if (status) params.set("status", status);
    54:   if (type) params.set("type", type);
    55:   if (types)
    56:     params.set("types", Array.isArray(types) ? types.join(",") : String(types));
    57:   if (bbox) params.set("bbox", bbox);
    58: 
    59:   params.set("page", String(page));
    60:   params.set("size", String(size));
    61: 
    62:   if (Array.isArray(sort)) sort.forEach((s) => params.append("sort", s));
    63:   else if (sort) params.set("sort", sort);
    64: 
    65:   const { data } = await api.get(`/facilities?${params.toString()}`);
    66:   // backend: { content, page, size, totalElements, totalPages, last }
    67:   return data;
    68: }
    69: 
    70: /* READ (all pages merge) */
    71: export async function listFacilities(params = {}, mergeOpts = {}) {
    72:   const size = mergeOpts.size ?? 500;
    73:   const maxPages = mergeOpts.maxPages ?? 50;
    74:   let page = 0;
    75:   let out = [];
    76:   while (page < maxPages) {
    77:     const pageRes = await listFacilitiesPage({ ...params, page, size });
    78:     const items = normalizeList(pageRes);
    79:     out = out.concat(items);
    80:     const isLast =
    81:       pageRes?.last === true ||
    82:       (typeof pageRes?.totalPages === "number" &&
    83:         page >= pageRes.totalPages - 1) ||
    84:       items.length < size;
    85:     if (isLast) break;
    86:     page += 1;
    87:   }
    88:   return out;
    89: }
    90: 
    91: export async function getFacility(id) {
    92:   const { data } = await api.get(`/facilities/${id}`);
    93:   return normalizeFacility(data);
    94: }
    95: 
    96: /* WRITE */
    97: export async function createFacility(payload) {
    98:   const { data } = await api.post("/facilities", withAttributes(payload));
    99:   return normalizeFacility(data);
   100: }
   101: export async function patchFacility(id, partial) {
   102:   const { data } = await api.patch(
   103:     `/facilities/${id}`,
   104:     withAttributes(partial)
   105:   );
   106:   return normalizeFacility(data);
   107: }
   108: export async function putFacility(id, full) {
   109:   const { data } = await api.put(`/facilities/${id}`, withAttributes(full));
   110:   return normalizeFacility(data);
   111: }
   112: export async function deleteFacility(id) {
   113:   const { data } = await api.delete(`/facilities/${id}`);
   114:   return data;
   115: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\facilityBase.js
SIZE: 1226 bytes
================================================================================
     1: // src/api/facilityBase.js
     2: import { api } from "./http";
     3: 
     4: /**
     5:  * General helpers for per-type modules
     6:  */
     7: 
     8: // List by type (serverdagi umumiy /api/facilities ni ishlatadi)
     9: export async function listByType(type, params = {}) {
    10:   const q = new URLSearchParams();
    11:   q.set("types", type);
    12:   if (params.orgId != null) q.set("orgId", String(params.orgId));
    13:   if (params.q) q.set("q", params.q);
    14:   // bbox bo'lsa "minLng,minLat,maxLng,maxLat"
    15:   if (params.bbox) q.set("bbox", params.bbox);
    16: 
    17:   const res = await api.get(`/facilities?${q.toString()}`);
    18:   return res.data;
    19: }
    20: 
    21: // Create with forced type
    22: export async function createWithType(type, payload) {
    23:   const body = { ...payload, type };
    24:   const res = await api.post("/facilities", body);
    25:   return res.data;
    26: }
    27: 
    28: // Update all fields (PUT)
    29: export async function putOne(id, payload) {
    30:   const res = await api.put(`/facilities/${id}`, payload);
    31:   return res.data;
    32: }
    33: 
    34: // Partial update (PATCH)
    35: export async function patchOne(id, patch) {
    36:   const res = await api.patch(`/facilities/${id}`, patch);
    37:   return res.data;
    38: }
    39: 
    40: // Delete
    41: export async function removeOne(id) {
    42:   const res = await api.delete(`/facilities/${id}`);
    43:   return res.data;
    44: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\facilityImages.js
SIZE: 1731 bytes
================================================================================
     1: // src/api/facilityImages.js
     2: // API helpers for facility image gallery
     3: // DTO: { id:number, url:string, originalName?:string, contentType:string, sizeBytes:number, createdAt:string }
     4: import { api } from "./http";
     5: 
     6: // List images for a facility
     7: export async function listFacilityImages(facilityId) {
     8:   if (!facilityId && facilityId !== 0) return [];
     9:   const { data } = await api.get(`/facilities/${facilityId}/images`);
    10:   return Array.isArray(data) ? data : [];
    11: }
    12: 
    13: // Upload single image file (File|Blob)
    14: export async function uploadFacilityImage(facilityId, file, opts = {}) {
    15:   if (!file) throw new Error("Fayl topilmadi");
    16:   const { onProgress } = opts;
    17:   const fd = new FormData();
    18:   fd.append("file", file);
    19:   const { data } = await api.post(`/facilities/${facilityId}/images`, fd, {
    20:     onUploadProgress: (evt) => {
    21:       if (onProgress && evt?.total) {
    22:         const ratio = evt.loaded / evt.total;
    23:         try {
    24:           onProgress(Math.min(1, Math.max(0, ratio)));
    25:         } catch {}
    26:       }
    27:     },
    28:   }); // boundary ni brauzer o'zi qo'yadi
    29:   return data;
    30: }
    31: 
    32: // Delete image
    33: export async function deleteFacilityImage(facilityId, imageId) {
    34:   await api.delete(`/facilities/${facilityId}/images/${imageId}`);
    35:   return true;
    36: }
    37: 
    38: // Helper to build absolute URL for image serving (backend returns relative path like /uploads/facility/123/abc.png)
    39: export function buildImageSrc(relUrl) {
    40:   if (!relUrl) return "";
    41:   try {
    42:     // api.defaults.baseURL may end with /api. Remove trailing /api for static file host.
    43:     const base = (api.defaults?.baseURL || "")
    44:       .replace(/\/$/, "")
    45:       .replace(/\/api$/, "");
    46:     return base + relUrl;
    47:   } catch {
    48:     return relUrl;
    49:   }
    50: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\http.js
SIZE: 7321 bytes
================================================================================
     1: // src/api/http.js
     2: import axios from "axios";
     3: import { debugWarn } from "../utils/debug";
     4: import { mapApiError } from "../utils/apiErrors";
     5: import {
     6:   getAccessToken as memGetToken,
     7:   setAccessToken as memSetToken,
     8:   setAccessExpireAt as memSetExp,
     9:   clearAccessToken as memClearToken,
    10:   clearAccessExpireAt as memClearExp,
    11: } from "./tokenStore";
    12: import { toast } from "react-toastify";
    13: 
    14: /* =========================
    15:    LOCAL KEYS (auth.js bilan mos)
    16:    ========================= */
    17: const ACCESS_KEY = "token";
    18: /* Token helpers (in-memory) */
    19: function getAccessToken() {
    20:   return memGetToken();
    21: }
    22: function setAccessToken(t) {
    23:   memSetToken(t);
    24: }
    25: function setAccessExpireAt(ms) {
    26:   memSetExp(ms);
    27: }
    28: 
    29: /* =========================
    30:    BASE URL
    31:    ========================= */
    32: const RAW_BASE = import.meta.env.VITE_API_BASE ?? "/api";
    33: const BASE = RAW_BASE.endsWith("/api") ? RAW_BASE : `${RAW_BASE}/api`;
    34: 
    35: /* =========================
    36:    Device ID (barqaror)
    37:    ========================= */
    38: function getDeviceId() {
    39:   try {
    40:     let id = localStorage.getItem("deviceId");
    41:     if (!id) {
    42:       const rnd = (n) =>
    43:         (window.crypto?.getRandomValues
    44:           ? Array.from(window.crypto.getRandomValues(new Uint8Array(n)))
    45:           : Array.from({ length: n }, () => Math.floor(Math.random() * 256))
    46:         )
    47:           .map((b) => b.toString(16).padStart(2, "0"))
    48:           .join("");
    49:       id = `${rnd(4)}-${rnd(2)}-${rnd(2)}-${rnd(2)}-${rnd(6)}`; // 8-4-4-4-12
    50:       localStorage.setItem("deviceId", id);
    51:     }
    52:     return id;
    53:   } catch {
    54:     return "unknown-device";
    55:   }
    56: }
    57: 
    58: /* =========================
    59:    Axios instance
    60:    ========================= */
    61: export const api = axios.create({
    62:   baseURL: BASE,
    63:   timeout: 30000,
    64: });
    65: 
    66: /* =========================
    67:    Request ID generator (per request) 
    68:    ========================= */
    69: function genReqId() {
    70:   // 12 random hex chars
    71:   const arr = (
    72:     window.crypto?.getRandomValues
    73:       ? Array.from(window.crypto.getRandomValues(new Uint8Array(6)))
    74:       : Array.from({ length: 6 }, () => Math.floor(Math.random() * 256))
    75:   ).map((b) => b.toString(16).padStart(2, "0"));
    76:   return arr.join("");
    77: }
    78: 
    79: /* Yordamchi: URL pathni chiqarib olish */
    80: function getPathname(urlLike) {
    81:   try {
    82:     // absolute yoki nisbiy bo'lishi mumkin
    83:     return new URL(urlLike, BASE).pathname.replace(/\/+$/, "");
    84:   } catch {
    85:     return String(urlLike || "");
    86:   }
    87: }
    88: 
    89: /* Auth endpointmi? (Bearer qo‘ymaymiz va refresh ham qilmaymiz) */
    90: function isAuthEndpoint(urlLike) {
    91:   const p = getPathname(urlLike);
    92:   return p === "/auth/login" || p === "/auth/refresh" || p === "/auth/logout";
    93: }
    94: 
    95: /* =========================
    96:    REQUEST INTERCEPTOR
    97:    ========================= */
    98: api.interceptors.request.use((config) => {
    99:   config.headers = config.headers || {};
   100:   // Cookie yuborish: faqat auth endpointlarida kerak
   101:   if (isAuthEndpoint(config.url)) {
   102:     config.withCredentials = true;
   103:   }
   104: 
   105:   // Device header
   106:   if (!config.headers["X-Device-Id"]) {
   107:     config.headers["X-Device-Id"] = getDeviceId();
   108:   }
   109: 
   110:   // Request ID (observability)
   111:   if (!config.headers["X-Request-Id"]) {
   112:     config.headers["X-Request-Id"] = genReqId();
   113:   }
   114: 
   115:   // Bearer faqat auth bo'lmagan endpointlar uchun
   116:   if (!isAuthEndpoint(config.url)) {
   117:     const t = getAccessToken();
   118:     if (t) config.headers.Authorization = `Bearer ${t}`;
   119:     else delete config.headers.Authorization;
   120:   }
   121: 
   122:   // ?sort[]=a&sort[]=b -> ?sort=a&sort=b (backend qulayligi uchun)
   123:   if (config?.params?.sort && Array.isArray(config.params.sort)) {
   124:     const params = new URLSearchParams();
   125:     for (const [k, v] of Object.entries(config.params)) {
   126:       if (k === "sort") {
   127:         v.filter(Boolean).forEach((s) =>
   128:           params.append("sort", String(s).trim())
   129:         );
   130:       } else if (v !== undefined && v !== null && String(v).length) {
   131:         params.append(k, String(v));
   132:       }
   133:     }
   134:     config.params = params;
   135:   }
   136: 
   137:   return config;
   138: });
   139: 
   140: /* =========================
   141:    401 -> REFRESH (single-flight)
   142:    ========================= */
   143: let refreshing = null;
   144: 
   145: async function refreshTokens() {
   146:   // Interceptor loopdan qochish uchun to'g'ridan-to'g'ri axios
   147:   const deviceId = getDeviceId();
   148:   const { data } = await axios.post(
   149:     `${BASE}/auth/refresh`,
   150:     { deviceId },
   151:     {
   152:       headers: { "X-Device-Id": deviceId },
   153:       withCredentials: true,
   154:     }
   155:   );
   156: 
   157:   const { accessToken, accessExpiresAt, token } = data || {};
   158:   const newAccess = accessToken || token;
   159:   if (!newAccess) throw new Error("Malformed refresh response");
   160: 
   161:   setAccessToken(newAccess);
   162:   if (accessExpiresAt) {
   163:     const ms =
   164:       typeof accessExpiresAt === "string"
   165:         ? Date.parse(accessExpiresAt)
   166:         : accessExpiresAt;
   167:     if (ms) setAccessExpireAt(ms);
   168:   }
   169:   return newAccess;
   170: }
   171: 
   172: function queueRefresh() {
   173:   if (!refreshing) {
   174:     refreshing = refreshTokens().finally(() => {
   175:       refreshing = null;
   176:     });
   177:   }
   178:   return refreshing;
   179: }
   180: 
   181: /* =========================
   182:    RESPONSE INTERCEPTOR
   183:    ========================= */
   184: api.interceptors.response.use(
   185:   (res) => res,
   186:   async (err) => {
   187:     const { response, config } = err || {};
   188:     const status = response?.status;
   189:     const original = config || {};
   190: 
   191:     // Tarmoq xatosi — foydali log
   192:     if (err?.code === "ERR_NETWORK" && import.meta.env.DEV) {
   193:       debugWarn("[API] Network error. Backend ishlyaptimi? baseURL=", BASE);
   194:     }
   195: 
   196:     // 429 — to'g'ridan-to'g'ri qaytarib yuboramiz
   197:     if (status === 429) {
   198:       return Promise.reject(err);
   199:     }
   200: 
   201:     // 401 — auth endpointlaridan tashqari holatlarda refresh
   202:     if (
   203:       status === 401 &&
   204:       !isAuthEndpoint(original.url) &&
   205:       !original.__isRetry
   206:     ) {
   207:       try {
   208:         const newAccess = await queueRefresh();
   209:         original.__isRetry = true;
   210:         original.headers = original.headers || {};
   211:         original.headers.Authorization = `Bearer ${newAccess}`;
   212:         return api(original); // qayta so'rov
   213:       } catch (rErr) {
   214:         // Refresh ham ishlamadi — local tokenlarni tozalaymiz
   215:         memClearToken();
   216:         memClearExp();
   217:         const friendly = mapApiError(
   218:           rErr || err,
   219:           "Sessiya yangilashda xatolik"
   220:         );
   221:         toast.error(friendly);
   222:         return Promise.reject(rErr || err);
   223:       }
   224:     }
   225: 
   226:     // MUHIM: 403 bo'lsa tokenlarni TOZALAMAYMIZ — haqiqiy ruxsat masalasi bo'lishi mumkin
   227:     // Umumiy xabarni avtomatik chiqarib yubormaymiz (komponentlar o'zlari hal qiladi)
   228:     return Promise.reject(err);
   229:   }
   230: );
   231: 
   232: /* =========================
   233:    QULAY WRAPPERLAR
   234:    ========================= */
   235: export async function httpGet(url, params) {
   236:   const res = await api.get(url, { params });
   237:   return res.data;
   238: }
   239: export async function httpPost(url, body) {
   240:   const res = await api.post(url, body);
   241:   return res.data;
   242: }
   243: export async function httpPatch(url, body) {
   244:   const res = await api.patch(url, body);
   245:   return res.data;
   246: }
   247: export async function httpPut(url, body) {
   248:   const res = await api.put(url, body);
   249:   return res.data;
   250: }
   251: export async function httpDelete(url) {
   252:   const res = await api.delete(url);
   253:   return res.data;
   254: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\org.js
SIZE: 3566 bytes
================================================================================
     1: // src/api/org.js
     2: import { api, httpGet } from "./http";
     3: import { debugWarn } from "../utils/debug";
     4: import { debugWarn as debugWarn2 } from "../utils/debug"; // alias to replace console.warn below
     5: 
     6: // ======================== TREE ========================
     7: /** Org strukturani daraxt ko‘rinishida olish */
     8: export const getOrgTree = async () => (await api.get("/orgs/tree")).data;
     9: 
    10: // ======================== GET ========================
    11: /** ID bo‘yicha org (batafsil DTO) */
    12: export const getOrg = async (id) => (await api.get(`/orgs/${id}`)).data;
    13: 
    14: /** ID bo‘yicha bitta org (soddalashtirilgan DTO, httpGet bilan) */
    15: export async function getOrgUnit(id) {
    16:   return httpGet(`/orgs/${id}`); // OrgDto
    17: }
    18: 
    19: /** Code bo‘yicha org (asosiy endpoint) */
    20: export async function getOrgByCode(code) {
    21:   return httpGet(`/orgs/by-code/${encodeURIComponent(String(code).trim())}`);
    22:   // OrgDto yoki 403 (agar ruxsat yo‘q bo‘lsa)
    23: }
    24: 
    25: /** ✅ Map uchun: org + facilities + viewport (ruxsat tekshiriladi) */
    26: export async function locateOrg(code) {
    27:   const params = new URLSearchParams({ code });
    28:   return httpGet(`/orgs/locate?${params.toString()}`); // { org, facilities }
    29: }
    30: 
    31: // ======================== PAGE / SEARCH ========================
    32: /** Org’larni paginate + qidiruv + sort bilan olish (asosiy page) */
    33: export const listOrgsPage = async ({
    34:   page = 0,
    35:   size = 20,
    36:   q,
    37:   parentId,
    38:   sort = [],
    39: } = {}) => {
    40:   const params = { page, size };
    41:   if (q && q.trim()) params.q = q.trim();
    42:   if (parentId !== undefined && parentId !== null && String(parentId).length) {
    43:     params.parentId = String(parentId);
    44:   }
    45:   if (Array.isArray(sort) && sort.length) params.sort = sort;
    46:   const res = await api.get("/orgs", { params });
    47:   return res.data;
    48: };
    49: 
    50: /** Qidiruv (sahifalangan) — PageResponse<OrgFlatRes> */
    51: export async function searchOrgUnits({
    52:   q,
    53:   page = 0,
    54:   size = 10,
    55:   sort = "name,asc",
    56: } = {}) {
    57:   const params = new URLSearchParams();
    58:   if (q) params.set("q", q);
    59:   params.set("page", page);
    60:   params.set("size", size);
    61:   params.set("sort", sort);
    62:   return httpGet(`/orgs?${params.toString()}`);
    63: }
    64: 
    65: /** Batafsil org ma'lumotlari.
    66:  * 1) /orgs/{id}/details ishlamasa (404 yoki ruxsat) -> /orgs/{id} ga fallback.
    67:  * 2) Har ikkisi ham xato bo'lsa undefined.
    68:  */
    69: export async function getOrgDetails(id) {
    70:   try {
    71:     let info = await httpGet(`/orgs/${id}/details`);
    72:     if (info && info.org && typeof info.org === "object") {
    73:       info = { ...info.org, ...info }; // flatten structure
    74:     }
    75:     return info;
    76:   } catch (e) {
    77:     // Fallback: oddiy DTO
    78:     try {
    79:       debugWarn2(
    80:         "[getOrgDetails] details fallback /orgs/:id =>",
    81:         id,
    82:         e?.message
    83:       );
    84:       let base = await httpGet(`/orgs/${id}`);
    85:       if (base && base.org && typeof base.org === "object") {
    86:         base = { ...base.org, ...base };
    87:       }
    88:       return base;
    89:     } catch (e2) {
    90:       debugWarn(
    91:         "[getOrgDetails] fallback ham muvaffaqiyatsiz",
    92:         id,
    93:         e2?.message
    94:       );
    95:       return undefined;
    96:     }
    97:   }
    98: }
    99: 
   100: // ======================== CRUD ========================
   101: export const createOrg = async (payload) =>
   102:   (await api.post("/orgs", payload)).data;
   103: 
   104: export const updateOrg = async (id, payload) =>
   105:   (await api.patch(`/orgs/${id}`, payload)).data;
   106: 
   107: export const moveOrg = async (id, payload) =>
   108:   (await api.patch(`/orgs/${id}/move`, payload)).data;
   109: 
   110: export const deleteOrg = async (id) => (await api.delete(`/orgs/${id}`)).data;


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\stats.js
SIZE: 184 bytes
================================================================================
     1: import { httpGet } from "./http";
     2: 
     3: export function getOverview(params) {
     4:   // params: { year?: number, types?: "COWSHED,POULTRY" }
     5:   return httpGet("/stats/overview", params);
     6: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\tokenStore.js
SIZE: 966 bytes
================================================================================
     1: // In-memory token store (no localStorage)
     2: // Dispatches a window event 'auth:token-changed' on updates.
     3: 
     4: let accessToken = null;
     5: let accessExpireAt = null; // ms epoch
     6: 
     7: function emitChange() {
     8:   if (typeof window !== "undefined" && window.dispatchEvent) {
     9:     const ev = new CustomEvent("auth:token-changed", {
    10:       detail: { token: accessToken, expAt: accessExpireAt },
    11:     });
    12:     window.dispatchEvent(ev);
    13:   }
    14: }
    15: 
    16: export function setAccessToken(token) {
    17:   accessToken = token || null;
    18:   emitChange();
    19: }
    20: export function getAccessToken() {
    21:   return accessToken;
    22: }
    23: export function clearAccessToken() {
    24:   accessToken = null;
    25:   emitChange();
    26: }
    27: 
    28: export function setAccessExpireAt(ms) {
    29:   accessExpireAt = typeof ms === "number" && Number.isFinite(ms) ? ms : null;
    30:   emitChange();
    31: }
    32: export function getAccessExpireAt() {
    33:   return accessExpireAt;
    34: }
    35: export function clearAccessExpireAt() {
    36:   accessExpireAt = null;
    37:   emitChange();
    38: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\api\users.js
SIZE: 733 bytes
================================================================================
     1: // src/api/users.js
     2: import { httpGet, httpPost, httpPatch } from "./http";
     3: 
     4: export async function searchUsers(params = {}) {
     5:   return httpGet("/admin/users", params);
     6: }
     7: 
     8: export async function createUser(body) {
     9:   return httpPost("/admin/users", body);
    10: }
    11: 
    12: export async function updateUser(id, body) {
    13:   return httpPatch(`/admin/users/${id}`, body);
    14: }
    15: 
    16: export async function changeUserStatus(id, status) {
    17:   return httpPost(`/admin/users/${id}/status`, { status });
    18: }
    19: 
    20: export async function moveUser(id, { orgId, department }) {
    21:   return httpPost(`/admin/users/${id}/move`, { orgId, department });
    22: }
    23: 
    24: export async function resetUserPassword(id) {
    25:   return httpPost(`/admin/users/${id}/reset-password`, {});
    26: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\App.jsx
SIZE: 8141 bytes
================================================================================
     1: import { useEffect, useState } from "react";
     2: import { Navigate, Route, Routes, useNavigate } from "react-router-dom";
     3: import SidebarMenu from "./components/SidebarMenu";
     4: import Dashboard from "./pages/Dashboard";
     5: import LoginPage from "./pages/LoginPage";
     6: import MapPage from "./pages/MapPage";
     7: import OrgManager from "./pages/OrgManager";
     8: import OrgTablePage from "./pages/OrgTablePage";
     9: import ProtectedRoute from "./routes/ProtectedRoute";
    10: import AdminRoute from "./routes/AdminRoute";
    11: import HeaderBar from "./components/layout/HeaderBar";
    12: import { useTheme } from "./hooks/useTheme";
    13: import GenericFacilityPage from "./pages/facilities/GenericFacilityPage";
    14: import { startHeartbeat } from "./boot/heartbeat";
    15: import { startSessionManager } from "./boot/sessionManager";
    16: import SessionsPage from "./pages/admin/SessionsPage";
    17: import AuditPage from "./pages/admin/AuditPage";
    18: import UsersPage from "./pages/admin/UsersPage";
    19: import OnlineUsersPage from "./pages/admin/OnlineUsersPage";
    20: 
    21: function useIsMobile(query = "(max-width: 1024px)") {
    22:   const [isMobile, setIsMobile] = useState(false);
    23:   useEffect(() => {
    24:     const m = window.matchMedia(query);
    25:     const onChange = () => setIsMobile(m.matches);
    26:     onChange();
    27:     m.addEventListener("change", onChange);
    28:     return () => m.removeEventListener("change", onChange);
    29:   }, [query]);
    30:   return isMobile;
    31: }
    32: 
    33: export default function App() {
    34:   const navigate = useNavigate();
    35:   const isMobile = useIsMobile();
    36:   const [collapsed, setCollapsed] = useState(false);
    37:   const [toggled, setToggled] = useState(false);
    38:   const { isDark, toggle } = useTheme();
    39: 
    40:   useEffect(() => {
    41:     if (isMobile) setCollapsed(false);
    42:   }, [isMobile]);
    43: 
    44:   const onHamburger = () => {
    45:     if (isMobile) setToggled((t) => !t);
    46:     else setCollapsed((c) => !c);
    47:   };
    48: 
    49:   useEffect(() => {
    50:     const stop = startHeartbeat(40000);
    51:     const stopSessionManager = startSessionManager();
    52:     return () => {
    53:       stop && stop();
    54:       stopSessionManager && stopSessionManager();
    55:     };
    56:   }, []);
    57: 
    58:   // Global event: org:open-table -> jadval sahifasiga o'tish
    59:   useEffect(() => {
    60:     function onOpen(e) {
    61:       const id = e?.detail?.id;
    62:       if (id != null) {
    63:         navigate(`/orgs-table?focus=${id}`);
    64:       } else navigate("/orgs-table");
    65:     }
    66:     window.addEventListener("org:open-table", onOpen);
    67:     return () => window.removeEventListener("org:open-table", onOpen);
    68:   }, [navigate]);
    69: 
    70:   const sidebarWidth = isMobile ? 0 : collapsed ? "80px" : "260px";
    71: 
    72:   return (
    73:     <Routes>
    74:       <Route path="/login" element={<LoginPage />} />
    75: 
    76:       <Route element={<ProtectedRoute />}>
    77:         <Route
    78:           path="/*"
    79:           element={
    80:             <div className="app-layout" style={{ "--sidebar-w": sidebarWidth }}>
    81:               {!isMobile && (
    82:                 <div style={{ height: "100vh" }}>
    83:                   <SidebarMenu
    84:                     dark={isDark}
    85:                     collapsed={collapsed}
    86:                     toggled={false}
    87:                     setToggled={setToggled}
    88:                   />
    89:                 </div>
    90:               )}
    91: 
    92:               {isMobile && (
    93:                 <div className={`mobile-overlay ${toggled ? "is-open" : ""}`}>
    94:                   <div
    95:                     className="mobile-overlay__backdrop"
    96:                     onClick={() => setToggled(false)}
    97:                   />
    98:                   <div className="mobile-overlay__panel">
    99:                     <SidebarMenu
   100:                       dark={isDark}
   101:                       collapsed={false}
   102:                       toggled={toggled}
   103:                       setToggled={setToggled}
   104:                     />
   105:                   </div>
   106:                 </div>
   107:               )}
   108: 
   109:               <main className="app-main">
   110:                 <HeaderBar
   111:                   dark={isDark}
   112:                   onToggleTheme={toggle}
   113:                   onHamburger={onHamburger}
   114:                 />
   115: 
   116:                 <div className="app-content">
   117:                   <Routes>
   118:                     <Route
   119:                       path="/"
   120:                       element={<Navigate to="/dashboard" replace />}
   121:                     />
   122:                     <Route
   123:                       path="/dashboard"
   124:                       element={<Dashboard dark={isDark} />}
   125:                     />
   126:                     <Route
   127:                       path="/map"
   128:                       element={
   129:                         <MapPage
   130:                           headerHeight={60}
   131:                           dark={isDark}
   132:                           sidebarOpen={isMobile && toggled}
   133:                         />
   134:                       }
   135:                     />
   136:                     <Route path="/orgs" element={<OrgManager />} />
   137:                     <Route path="/orgs-table" element={<OrgTablePage />} />
   138: 
   139:                     {/* Admin – faqat ADMIN roli */}
   140:                     <Route
   141:                       path="/admin/sessions"
   142:                       element={
   143:                         <AdminRoute>
   144:                           <SessionsPage />
   145:                         </AdminRoute>
   146:                       }
   147:                     />
   148:                     <Route
   149:                       path="/admin/online-users"
   150:                       element={
   151:                         <AdminRoute>
   152:                           <OnlineUsersPage />
   153:                         </AdminRoute>
   154:                       }
   155:                     />
   156:                     <Route
   157:                       path="/admin/audit"
   158:                       element={
   159:                         <AdminRoute>
   160:                           <AuditPage />
   161:                         </AdminRoute>
   162:                       }
   163:                     />
   164:                     <Route
   165:                       path="/admin/users"
   166:                       element={
   167:                         <AdminRoute>
   168:                           <UsersPage />
   169:                         </AdminRoute>
   170:                       }
   171:                     />
   172: 
   173:                     {/* Facilities: kanonik yo‘llar */}
   174:                     <Route
   175:                       path="/facilities"
   176:                       element={<Navigate to="/facilities/greenhouse" replace />}
   177:                     />
   178:                     <Route
   179:                       path="/facilities/:type"
   180:                       element={<GenericFacilityPage />}
   181:                     />
   182: 
   183:                     {/* Legacy -> canonical */}
   184:                     <Route
   185:                       path="/facilities/poultry"
   186:                       element={
   187:                         <Navigate to="/facilities/poultry-meat" replace />
   188:                       }
   189:                     />
   190:                     <Route
   191:                       path="/facilities/workshops"
   192:                       element={
   193:                         <Navigate to="/facilities/workshops-sausage" replace />
   194:                       }
   195:                     />
   196:                     <Route
   197:                       path="/facilities/fur-farm"
   198:                       element={<Navigate to="/facilities/turkey" replace />}
   199:                     />
   200:                     <Route
   201:                       path="/facilities/fish-farm"
   202:                       element={<Navigate to="/facilities/fish-ponds" replace />}
   203:                     />
   204:                     <Route
   205:                       path="/facilities/aux-land"
   206:                       element={<Navigate to="/facilities/aux-lands" replace />}
   207:                     />
   208:                     <Route
   209:                       path="/facilities/border-land"
   210:                       element={
   211:                         <Navigate to="/facilities/border-lands" replace />
   212:                       }
   213:                     />
   214: 
   215:                     <Route
   216:                       path="*"
   217:                       element={<div className="card">Not Found</div>}
   218:                     />
   219:                   </Routes>
   220:                 </div>
   221:               </main>
   222:             </div>
   223:           }
   224:         />
   225:       </Route>
   226: 
   227:       <Route path="*" element={<Navigate to="/" replace />} />
   228:     </Routes>
   229:   );
   230: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\assets\uz_lines.json
SIZE: 164049 bytes
================================================================================
     1: {
     2: "type": "FeatureCollection",
     3: "name": "uz_lines",
     4: "xy_coordinate_resolution": 1e-06,
     5: "features": [
     6: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZFA", "name": "Ferghana" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 71.785136, 39.966278 ], [ 71.785048, 39.966253 ], [ 71.768684, 39.954067 ], [ 71.759284, 39.948219 ], [ 71.754979, 39.947168 ], [ 71.755093, 39.944751 ], [ 71.75494, 39.942884 ], [ 71.753319, 39.941349 ], [ 71.750868, 39.942025 ], [ 71.748712, 39.941592 ], [ 71.747198, 39.940339 ], [ 71.746617, 39.939858 ], [ 71.745356, 39.94094 ], [ 71.746167, 39.949341 ], [ 71.746465, 39.953259 ], [ 71.743728, 39.954858 ], [ 71.737841, 39.956554 ], [ 71.732384, 39.959379 ], [ 71.729467, 39.959669 ], [ 71.721806, 39.957963 ], [ 71.720268, 39.959781 ], [ 71.719545, 39.960935 ], [ 71.724128, 39.962678 ], [ 71.747681, 39.976256 ], [ 71.752828, 39.97727 ], [ 71.757903, 39.977412 ], [ 71.759758, 39.979139 ], [ 71.763287, 39.981286 ], [ 71.768811, 39.982185 ], [ 71.772279, 39.985633 ], [ 71.772389, 39.985748 ], [ 71.773391, 39.986786 ], [ 71.78552, 39.989705 ], [ 71.789757, 39.979318 ], [ 71.785136, 39.966278 ] ], [ [ 70.756293, 40.695578 ], [ 70.782016, 40.707851 ], [ 70.792713, 40.71705 ], [ 70.801911, 40.727308 ], [ 70.81297, 40.73648 ], [ 70.829817, 40.74263 ], [ 70.843304, 40.743405 ], [ 70.871158, 40.741234 ], [ 70.884438, 40.74263 ], [ 70.931464, 40.774747 ], [ 70.951618, 40.774669 ], [ 70.967327, 40.769656 ], [ 70.975389, 40.765367 ], [ 70.9819, 40.761078 ], [ 71.013836, 40.757642 ], [ 71.126956, 40.762293 ], [ 71.063342, 40.696328 ], [ 71.068923, 40.692038 ], [ 71.108042, 40.688731 ], [ 71.115484, 40.685992 ], [ 71.143906, 40.663461 ], [ 71.151192, 40.660206 ], [ 71.161579, 40.657674 ], [ 71.179873, 40.654935 ], [ 71.191035, 40.651783 ], [ 71.211395, 40.639174 ], [ 71.256716, 40.620312 ], [ 71.270978, 40.616901 ], [ 71.293923, 40.620363 ], [ 71.359293, 40.667285 ], [ 71.390764, 40.704079 ], [ 71.41035, 40.716636 ], [ 71.499078, 40.753327 ], [ 71.581812, 40.774256 ], [ 71.611578, 40.740098 ], [ 71.633488, 40.708058 ], [ 71.64341, 40.697284 ], [ 71.647596, 40.695346 ], [ 71.649301, 40.712993 ], [ 71.655348, 40.716016 ], [ 71.66589, 40.715706 ], [ 71.692916, 40.705164 ], [ 71.706094, 40.701599 ], [ 71.716016, 40.70072 ], [ 71.720977, 40.703485 ], [ 71.731984, 40.704699 ], [ 71.748107, 40.703795 ], [ 71.800403, 40.690178 ], [ 71.811462, 40.685295 ], [ 71.819834, 40.677931 ], [ 71.828825, 40.666278 ], [ 71.86903, 40.624446 ], [ 71.877091, 40.62119 ], [ 71.886393, 40.618839 ], [ 71.910112, 40.615919 ], [ 71.930163, 40.618684 ], [ 71.958688, 40.620079 ], [ 72.005404, 40.608168 ], [ 72.065762, 40.598401 ], [ 72.08266, 40.599719 ], [ 72.093564, 40.610028 ], [ 72.103486, 40.616798 ], [ 72.117593, 40.60902 ], [ 72.137127, 40.58729 ], [ 72.144258, 40.582794 ], [ 72.155782, 40.581864 ], [ 72.207614, 40.569979 ], [ 72.221721, 40.560419 ], [ 72.222806, 40.555354 ], [ 72.223116, 40.549825 ], [ 72.222341, 40.537939 ], [ 72.218776, 40.519258 ], [ 72.215985, 40.501352 ], [ 72.218311, 40.487555 ], [ 72.2192, 40.485199 ], [ 72.215017, 40.485776 ], [ 72.205461, 40.486273 ], [ 72.202127, 40.486193 ], [ 72.198597, 40.483193 ], [ 72.196405, 40.482411 ], [ 72.194182, 40.482357 ], [ 72.191617, 40.482902 ], [ 72.189338, 40.484182 ], [ 72.187347, 40.486576 ], [ 72.186509, 40.491035 ], [ 72.186367, 40.494431 ], [ 72.17305, 40.49362 ], [ 72.172532, 40.490815 ], [ 72.170923, 40.487497 ], [ 72.169387, 40.486245 ], [ 72.164726, 40.483702 ], [ 72.159994, 40.480975 ], [ 72.154438, 40.477074 ], [ 72.148919, 40.472324 ], [ 72.139934, 40.46688 ], [ 72.131407, 40.461932 ], [ 72.126616, 40.458778 ], [ 72.121944, 40.456597 ], [ 72.117409, 40.454905 ], [ 72.115869, 40.453774 ], [ 72.115895, 40.453167 ], [ 72.119643, 40.450954 ], [ 72.121615, 40.449424 ], [ 72.121968, 40.448583 ], [ 72.119923, 40.44812 ], [ 72.117861, 40.448068 ], [ 72.112575, 40.445386 ], [ 72.106232, 40.441463 ], [ 72.102877, 40.438222 ], [ 72.099596, 40.433282 ], [ 72.099214, 40.431087 ], [ 72.099445, 40.429393 ], [ 72.10422, 40.429148 ], [ 72.106509, 40.42941 ], [ 72.099299, 40.426371 ], [ 72.090101, 40.416035 ], [ 72.085836, 40.402765 ], [ 72.083947, 40.403697 ], [ 72.081542, 40.404243 ], [ 72.078312, 40.401855 ], [ 72.07475, 40.399822 ], [ 72.07271, 40.399284 ], [ 72.069856, 40.399212 ], [ 72.068143, 40.39844 ], [ 72.063619, 40.392982 ], [ 72.059968, 40.385725 ], [ 72.057928, 40.381544 ], [ 72.054156, 40.380719 ], [ 72.051356, 40.379434 ], [ 72.049217, 40.377558 ], [ 72.047711, 40.375706 ], [ 72.048815, 40.372216 ], [ 72.047606, 40.37085 ], [ 72.044648, 40.369561 ], [ 72.041394, 40.367779 ], [ 72.03812, 40.366482 ], [ 72.0355, 40.364716 ], [ 72.033182, 40.363321 ], [ 72.029147, 40.361276 ], [ 72.02601, 40.360467 ], [ 72.023091, 40.358329 ], [ 72.01969, 40.3563 ], [ 72.01628, 40.354513 ], [ 72.014945, 40.352416 ], [ 72.011688, 40.350755 ], [ 72.008616, 40.348491 ], [ 72.00349, 40.346053 ], [ 72.00262, 40.34421 ], [ 72.000615, 40.342944 ], [ 72.000685, 40.341369 ], [ 71.999366, 40.340019 ], [ 71.998179, 40.33885 ], [ 71.99716, 40.337623 ], [ 71.994389, 40.336793 ], [ 71.99178, 40.33603 ], [ 71.989914, 40.335286 ], [ 71.988644, 40.334115 ], [ 71.984864, 40.333095 ], [ 71.979725, 40.330189 ], [ 71.972806, 40.326606 ], [ 71.968462, 40.32435 ], [ 71.962757, 40.319412 ], [ 71.962808, 40.318279 ], [ 71.963052, 40.318161 ], [ 71.956672, 40.31568 ], [ 71.951091, 40.30152 ], [ 71.958222, 40.286534 ], [ 71.977033, 40.276096 ], [ 71.992719, 40.270493 ], [ 71.991486, 40.26979 ], [ 71.989046, 40.266861 ], [ 71.986715, 40.264114 ], [ 71.984843, 40.261557 ], [ 71.983152, 40.26017 ], [ 71.981776, 40.259597 ], [ 71.980272, 40.259289 ], [ 71.978682, 40.258262 ], [ 71.978578, 40.256137 ], [ 71.978331, 40.253802 ], [ 71.977165, 40.253772 ], [ 71.973653, 40.253948 ], [ 71.969884, 40.254656 ], [ 71.964796, 40.256134 ], [ 71.958649, 40.257764 ], [ 71.953822, 40.258622 ], [ 71.94965, 40.257885 ], [ 71.942823, 40.256451 ], [ 71.939022, 40.255275 ], [ 71.945676, 40.252765 ], [ 71.953049, 40.249825 ], [ 71.956982, 40.248521 ], [ 71.959806, 40.247585 ], [ 71.965541, 40.244691 ], [ 71.96555, 40.244483 ], [ 71.965572, 40.244 ], [ 71.96339, 40.243746 ], [ 71.951814, 40.240904 ], [ 71.932541, 40.24214 ], [ 71.932287, 40.242273 ], [ 71.929965, 40.24454 ], [ 71.927889, 40.246544 ], [ 71.926256, 40.249098 ], [ 71.926183, 40.250708 ], [ 71.92576, 40.252309 ], [ 71.924669, 40.253175 ], [ 71.923804, 40.254227 ], [ 71.924077, 40.255936 ], [ 71.922266, 40.257231 ], [ 71.921096, 40.257289 ], [ 71.920199, 40.256459 ], [ 71.918719, 40.255614 ], [ 71.91754, 40.255851 ], [ 71.916695, 40.256456 ], [ 71.91398, 40.257099 ], [ 71.909876, 40.257438 ], [ 71.906344, 40.25806 ], [ 71.90082, 40.258807 ], [ 71.898804, 40.259469 ], [ 71.896618, 40.259769 ], [ 71.894119, 40.260777 ], [ 71.891685, 40.260353 ], [ 71.889581, 40.260386 ], [ 71.887803, 40.260965 ], [ 71.885783, 40.261716 ], [ 71.881525, 40.262855 ], [ 71.877567, 40.262569 ], [ 71.874317, 40.262123 ], [ 71.872379, 40.261086 ], [ 71.869903, 40.259049 ], [ 71.86824, 40.258249 ], [ 71.867732, 40.258005 ], [ 71.86647, 40.257523 ], [ 71.864228, 40.257999 ], [ 71.863045, 40.258326 ], [ 71.860021, 40.258064 ], [ 71.857583, 40.257729 ], [ 71.855529, 40.256689 ], [ 71.852542, 40.255622 ], [ 71.848855, 40.254537 ], [ 71.846659, 40.254029 ], [ 71.841702, 40.25264 ], [ 71.84059, 40.251445 ], [ 71.840687, 40.249357 ], [ 71.836473, 40.249172 ], [ 71.805467, 40.225298 ], [ 71.78676, 40.193517 ], [ 71.77926, 40.184124 ], [ 71.775869, 40.182988 ], [ 71.774522, 40.181876 ], [ 71.772384, 40.180204 ], [ 71.769656, 40.178695 ], [ 71.765034, 40.17776 ], [ 71.761627, 40.177038 ], [ 71.757113, 40.176284 ], [ 71.75448, 40.175225 ], [ 71.752496, 40.175259 ], [ 71.748873, 40.175382 ], [ 71.745464, 40.173495 ], [ 71.742318, 40.170988 ], [ 71.739568, 40.167508 ], [ 71.737026, 40.16457 ], [ 71.733993, 40.162156 ], [ 71.733336, 40.158824 ], [ 71.732654, 40.156029 ], [ 71.732763, 40.155855 ], [ 71.724919, 40.152303 ], [ 71.724611, 40.153528 ], [ 71.724499, 40.155853 ], [ 71.723374, 40.159851 ], [ 71.723046, 40.161811 ], [ 71.722887, 40.16512 ], [ 71.723819, 40.167565 ], [ 71.722321, 40.170093 ], [ 71.720379, 40.174067 ], [ 71.719284, 40.175021 ], [ 71.718589, 40.174912 ], [ 71.717312, 40.174786 ], [ 71.715271, 40.175982 ], [ 71.712177, 40.177237 ], [ 71.71024, 40.178705 ], [ 71.708647, 40.180271 ], [ 71.705472, 40.180808 ], [ 71.70277, 40.181179 ], [ 71.700047, 40.181996 ], [ 71.697346, 40.182367 ], [ 71.693687, 40.183247 ], [ 71.690564, 40.185093 ], [ 71.688539, 40.185931 ], [ 71.684396, 40.187155 ], [ 71.680227, 40.188916 ], [ 71.679726, 40.189618 ], [ 71.681818, 40.189768 ], [ 71.683518, 40.190801 ], [ 71.684721, 40.192448 ], [ 71.684548, 40.193607 ], [ 71.681803, 40.194872 ], [ 71.679523, 40.196149 ], [ 71.676934, 40.196612 ], [ 71.6726, 40.196935 ], [ 71.669423, 40.197471 ], [ 71.667136, 40.198317 ], [ 71.667181, 40.204162 ], [ 71.666771, 40.205345 ], [ 71.667527, 40.205207 ], [ 71.672454, 40.202304 ], [ 71.673582, 40.200725 ], [ 71.673605, 40.19786 ], [ 71.674326, 40.197433 ], [ 71.681927, 40.197114 ], [ 71.684189, 40.196194 ], [ 71.687223, 40.196191 ], [ 71.689955, 40.195195 ], [ 71.692066, 40.194986 ], [ 71.694612, 40.195417 ], [ 71.696204, 40.196269 ], [ 71.696169, 40.196984 ], [ 71.695526, 40.19822 ], [ 71.694299, 40.201856 ], [ 71.693573, 40.204791 ], [ 71.694453, 40.20589 ], [ 71.696313, 40.206033 ], [ 71.699253, 40.20558 ], [ 71.703673, 40.203467 ], [ 71.70723, 40.202315 ], [ 71.708387, 40.202527 ], [ 71.708339, 40.20351 ], [ 71.708054, 40.204577 ], [ 71.70691, 40.206514 ], [ 71.704086, 40.209389 ], [ 71.701245, 40.212621 ], [ 71.699329, 40.216024 ], [ 71.697368, 40.220356 ], [ 71.696663, 40.222843 ], [ 71.695376, 40.225314 ], [ 71.695297, 40.226923 ], [ 71.696601, 40.228931 ], [ 71.699058, 40.233613 ], [ 71.700366, 40.235531 ], [ 71.700305, 40.236783 ], [ 71.697465, 40.244762 ], [ 71.695314, 40.251292 ], [ 71.692709, 40.252023 ], [ 71.687239, 40.254016 ], [ 71.683761, 40.255886 ], [ 71.681772, 40.258336 ], [ 71.681227, 40.259933 ], [ 71.680605, 40.260721 ], [ 71.680749, 40.264934 ], [ 71.681294, 40.270501 ], [ 71.680192, 40.271544 ], [ 71.677625, 40.27147 ], [ 71.674709, 40.271387 ], [ 71.671559, 40.271296 ], [ 71.6671, 40.271705 ], [ 71.660684, 40.27152 ], [ 71.656713, 40.271494 ], [ 71.653093, 40.271479 ], [ 71.650324, 40.270772 ], [ 71.647954, 40.269091 ], [ 71.644465, 40.267593 ], [ 71.640216, 40.266127 ], [ 71.637667, 40.265694 ], [ 71.63127, 40.26515 ], [ 71.626604, 40.265014 ], [ 71.622746, 40.26508 ], [ 71.620414, 40.265012 ], [ 71.622041, 40.262821 ], [ 71.622108, 40.26148 ], [ 71.621964, 40.259684 ], [ 71.622013, 40.258701 ], [ 71.624757, 40.257527 ], [ 71.625399, 40.256879 ], [ 71.61013, 40.246382 ], [ 71.604032, 40.227261 ], [ 71.601919, 40.21187 ], [ 71.596595, 40.213584 ], [ 71.596191, 40.214647 ], [ 71.593738, 40.217951 ], [ 71.591465, 40.219048 ], [ 71.589138, 40.21889 ], [ 71.586323, 40.219165 ], [ 71.584418, 40.219915 ], [ 71.582342, 40.219405 ], [ 71.581221, 40.218477 ], [ 71.581065, 40.21695 ], [ 71.580384, 40.216572 ], [ 71.577918, 40.216857 ], [ 71.573709, 40.217001 ], [ 71.570553, 40.217086 ], [ 71.570145, 40.21591 ], [ 71.569455, 40.21571 ], [ 71.567012, 40.215548 ], [ 71.564668, 40.215747 ], [ 71.561503, 40.216012 ], [ 71.555226, 40.217795 ], [ 71.543125, 40.221642 ], [ 71.536521, 40.223862 ], [ 71.533557, 40.224758 ], [ 71.53131, 40.225318 ], [ 71.528401, 40.225141 ], [ 71.524205, 40.225015 ], [ 71.517842, 40.226167 ], [ 71.514589, 40.228128 ], [ 71.511556, 40.230365 ], [ 71.51007, 40.232021 ], [ 71.510052, 40.232379 ], [ 71.513181, 40.232832 ], [ 71.514823, 40.234941 ], [ 71.516681, 40.237415 ], [ 71.516466, 40.239343 ], [ 71.51449, 40.241432 ], [ 71.513605, 40.242749 ], [ 71.515006, 40.24503 ], [ 71.515628, 40.246571 ], [ 71.513723, 40.249558 ], [ 71.511127, 40.252345 ], [ 71.510893, 40.254617 ], [ 71.509838, 40.259238 ], [ 71.511245, 40.263665 ], [ 71.511505, 40.267699 ], [ 71.510844, 40.269201 ], [ 71.508778, 40.270749 ], [ 71.506816, 40.272568 ], [ 71.50517, 40.275024 ], [ 71.50261, 40.277094 ], [ 71.499639, 40.278078 ], [ 71.497507, 40.275671 ], [ 71.494435, 40.27455 ], [ 71.491007, 40.27456 ], [ 71.48505, 40.274493 ], [ 71.481729, 40.275306 ], [ 71.478444, 40.275435 ], [ 71.475581, 40.276033 ], [ 71.471617, 40.27774 ], [ 71.466225, 40.27826 ], [ 71.459392, 40.277823 ], [ 71.456524, 40.278534 ], [ 71.450631, 40.280067 ], [ 71.443113, 40.281321 ], [ 71.436792, 40.282497 ], [ 71.428287, 40.285513 ], [ 71.421552, 40.288846 ], [ 71.41452, 40.292169 ], [ 71.408535, 40.29541 ], [ 71.403715, 40.299144 ], [ 71.401088, 40.30089 ], [ 71.398901, 40.303883 ], [ 71.394831, 40.307526 ], [ 71.391471, 40.30902 ], [ 71.388941, 40.308941 ], [ 71.385536, 40.308492 ], [ 71.382887, 40.307838 ], [ 71.38035, 40.307873 ], [ 71.37614, 40.30854 ], [ 71.373063, 40.30753 ], [ 71.368795, 40.306482 ], [ 71.365372, 40.306374 ], [ 71.360299, 40.306443 ], [ 71.361025, 40.306809 ], [ 71.364679, 40.30818 ], [ 71.370951, 40.310776 ], [ 71.374495, 40.3142 ], [ 71.375427, 40.316286 ], [ 71.370441, 40.3175 ], [ 71.362009, 40.317349 ], [ 71.360514, 40.317416 ], [ 71.357345, 40.318116 ], [ 71.353574, 40.318911 ], [ 71.350293, 40.318921 ], [ 71.348872, 40.31762 ], [ 71.347674, 40.314955 ], [ 71.346367, 40.313485 ], [ 71.342211, 40.313125 ], [ 71.338649, 40.313641 ], [ 71.336758, 40.315523 ], [ 71.336504, 40.317457 ], [ 71.334073, 40.318293 ], [ 71.330792, 40.318303 ], [ 71.326574, 40.319083 ], [ 71.324534, 40.318219 ], [ 71.323008, 40.316114 ], [ 71.321972, 40.313225 ], [ 71.320055, 40.31008 ], [ 71.317804, 40.30761 ], [ 71.314982, 40.307405 ], [ 71.311819, 40.30799 ], [ 71.307987, 40.309923 ], [ 71.302094, 40.314076 ], [ 71.298043, 40.317259 ], [ 71.296275, 40.319601 ], [ 71.294773, 40.322522 ], [ 71.294226, 40.324332 ], [ 71.295472, 40.326086 ], [ 71.296073, 40.328732 ], [ 71.295545, 40.3302 ], [ 71.29382, 40.331744 ], [ 71.294366, 40.332676 ], [ 71.294421, 40.334391 ], [ 71.294163, 40.33495 ], [ 71.293042, 40.33629 ], [ 71.288838, 40.339249 ], [ 71.283613, 40.341718 ], [ 71.280749, 40.342084 ], [ 71.27689, 40.341501 ], [ 71.275073, 40.33915 ], [ 71.27246, 40.33769 ], [ 71.269534, 40.33645 ], [ 71.264504, 40.334341 ], [ 71.264088, 40.333756 ], [ 71.261589, 40.333104 ], [ 71.258469, 40.332889 ], [ 71.256299, 40.331676 ], [ 71.25519, 40.330156 ], [ 71.25498, 40.32855 ], [ 71.253852, 40.327371 ], [ 71.252079, 40.327085 ], [ 71.248097, 40.32627 ], [ 71.244258, 40.325574 ], [ 71.242725, 40.326324 ], [ 71.243432, 40.327032 ], [ 71.244844, 40.328449 ], [ 71.246159, 40.328949 ], [ 71.248075, 40.329354 ], [ 71.250103, 40.330447 ], [ 71.250318, 40.331939 ], [ 71.252264, 40.334515 ], [ 71.252982, 40.335341 ], [ 71.252932, 40.336256 ], [ 71.252283, 40.337152 ], [ 71.250414, 40.338467 ], [ 71.248291, 40.338971 ], [ 71.241927, 40.341171 ], [ 71.237375, 40.342284 ], [ 71.230587, 40.343209 ], [ 71.226502, 40.343992 ], [ 71.219091, 40.345355 ], [ 71.211407, 40.346249 ], [ 71.206263, 40.347226 ], [ 71.202508, 40.347447 ], [ 71.196265, 40.346668 ], [ 71.187838, 40.344786 ], [ 71.181011, 40.343758 ], [ 71.173191, 40.340153 ], [ 71.16893, 40.338752 ], [ 71.165552, 40.337609 ], [ 71.162961, 40.335805 ], [ 71.160168, 40.334911 ], [ 71.156453, 40.334444 ], [ 71.151646, 40.334742 ], [ 71.147425, 40.335288 ], [ 71.142196, 40.335114 ], [ 71.139787, 40.335377 ], [ 71.134642, 40.33635 ], [ 71.129777, 40.337676 ], [ 71.127686, 40.337606 ], [ 71.125108, 40.335572 ], [ 71.123912, 40.334279 ], [ 71.11955, 40.330886 ], [ 71.114223, 40.326493 ], [ 71.110206, 40.323731 ], [ 71.105796, 40.320041 ], [ 71.101633, 40.317294 ], [ 71.09713, 40.313655 ], [ 71.088477, 40.308431 ], [ 71.083641, 40.305141 ], [ 71.078868, 40.30077 ], [ 71.074234, 40.296699 ], [ 71.070236, 40.295239 ], [ 71.066448, 40.294069 ], [ 71.059218, 40.292795 ], [ 71.05581, 40.29245 ], [ 71.052385, 40.291622 ], [ 71.049286, 40.290914 ], [ 71.045138, 40.289328 ], [ 71.042766, 40.289608 ], [ 71.040499, 40.288086 ], [ 71.037791, 40.286068 ], [ 71.036729, 40.285429 ], [ 71.032954, 40.285541 ], [ 71.026039, 40.288312 ], [ 71.016456, 40.291833 ], [ 71.012026, 40.292402 ], [ 71.007836, 40.291535 ], [ 71.002757, 40.289795 ], [ 70.999571, 40.288626 ], [ 70.99412, 40.286298 ], [ 70.9904, 40.285288 ], [ 70.984033, 40.284563 ], [ 70.977078, 40.285454 ], [ 70.970816, 40.285739 ], [ 70.965381, 40.285927 ], [ 70.961773, 40.285801 ], [ 70.9602, 40.284613 ], [ 70.959687, 40.282204 ], [ 70.961059, 40.278476 ], [ 70.961836, 40.27372 ], [ 70.964729, 40.266522 ], [ 70.96698, 40.264586 ], [ 70.971281, 40.261338 ], [ 70.975935, 40.257659 ], [ 70.978012, 40.253236 ], [ 70.958955, 40.238372 ], [ 70.938336, 40.239922 ], [ 70.849711, 40.233773 ], [ 70.707188, 40.200183 ], [ 70.664296, 40.197496 ], [ 70.622128, 40.199563 ], [ 70.581821, 40.221732 ], [ 70.56394, 40.26421 ], [ 70.550608, 40.310461 ], [ 70.524046, 40.34374 ], [ 70.501929, 40.35082 ], [ 70.482912, 40.34927 ], [ 70.464102, 40.344825 ], [ 70.442191, 40.343327 ], [ 70.42121, 40.347978 ], [ 70.371394, 40.364927 ], [ 70.384933, 40.399706 ], [ 70.382143, 40.403943 ], [ 70.373564, 40.411798 ], [ 70.371394, 40.413348 ], [ 70.371963, 40.412987 ], [ 70.358785, 40.427714 ], [ 70.357028, 40.430402 ], [ 70.355426, 40.435104 ], [ 70.353824, 40.456136 ], [ 70.369637, 40.475515 ], [ 70.399351, 40.490191 ], [ 70.468184, 40.50249 ], [ 70.477796, 40.505487 ], [ 70.487873, 40.515564 ], [ 70.511954, 40.546777 ], [ 70.525493, 40.557112 ], [ 70.539446, 40.561866 ], [ 70.554225, 40.565019 ], [ 70.569315, 40.570445 ], [ 70.582079, 40.578765 ], [ 70.617167, 40.611941 ], [ 70.677939, 40.649923 ], [ 70.692925, 40.660413 ], [ 70.707239, 40.668992 ], [ 70.715662, 40.672144 ], [ 70.732096, 40.674986 ], [ 70.735506, 40.678862 ], [ 70.73716, 40.683564 ], [ 70.740674, 40.687698 ], [ 70.756177, 40.69514 ], [ 70.756293, 40.695578 ] ], [ [ 71.005679, 40.156546 ], [ 71.008564, 40.157757 ], [ 71.031199, 40.146905 ], [ 71.047942, 40.122513 ], [ 71.06174, 40.095176 ], [ 71.078844, 40.07864 ], [ 71.103911, 40.065988 ], [ 71.104202, 40.065515 ], [ 71.103501, 40.062179 ], [ 71.102613, 40.059522 ], [ 71.102388, 40.058258 ], [ 71.104872, 40.053246 ], [ 71.107787, 40.049004 ], [ 71.112372, 40.044132 ], [ 71.114938, 40.040791 ], [ 71.115364, 40.038521 ], [ 71.117653, 40.032201 ], [ 71.117731, 40.028206 ], [ 71.117165, 40.025103 ], [ 71.116037, 40.021443 ], [ 71.116141, 40.019619 ], [ 71.117578, 40.01784 ], [ 71.119124, 40.016749 ], [ 71.119221, 40.015039 ], [ 71.12049, 40.013597 ], [ 71.123776, 40.01325 ], [ 71.13014, 40.013577 ], [ 71.133613, 40.015178 ], [ 71.137278, 40.018613 ], [ 71.139959, 40.023729 ], [ 71.142813, 40.025766 ], [ 71.147884, 40.026163 ], [ 71.153244, 40.025885 ], [ 71.156485, 40.026335 ], [ 71.16088, 40.027395 ], [ 71.164881, 40.027528 ], [ 71.169186, 40.027556 ], [ 71.175577, 40.027425 ], [ 71.179399, 40.028122 ], [ 71.182428, 40.029707 ], [ 71.185375, 40.032774 ], [ 71.187374, 40.034211 ], [ 71.19164, 40.034923 ], [ 71.198086, 40.036505 ], [ 71.202, 40.038233 ], [ 71.207673, 40.040361 ], [ 71.207497, 40.038185 ], [ 71.20663, 40.035072 ], [ 71.200918, 40.025632 ], [ 71.197369, 40.020033 ], [ 71.196329, 40.017371 ], [ 71.19377, 40.015345 ], [ 71.188988, 40.013246 ], [ 71.185559, 40.010848 ], [ 71.184912, 40.009147 ], [ 71.1835, 40.007844 ], [ 71.181927, 40.006764 ], [ 71.178177, 40.004813 ], [ 71.175284, 40.003461 ], [ 71.172359, 40.002679 ], [ 71.169867, 40.002139 ], [ 71.165873, 40.001893 ], [ 71.159342, 40.001905 ], [ 71.155922, 40.00202 ], [ 71.14894, 40.00213 ], [ 71.146859, 40.002175 ], [ 71.145107, 40.00166 ], [ 71.145133, 40.001204 ], [ 71.14492, 40.000256 ], [ 71.145596, 39.999174 ], [ 71.150635, 39.997131 ], [ 71.15505, 39.995225 ], [ 71.160854, 39.994154 ], [ 71.164022, 39.992523 ], [ 71.167296, 39.989 ], [ 71.168069, 39.986183 ], [ 71.165708, 39.980736 ], [ 71.164637, 39.974227 ], [ 71.163701, 39.972617 ], [ 71.159892, 39.97107 ], [ 71.15658, 39.96796 ], [ 71.153741, 39.967392 ], [ 71.15097, 39.966507 ], [ 71.146301, 39.964776 ], [ 71.141282, 39.962872 ], [ 71.137661, 39.961646 ], [ 71.136735, 39.959878 ], [ 71.138078, 39.95787 ], [ 71.142029, 39.956896 ], [ 71.14694, 39.95706 ], [ 71.159067, 39.956516 ], [ 71.16501, 39.956555 ], [ 71.170366, 39.956101 ], [ 71.181043, 39.955822 ], [ 71.191951, 39.955076 ], [ 71.192793, 39.955112 ], [ 71.205268, 39.94479 ], [ 71.205415, 39.944055 ], [ 71.206765, 39.941888 ], [ 71.211942, 39.939267 ], [ 71.221058, 39.931724 ], [ 71.220717, 39.926383 ], [ 71.218496, 39.926166 ], [ 71.216494, 39.925312 ], [ 71.216572, 39.923893 ], [ 71.216615, 39.923105 ], [ 71.215201, 39.922743 ], [ 71.212916, 39.9233 ], [ 71.211689, 39.92326 ], [ 71.213625, 39.921586 ], [ 71.216876, 39.918377 ], [ 71.219478, 39.915777 ], [ 71.219009, 39.914248 ], [ 71.215397, 39.912867 ], [ 71.211298, 39.912891 ], [ 71.205519, 39.913649 ], [ 71.201837, 39.913528 ], [ 71.199239, 39.912337 ], [ 71.195441, 39.910634 ], [ 71.195528, 39.909057 ], [ 71.198078, 39.907404 ], [ 71.200032, 39.905416 ], [ 71.200137, 39.903524 ], [ 71.196826, 39.900416 ], [ 71.194068, 39.89843 ], [ 71.18971, 39.89576 ], [ 71.185095, 39.89403 ], [ 71.180401, 39.893717 ], [ 71.175894, 39.893726 ], [ 71.173449, 39.893488 ], [ 71.171332, 39.891049 ], [ 71.167045, 39.887118 ], [ 71.16564, 39.886597 ], [ 71.163321, 39.887784 ], [ 71.161536, 39.890409 ], [ 71.1587, 39.889841 ], [ 71.154913, 39.887978 ], [ 71.153473, 39.888089 ], [ 71.1487, 39.889193 ], [ 71.145625, 39.889249 ], [ 71.142549, 39.889304 ], [ 71.136674, 39.888161 ], [ 71.132203, 39.887538 ], [ 71.130737, 39.888121 ], [ 71.12943, 39.889498 ], [ 71.129137, 39.894699 ], [ 71.128924, 39.898481 ], [ 71.131537, 39.901537 ], [ 71.135307, 39.907348 ], [ 71.133049, 39.911062 ], [ 71.126523, 39.917791 ], [ 71.121517, 39.922992 ], [ 71.116466, 39.921717 ], [ 71.113638, 39.920991 ], [ 71.107584, 39.915735 ], [ 71.107069, 39.913981 ], [ 71.107665, 39.910685 ], [ 71.106768, 39.908444 ], [ 71.104572, 39.907423 ], [ 71.102669, 39.908464 ], [ 71.101504, 39.910951 ], [ 71.100365, 39.912966 ], [ 71.099156, 39.912609 ], [ 71.098526, 39.909272 ], [ 71.098572, 39.904853 ], [ 71.097879, 39.902619 ], [ 71.096129, 39.900981 ], [ 71.096209, 39.899562 ], [ 71.096308, 39.897829 ], [ 71.096815, 39.896109 ], [ 71.098327, 39.894739 ], [ 71.09943, 39.893355 ], [ 71.099528, 39.891622 ], [ 71.098418, 39.889532 ], [ 71.097691, 39.886837 ], [ 71.096269, 39.886631 ], [ 71.094615, 39.887982 ], [ 71.093377, 39.89173 ], [ 71.092461, 39.893436 ], [ 71.09134, 39.895135 ], [ 71.090583, 39.897636 ], [ 71.088004, 39.899759 ], [ 71.082466, 39.899888 ], [ 71.081995, 39.899811 ], [ 71.073942, 39.898494 ], [ 71.06924, 39.898334 ], [ 71.065355, 39.898202 ], [ 71.057096, 39.899342 ], [ 71.052393, 39.898051 ], [ 71.051763, 39.89906 ], [ 71.051721, 39.899127 ], [ 71.053431, 39.902533 ], [ 71.058493, 39.907126 ], [ 71.058844, 39.911717 ], [ 71.059713, 39.914431 ], [ 71.062476, 39.916262 ], [ 71.066154, 39.918598 ], [ 71.072003, 39.920217 ], [ 71.075826, 39.921452 ], [ 71.076945, 39.923385 ], [ 71.076365, 39.926365 ], [ 71.076771, 39.930011 ], [ 71.078256, 39.936299 ], [ 71.081455, 39.941302 ], [ 71.086664, 39.947005 ], [ 71.089135, 39.950404 ], [ 71.091651, 39.953015 ], [ 71.095253, 39.954558 ], [ 71.099123, 39.955004 ], [ 71.102806, 39.955128 ], [ 71.10825, 39.956732 ], [ 71.114656, 39.959474 ], [ 71.118944, 39.959776 ], [ 71.121284, 39.961907 ], [ 71.120086, 39.964962 ], [ 71.118866, 39.968395 ], [ 71.115235, 39.970958 ], [ 71.11042, 39.97269 ], [ 71.10775, 39.972759 ], [ 71.104458, 39.972964 ], [ 71.101066, 39.974902 ], [ 71.100167, 39.976293 ], [ 71.100255, 39.978348 ], [ 71.100485, 39.981514 ], [ 71.097875, 39.98411 ], [ 71.094893, 39.986062 ], [ 71.093761, 39.987919 ], [ 71.089878, 39.991261 ], [ 71.090972, 39.993667 ], [ 71.093881, 39.996607 ], [ 71.09769, 39.998157 ], [ 71.100208, 40.000768 ], [ 71.104722, 40.000762 ], [ 71.105631, 39.999214 ], [ 71.104519, 39.997124 ], [ 71.107261, 39.995795 ], [ 71.111446, 39.994357 ], [ 71.114063, 39.995234 ], [ 71.115193, 39.997009 ], [ 71.116133, 40.000925 ], [ 71.11581, 40.003998 ], [ 71.114842, 40.010591 ], [ 71.113185, 40.016246 ], [ 71.111097, 40.019032 ], [ 71.105201, 40.02089 ], [ 71.097296, 40.021537 ], [ 71.094577, 40.022359 ], [ 71.089378, 40.022412 ], [ 71.085525, 40.022282 ], [ 71.080448, 40.022795 ], [ 71.073928, 40.022574 ], [ 71.067383, 40.022809 ], [ 71.063434, 40.022789 ], [ 71.056464, 40.022665 ], [ 71.05084, 40.022359 ], [ 71.04517, 40.022851 ], [ 71.04194, 40.024797 ], [ 71.034316, 40.030818 ], [ 71.02876, 40.034442 ], [ 71.023921, 40.038502 ], [ 71.018926, 40.042671 ], [ 71.014254, 40.046394 ], [ 71.011565, 40.049711 ], [ 71.011103, 40.052919 ], [ 71.010533, 40.057214 ], [ 71.010953, 40.060199 ], [ 71.010485, 40.065665 ], [ 71.009853, 40.068842 ], [ 71.008649, 40.071656 ], [ 71.007754, 40.074252 ], [ 71.00735, 40.075568 ], [ 71.006692, 40.0792 ], [ 71.007039, 40.083439 ], [ 71.007986, 40.090096 ], [ 71.007893, 40.091692 ], [ 71.009224, 40.096878 ], [ 71.010979, 40.102456 ], [ 71.012775, 40.107315 ], [ 71.013837, 40.112035 ], [ 71.016296, 40.118288 ], [ 71.016521, 40.122065 ], [ 71.016928, 40.125277 ], [ 71.01567, 40.129003 ], [ 71.01305, 40.135652 ], [ 71.011387, 40.141191 ], [ 71.007175, 40.15216 ], [ 71.005679, 40.156546 ] ] ] } },
     7: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZTO", "name": "Tashkent" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 70.458006, 41.015737 ], [ 70.445705, 41.025921 ], [ 70.40116, 41.039977 ], [ 70.363539, 41.032432 ], [ 70.335892, 40.92696 ], [ 70.280392, 40.877713 ], [ 70.207993, 40.844588 ], [ 70.104227, 40.813324 ], [ 70.009659, 40.75803 ], [ 69.825329, 40.714002 ], [ 69.803315, 40.70563 ], [ 69.783523, 40.692969 ], [ 69.741562, 40.652455 ], [ 69.717687, 40.63628 ], [ 69.690919, 40.630028 ], [ 69.66012, 40.638709 ], [ 69.647511, 40.647443 ], [ 69.637175, 40.657933 ], [ 69.618882, 40.681652 ], [ 69.607823, 40.691781 ], [ 69.582605, 40.70439 ], [ 69.570823, 40.712451 ], [ 69.531859, 40.758599 ], [ 69.509224, 40.77467 ], [ 69.477288, 40.777047 ], [ 69.461682, 40.784333 ], [ 69.449176, 40.794462 ], [ 69.435844, 40.802679 ], [ 69.417757, 40.804229 ], [ 69.385253, 40.796116 ], [ 69.369285, 40.789398 ], [ 69.355074, 40.780354 ], [ 69.329597, 40.755343 ], [ 69.314198, 40.729298 ], [ 69.30717, 40.699326 ], [ 69.306601, 40.662532 ], [ 69.313474, 40.609357 ], [ 69.30934, 40.595818 ], [ 69.294974, 40.589152 ], [ 69.234254, 40.585276 ], [ 69.198442, 40.566517 ], [ 69.198029, 40.545847 ], [ 69.238233, 40.493964 ], [ 69.238337, 40.493964 ], [ 69.259731, 40.437636 ], [ 69.269446, 40.419808 ], [ 69.295491, 40.383944 ], [ 69.306343, 40.364979 ], [ 69.312699, 40.34281 ], [ 69.305309, 40.293821 ], [ 69.273115, 40.289583 ], [ 69.234616, 40.300849 ], [ 69.208364, 40.298317 ], [ 69.212498, 40.268758 ], [ 69.285259, 40.218631 ], [ 69.285259, 40.194964 ], [ 69.24769, 40.181735 ], [ 69.197926, 40.182975 ], [ 69.108009, 40.203645 ], [ 69.07364, 40.216941 ], [ 69.073748, 40.21721 ], [ 69.079019, 40.23031 ], [ 69.093282, 40.270049 ], [ 69.091421, 40.284673 ], [ 69.08491, 40.293019 ], [ 69.070647, 40.32064 ], [ 69.091576, 40.412314 ], [ 69.09416, 40.419135 ], [ 69.100103, 40.429264 ], [ 69.105632, 40.436705 ], [ 69.119843, 40.450916 ], [ 69.124029, 40.459546 ], [ 69.122376, 40.468512 ], [ 69.118758, 40.477271 ], [ 69.116743, 40.485359 ], [ 69.110438, 40.491741 ], [ 69.099948, 40.499363 ], [ 69.097881, 40.50745 ], [ 69.116743, 40.51546 ], [ 69.107648, 40.520628 ], [ 69.097726, 40.523263 ], [ 69.086977, 40.523832 ], [ 69.075763, 40.522901 ], [ 69.087081, 40.558791 ], [ 69.096641, 40.572614 ], [ 69.121859, 40.581296 ], [ 69.121445, 40.588376 ], [ 69.115193, 40.595455 ], [ 69.106149, 40.598633 ], [ 69.096537, 40.594422 ], [ 69.085995, 40.586257 ], [ 69.076073, 40.580702 ], [ 69.068322, 40.584345 ], [ 69.068684, 40.59176 ], [ 69.085065, 40.603749 ], [ 69.088786, 40.612302 ], [ 69.083877, 40.621707 ], [ 69.065583, 40.633334 ], [ 69.053801, 40.658294 ], [ 69.035352, 40.659456 ], [ 68.993184, 40.653255 ], [ 69.009204, 40.67359 ], [ 69.012925, 40.683719 ], [ 69.003468, 40.688008 ], [ 68.988223, 40.684132 ], [ 68.974271, 40.677001 ], [ 68.960215, 40.673538 ], [ 68.944764, 40.680566 ], [ 68.957993, 40.693692 ], [ 68.955719, 40.70718 ], [ 68.94466, 40.719427 ], [ 68.931121, 40.728987 ], [ 68.923938, 40.730848 ], [ 68.916858, 40.729969 ], [ 68.909882, 40.730227 ], [ 68.903216, 40.735188 ], [ 68.902286, 40.739581 ], [ 68.904146, 40.75126 ], [ 68.903216, 40.755652 ], [ 68.89288, 40.771827 ], [ 68.887506, 40.777046 ], [ 68.876499, 40.783609 ], [ 68.849834, 40.793919 ], [ 68.843013, 40.797872 ], [ 68.835623, 40.80552 ], [ 68.823996, 40.822547 ], [ 68.815056, 40.831384 ], [ 68.800018, 40.83973 ], [ 68.778262, 40.847094 ], [ 68.756248, 40.850065 ], [ 68.73997, 40.845052 ], [ 68.736714, 40.862338 ], [ 68.733769, 40.86903 ], [ 68.729428, 40.868927 ], [ 68.720591, 40.863914 ], [ 68.715269, 40.866498 ], [ 68.712736, 40.873836 ], [ 68.711393, 40.89753 ], [ 68.708137, 40.907633 ], [ 68.700179, 40.91634 ], [ 68.659073, 40.945027 ], [ 68.66295, 40.947467 ], [ 68.661101, 40.95267 ], [ 68.661737, 40.953251 ], [ 68.663113, 40.954468 ], [ 68.664186, 40.955523 ], [ 68.665525, 40.957005 ], [ 68.681399, 40.962287 ], [ 68.684361, 40.961369 ], [ 68.684268, 40.961644 ], [ 68.684035, 40.961995 ], [ 68.684029, 40.962249 ], [ 68.684025, 40.962374 ], [ 68.683765, 40.962599 ], [ 68.683759, 40.96282 ], [ 68.68375, 40.96307 ], [ 68.689378, 40.964942 ], [ 68.689667, 40.965212 ], [ 68.689786, 40.965231 ], [ 68.691141, 40.965665 ], [ 68.692127, 40.966147 ], [ 68.694131, 40.966842 ], [ 68.694407, 40.966874 ], [ 68.695698, 40.966606 ], [ 68.696373, 40.966384 ], [ 68.696555, 40.966422 ], [ 68.697372, 40.967507 ], [ 68.697547, 40.967555 ], [ 68.699043, 40.96725 ], [ 68.700008, 40.966945 ], [ 68.701188, 40.966274 ], [ 68.701848, 40.966031 ], [ 68.702082, 40.966014 ], [ 68.70435, 40.967176 ], [ 68.704516, 40.967218 ], [ 68.708203, 40.966035 ], [ 68.708723, 40.965868 ], [ 68.711055, 40.964776 ], [ 68.711253, 40.964773 ], [ 68.713114, 40.965787 ], [ 68.71545, 40.967038 ], [ 68.717571, 40.967995 ], [ 68.719847, 40.968959 ], [ 68.72008, 40.968945 ], [ 68.720889, 40.968783 ], [ 68.723145, 40.969299 ], [ 68.724553, 40.969598 ], [ 68.726507, 40.969939 ], [ 68.726578, 40.969507 ], [ 68.727144, 40.969552 ], [ 68.727253, 40.96956 ], [ 68.72861, 40.969667 ], [ 68.728866, 40.969924 ], [ 68.729399, 40.970302 ], [ 68.730155, 40.970575 ], [ 68.730454, 40.970772 ], [ 68.73065, 40.971042 ], [ 68.731006, 40.971526 ], [ 68.73129, 40.971742 ], [ 68.731638, 40.971895 ], [ 68.732252, 40.971997 ], [ 68.732522, 40.972162 ], [ 68.732712, 40.972388 ], [ 68.732982, 40.97293 ], [ 68.73296, 40.97336 ], [ 68.732971, 40.973555 ], [ 68.733109, 40.973688 ], [ 68.733833, 40.973999 ], [ 68.734748, 40.974549 ], [ 68.735125, 40.974605 ], [ 68.735442, 40.974398 ], [ 68.735847, 40.973882 ], [ 68.736348, 40.973651 ], [ 68.736804, 40.973811 ], [ 68.73705, 40.974221 ], [ 68.73675, 40.974601 ], [ 68.73646, 40.974853 ], [ 68.736299, 40.975282 ], [ 68.736465, 40.975768 ], [ 68.736935, 40.976049 ], [ 68.737528, 40.975872 ], [ 68.738132, 40.975927 ], [ 68.738622, 40.97636 ], [ 68.738605, 40.976906 ], [ 68.738854, 40.977321 ], [ 68.739242, 40.977699 ], [ 68.740263, 40.979288 ], [ 68.740814, 40.979653 ], [ 68.741319, 40.979807 ], [ 68.741509, 40.979783 ], [ 68.741627, 40.979633 ], [ 68.741291, 40.979066 ], [ 68.741346, 40.978724 ], [ 68.741565, 40.978519 ], [ 68.742022, 40.978587 ], [ 68.742335, 40.978807 ], [ 68.742424, 40.979283 ], [ 68.742248, 40.979818 ], [ 68.741936, 40.980152 ], [ 68.741482, 40.980297 ], [ 68.741205, 40.980522 ], [ 68.741187, 40.980967 ], [ 68.741544, 40.981325 ], [ 68.741836, 40.981486 ], [ 68.742295, 40.981338 ], [ 68.742838, 40.980798 ], [ 68.74359, 40.980435 ], [ 68.743927, 40.980023 ], [ 68.744373, 40.979949 ], [ 68.744819, 40.980409 ], [ 68.746002, 40.980984 ], [ 68.746707, 40.981079 ], [ 68.747411, 40.981233 ], [ 68.74833, 40.981399 ], [ 68.74907, 40.981364 ], [ 68.749569, 40.981648 ], [ 68.749577, 40.982115 ], [ 68.749119, 40.982277 ], [ 68.748735, 40.982306 ], [ 68.748633, 40.982673 ], [ 68.748852, 40.983121 ], [ 68.749725, 40.984065 ], [ 68.749508, 40.984368 ], [ 68.748849, 40.984457 ], [ 68.748509, 40.984225 ], [ 68.747817, 40.984349 ], [ 68.747162, 40.984781 ], [ 68.7472, 40.985352 ], [ 68.748197, 40.986081 ], [ 68.748887, 40.987094 ], [ 68.749061, 40.987348 ], [ 68.748636, 40.987611 ], [ 68.747768, 40.987713 ], [ 68.747634, 40.988235 ], [ 68.74868, 40.988782 ], [ 68.748798, 40.989216 ], [ 68.748597, 40.989687 ], [ 68.747751, 40.989967 ], [ 68.747841, 40.990302 ], [ 68.749058, 40.990949 ], [ 68.749717, 40.991055 ], [ 68.7505, 40.990877 ], [ 68.750694, 40.991117 ], [ 68.750665, 40.991313 ], [ 68.750423, 40.991833 ], [ 68.750598, 40.992307 ], [ 68.751274, 40.992748 ], [ 68.750971, 40.993481 ], [ 68.751094, 40.993694 ], [ 68.752545, 40.993951 ], [ 68.753763, 40.993797 ], [ 68.75482, 40.993999 ], [ 68.754804, 40.994461 ], [ 68.754391, 40.99536 ], [ 68.754186, 40.995953 ], [ 68.754243, 40.996262 ], [ 68.754413, 40.996425 ], [ 68.754755, 40.996522 ], [ 68.755698, 40.996598 ], [ 68.75633, 40.996931 ], [ 68.756724, 40.99705 ], [ 68.757104, 40.997051 ], [ 68.757962, 40.996994 ], [ 68.758195, 40.997126 ], [ 68.758146, 40.997357 ], [ 68.758086, 40.997641 ], [ 68.756488, 40.998809 ], [ 68.755981, 40.998885 ], [ 68.75541, 40.998971 ], [ 68.755248, 40.999237 ], [ 68.755415, 40.999494 ], [ 68.755922, 40.999839 ], [ 68.755812, 41.000398 ], [ 68.755284, 41.000674 ], [ 68.754179, 41.001044 ], [ 68.75346, 41.002242 ], [ 68.752699, 41.002669 ], [ 68.752641, 41.00314 ], [ 68.753429, 41.00393 ], [ 68.754065, 41.003975 ], [ 68.754947, 41.003628 ], [ 68.755359, 41.003717 ], [ 68.755701, 41.004819 ], [ 68.75603, 41.004792 ], [ 68.756352, 41.003827 ], [ 68.756476, 41.003517 ], [ 68.756665, 41.003397 ], [ 68.756887, 41.003358 ], [ 68.757525, 41.003593 ], [ 68.758289, 41.00443 ], [ 68.758286, 41.00464 ], [ 68.758439, 41.004859 ], [ 68.759226, 41.005035 ], [ 68.760403, 41.005541 ], [ 68.76115, 41.006127 ], [ 68.760935, 41.006556 ], [ 68.756795, 41.007834 ], [ 68.756597, 41.008092 ], [ 68.756708, 41.008326 ], [ 68.757025, 41.008536 ], [ 68.75799, 41.00889 ], [ 68.7582, 41.009056 ], [ 68.758273, 41.009378 ], [ 68.758141, 41.009688 ], [ 68.757984, 41.009917 ], [ 68.757932, 41.009994 ], [ 68.757853, 41.01035 ], [ 68.757848, 41.010911 ], [ 68.757739, 41.011113 ], [ 68.757536, 41.01118 ], [ 68.757387, 41.01112 ], [ 68.757076, 41.010891 ], [ 68.75646, 41.010284 ], [ 68.756206, 41.010117 ], [ 68.755918, 41.010062 ], [ 68.755772, 41.010136 ], [ 68.755642, 41.010334 ], [ 68.75554, 41.010658 ], [ 68.755524, 41.010918 ], [ 68.755525, 41.011047 ], [ 68.75553, 41.011497 ], [ 68.755379, 41.011786 ], [ 68.755109, 41.011903 ], [ 68.754849, 41.011961 ], [ 68.754525, 41.011909 ], [ 68.753682, 41.011223 ], [ 68.753283, 41.011301 ], [ 68.753135, 41.011543 ], [ 68.753264, 41.011839 ], [ 68.753611, 41.012078 ], [ 68.753937, 41.012178 ], [ 68.75411, 41.0124 ], [ 68.754099, 41.0126 ], [ 68.753799, 41.012846 ], [ 68.753456, 41.013215 ], [ 68.753359, 41.013668 ], [ 68.750631, 41.009907 ], [ 68.747421, 41.005482 ], [ 68.742315, 41.005748 ], [ 68.732955, 41.01478 ], [ 68.727107, 41.022121 ], [ 68.727877, 41.023802 ], [ 68.746274, 41.0638 ], [ 68.759865, 41.07553 ], [ 68.773766, 41.087261 ], [ 68.808182, 41.098681 ], [ 68.842443, 41.110102 ], [ 68.854898, 41.12638 ], [ 68.867352, 41.142554 ], [ 68.873656, 41.149066 ], [ 68.880219, 41.155525 ], [ 68.890503, 41.158109 ], [ 68.900838, 41.160641 ], [ 68.922232, 41.16276 ], [ 68.943781, 41.164879 ], [ 68.961713, 41.171597 ], [ 68.979748, 41.178211 ], [ 68.997008, 41.1871 ], [ 69.014061, 41.19604 ], [ 69.022588, 41.202396 ], [ 69.031217, 41.208752 ], [ 69.035145, 41.214488 ], [ 69.039176, 41.220276 ], [ 69.046927, 41.26787 ], [ 69.054782, 41.315412 ], [ 69.054369, 41.323629 ], [ 69.053955, 41.331897 ], [ 69.052508, 41.337788 ], [ 69.051499, 41.342175 ], [ 69.052665, 41.34132 ], [ 69.06329, 41.33353 ], [ 69.069556, 41.332962 ], [ 69.07433, 41.33253 ], [ 69.077456, 41.33417 ], [ 69.088509, 41.33997 ], [ 69.088735, 41.341634 ], [ 69.089041, 41.343891 ], [ 69.090542, 41.346144 ], [ 69.09821, 41.35765 ], [ 69.10364, 41.3658 ], [ 69.104733, 41.372004 ], [ 69.10482, 41.3725 ], [ 69.11323, 41.38627 ], [ 69.11439, 41.38672 ], [ 69.14903, 41.40015 ], [ 69.16148, 41.40679 ], [ 69.17105, 41.41488 ], [ 69.171635, 41.41657 ], [ 69.17582, 41.42867 ], [ 69.180282, 41.437198 ], [ 69.183979, 41.444264 ], [ 69.189864, 41.447084 ], [ 69.211956, 41.457585 ], [ 69.220468, 41.459386 ], [ 69.23146, 41.46171 ], [ 69.235841, 41.461945 ], [ 69.24207, 41.46228 ], [ 69.246429, 41.461234 ], [ 69.24986, 41.46041 ], [ 69.261818, 41.461507 ], [ 69.27374, 41.4626 ], [ 69.28095, 41.461212 ], [ 69.28584, 41.46027 ], [ 69.285944, 41.460225 ], [ 69.291768, 41.45769 ], [ 69.30744, 41.45087 ], [ 69.311553, 41.450719 ], [ 69.31753, 41.4505 ], [ 69.320651, 41.451881 ], [ 69.32221, 41.45257 ], [ 69.34126, 41.45404 ], [ 69.34595, 41.45612 ], [ 69.349219, 41.456256 ], [ 69.35343, 41.45643 ], [ 69.362574, 41.45679 ], [ 69.363851, 41.45684 ], [ 69.366354, 41.458112 ], [ 69.36938, 41.45965 ], [ 69.369629, 41.459692 ], [ 69.371465, 41.460001 ], [ 69.37538, 41.46066 ], [ 69.39163, 41.45968 ], [ 69.410427, 41.456829 ], [ 69.42314, 41.4549 ], [ 69.43197, 41.45834 ], [ 69.432933, 41.460082 ], [ 69.438759, 41.470618 ], [ 69.438897, 41.471696 ], [ 69.43929, 41.47477 ], [ 69.43216, 41.47944 ], [ 69.414, 41.48721 ], [ 69.410882, 41.491044 ], [ 69.40685, 41.496 ], [ 69.40511, 41.50164 ], [ 69.405483, 41.502465 ], [ 69.40638, 41.50445 ], [ 69.408538, 41.507131 ], [ 69.40985, 41.50876 ], [ 69.42088, 41.52241 ], [ 69.45718, 41.54561 ], [ 69.45814, 41.545874 ], [ 69.461416, 41.546777 ], [ 69.46433, 41.54758 ], [ 69.465727, 41.547422 ], [ 69.47265, 41.54664 ], [ 69.49898, 41.55235 ], [ 69.507258, 41.55551 ], [ 69.51491, 41.55843 ], [ 69.518749, 41.561929 ], [ 69.51998, 41.56305 ], [ 69.52894, 41.58399 ], [ 69.52988, 41.586182 ], [ 69.53081, 41.58835 ], [ 69.53949, 41.59705 ], [ 69.5584, 41.61085 ], [ 69.56769, 41.61957 ], [ 69.576515, 41.624526 ], [ 69.58833, 41.63116 ], [ 69.592425, 41.636592 ], [ 69.59461, 41.63949 ], [ 69.606619, 41.6479 ], [ 69.62107, 41.65802 ], [ 69.627668, 41.660225 ], [ 69.63235, 41.66179 ], [ 69.65084, 41.66429 ], [ 69.654142, 41.664739 ], [ 69.65922, 41.66543 ], [ 69.682966, 41.670463 ], [ 69.69163, 41.6723 ], [ 69.700108, 41.675343 ], [ 69.70645, 41.67762 ], [ 69.717929, 41.686209 ], [ 69.719019, 41.688023 ], [ 69.759442, 41.696448 ], [ 69.815149, 41.69805 ], [ 69.870856, 41.699575 ], [ 69.877172, 41.701584 ], [ 69.88141, 41.69779 ], [ 69.88546, 41.69684 ], [ 69.891065, 41.697111 ], [ 69.89642, 41.69737 ], [ 69.920179, 41.704015 ], [ 69.92599, 41.70564 ], [ 69.927828, 41.706385 ], [ 69.94521, 41.71343 ], [ 69.94716, 41.71494 ], [ 69.947911, 41.715524 ], [ 69.95211, 41.71879 ], [ 69.976745, 41.765889 ], [ 69.999996, 41.772335 ], [ 70.020841, 41.778038 ], [ 70.0216, 41.77704 ], [ 70.02051, 41.76805 ], [ 70.022802, 41.764952 ], [ 70.023951, 41.7634 ], [ 70.02717, 41.7626 ], [ 70.03176, 41.76147 ], [ 70.03895, 41.76341 ], [ 70.04589, 41.76831 ], [ 70.05342, 41.78836 ], [ 70.058146, 41.796678 ], [ 70.069449, 41.802927 ], [ 70.109365, 41.825015 ], [ 70.14616, 41.83792 ], [ 70.14705, 41.83823 ], [ 70.15974, 41.8443 ], [ 70.17251, 41.86069 ], [ 70.18115, 41.87528 ], [ 70.187851, 41.891475 ], [ 70.18859, 41.89326 ], [ 70.19803, 41.9056 ], [ 70.2064, 41.91216 ], [ 70.2211, 41.92015 ], [ 70.236823, 41.937362 ], [ 70.23863, 41.93934 ], [ 70.2403, 41.94116 ], [ 70.253662, 41.945903 ], [ 70.26537, 41.95006 ], [ 70.27706, 41.94966 ], [ 70.28771, 41.9586 ], [ 70.30849, 41.96363 ], [ 70.313292, 41.965736 ], [ 70.32185, 41.96949 ], [ 70.33089, 41.97561 ], [ 70.33269, 41.98004 ], [ 70.332648, 41.98619 ], [ 70.3326, 41.9931 ], [ 70.33047, 42.00469 ], [ 70.32532, 42.01547 ], [ 70.32521, 42.01986 ], [ 70.32502, 42.02714 ], [ 70.32262, 42.03436 ], [ 70.32936, 42.04244 ], [ 70.348826, 42.051255 ], [ 70.3635, 42.0579 ], [ 70.366593, 42.063134 ], [ 70.367986, 42.065493 ], [ 70.406741, 42.078001 ], [ 70.45542, 42.093737 ], [ 70.462758, 42.092651 ], [ 70.470199, 42.091618 ], [ 70.479398, 42.086709 ], [ 70.488493, 42.081877 ], [ 70.496503, 42.075133 ], [ 70.504461, 42.068467 ], [ 70.508233, 42.061982 ], [ 70.511851, 42.055419 ], [ 70.515365, 42.046039 ], [ 70.518879, 42.036686 ], [ 70.52663, 42.030821 ], [ 70.534227, 42.024981 ], [ 70.54482, 42.021855 ], [ 70.555259, 42.018703 ], [ 70.5629, 42.017935 ], [ 70.57539, 42.01528 ], [ 70.60191, 41.99707 ], [ 70.607603, 41.996824 ], [ 70.61093, 41.99668 ], [ 70.62335, 41.99916 ], [ 70.62696, 42.00082 ], [ 70.627483, 42.00167 ], [ 70.62864, 42.00355 ], [ 70.63178, 42.00865 ], [ 70.63062, 42.01181 ], [ 70.633266, 42.017155 ], [ 70.65446, 42.05996 ], [ 70.67418, 42.08894 ], [ 70.674132, 42.092947 ], [ 70.67406, 42.09902 ], [ 70.67732, 42.10922 ], [ 70.68688, 42.11957 ], [ 70.689801, 42.122735 ], [ 70.69358, 42.12683 ], [ 70.70184, 42.130608 ], [ 70.70401, 42.1316 ], [ 70.711254, 42.13679 ], [ 70.714839, 42.139359 ], [ 70.72673, 42.15381 ], [ 70.73761, 42.160291 ], [ 70.74444, 42.16436 ], [ 70.752018, 42.173665 ], [ 70.76256, 42.18661 ], [ 70.77288, 42.194974 ], [ 70.781395, 42.193214 ], [ 70.804546, 42.188434 ], [ 70.82346, 42.190501 ], [ 70.842373, 42.192542 ], [ 70.861183, 42.199699 ], [ 70.879994, 42.206934 ], [ 70.913893, 42.227553 ], [ 70.947793, 42.248146 ], [ 70.960697, 42.257212 ], [ 70.9696, 42.263468 ], [ 71.014042, 42.287704 ], [ 71.020689, 42.288386 ], [ 71.045772, 42.29096 ], [ 71.077604, 42.281167 ], [ 71.217854, 42.206365 ], [ 71.249868, 42.198385 ], [ 71.253201, 42.197555 ], [ 71.238215, 42.160244 ], [ 71.201008, 42.140788 ], [ 71.199509, 42.140464 ], [ 71.199416, 42.141033 ], [ 71.198503, 42.142349 ], [ 71.197287, 42.144069 ], [ 71.195837, 42.145056 ], [ 71.192658, 42.144743 ], [ 71.189756, 42.14444 ], [ 71.186203, 42.143389 ], [ 71.182891, 42.142968 ], [ 71.179699, 42.142862 ], [ 71.176513, 42.142652 ], [ 71.172899, 42.142635 ], [ 71.171687, 42.141973 ], [ 71.168677, 42.140009 ], [ 71.165048, 42.13792 ], [ 71.160903, 42.135192 ], [ 71.157559, 42.133009 ], [ 71.155414, 42.131694 ], [ 71.154203, 42.131032 ], [ 71.151844, 42.130953 ], [ 71.146484, 42.132223 ], [ 71.144068, 42.133073 ], [ 71.142776, 42.133755 ], [ 71.141527, 42.133713 ], [ 71.140322, 42.132947 ], [ 71.139758, 42.130784 ], [ 71.138333, 42.12908 ], [ 71.137723, 42.127086 ], [ 71.118429, 42.122908 ], [ 70.977145, 42.044231 ], [ 70.935907, 42.036867 ], [ 70.927445, 42.037147 ], [ 70.9223, 42.03954 ], [ 70.91616, 42.04281 ], [ 70.914621, 42.043133 ], [ 70.907857, 42.041306 ], [ 70.903924, 42.04109 ], [ 70.899837, 42.041699 ], [ 70.897042, 42.044241 ], [ 70.895814, 42.047593 ], [ 70.895259, 42.049914 ], [ 70.89282, 42.051638 ], [ 70.890044, 42.053878 ], [ 70.887759, 42.054778 ], [ 70.886847, 42.053235 ], [ 70.885152, 42.049702 ], [ 70.882319, 42.047336 ], [ 70.879603, 42.047087 ], [ 70.876924, 42.047821 ], [ 70.873504, 42.049057 ], [ 70.870308, 42.051508 ], [ 70.867292, 42.05432 ], [ 70.865967, 42.056009 ], [ 70.863028, 42.052959 ], [ 70.860805, 42.049783 ], [ 70.860084, 42.045304 ], [ 70.858857, 42.042391 ], [ 70.855894, 42.039717 ], [ 70.855507, 42.037892 ], [ 70.855437, 42.035851 ], [ 70.857349, 42.032901 ], [ 70.857443, 42.032718 ], [ 70.845474, 42.030356 ], [ 70.828059, 41.993743 ], [ 70.825113, 41.93633 ], [ 70.818935, 41.926991 ], [ 70.817027, 41.927404 ], [ 70.815055, 41.926958 ], [ 70.811679, 41.92504 ], [ 70.807384, 41.923387 ], [ 70.805388, 41.923314 ], [ 70.803128, 41.924203 ], [ 70.799202, 41.926079 ], [ 70.793925, 41.928726 ], [ 70.791031, 41.930116 ], [ 70.788186, 41.929263 ], [ 70.784012, 41.928063 ], [ 70.781516, 41.927971 ], [ 70.77714, 41.929081 ], [ 70.773123, 41.930803 ], [ 70.769356, 41.933281 ], [ 70.76576, 41.936214 ], [ 70.762656, 41.937744 ], [ 70.75982, 41.938237 ], [ 70.758572, 41.937444 ], [ 70.758047, 41.936303 ], [ 70.757797, 41.93405 ], [ 70.75788, 41.931286 ], [ 70.758142, 41.927333 ], [ 70.758151, 41.924193 ], [ 70.75759, 41.920583 ], [ 70.75642, 41.9171 ], [ 70.754558, 41.915012 ], [ 70.752042, 41.913722 ], [ 70.749358, 41.913473 ], [ 70.744732, 41.913825 ], [ 70.739907, 41.915066 ], [ 70.736115, 41.916421 ], [ 70.731135, 41.919077 ], [ 70.728501, 41.921072 ], [ 70.72605, 41.921804 ], [ 70.723051, 41.921767 ], [ 70.719758, 41.921643 ], [ 70.716274, 41.921364 ], [ 70.71067, 41.921379 ], [ 70.708095, 41.920983 ], [ 70.703894, 41.91948 ], [ 70.699383, 41.918114 ], [ 70.696475, 41.916734 ], [ 70.693453, 41.916134 ], [ 70.688044, 41.91623 ], [ 70.683474, 41.915759 ], [ 70.680595, 41.915426 ], [ 70.677009, 41.913721 ], [ 70.673378, 41.911191 ], [ 70.671648, 41.910154 ], [ 70.669697, 41.909407 ], [ 70.66665, 41.908619 ], [ 70.663512, 41.907677 ], [ 70.661713, 41.906189 ], [ 70.660823, 41.903089 ], [ 70.660959, 41.901075 ], [ 70.661659, 41.899606 ], [ 70.662344, 41.898361 ], [ 70.662125, 41.897156 ], [ 70.66073, 41.895608 ], [ 70.658846, 41.893892 ], [ 70.658075, 41.891993 ], [ 70.657917, 41.891395 ], [ 70.648948, 41.887393 ], [ 70.550091, 41.824063 ], [ 70.506476, 41.78559 ], [ 70.477227, 41.738435 ], [ 70.453663, 41.71208 ], [ 70.423484, 41.696913 ], [ 70.390824, 41.685054 ], [ 70.33119, 41.649629 ], [ 70.250119, 41.613933 ], [ 70.24937, 41.614013 ], [ 70.244763, 41.616649 ], [ 70.241831, 41.617697 ], [ 70.238423, 41.616386 ], [ 70.231788, 41.613089 ], [ 70.228985, 41.612388 ], [ 70.226254, 41.612469 ], [ 70.22233, 41.61289 ], [ 70.217406, 41.612782 ], [ 70.213928, 41.612442 ], [ 70.21061, 41.612206 ], [ 70.210646, 41.608212 ], [ 70.210503, 41.603139 ], [ 70.212246, 41.600638 ], [ 70.214173, 41.598105 ], [ 70.169288, 41.578342 ], [ 70.148255, 41.552452 ], [ 70.166549, 41.520206 ], [ 70.170104, 41.518801 ], [ 70.169149, 41.5165 ], [ 70.171524, 41.515918 ], [ 70.176103, 41.515331 ], [ 70.178472, 41.514846 ], [ 70.183511, 41.511549 ], [ 70.186726, 41.510125 ], [ 70.1986, 41.507547 ], [ 70.199895, 41.507266 ], [ 70.209481, 41.505522 ], [ 70.211521, 41.504955 ], [ 70.212987, 41.504548 ], [ 70.215398, 41.503479 ], [ 70.217076, 41.501794 ], [ 70.218891, 41.498264 ], [ 70.220828, 41.496591 ], [ 70.225132, 41.494431 ], [ 70.230312, 41.492697 ], [ 70.234853, 41.492594 ], [ 70.240392, 41.493018 ], [ 70.245371, 41.494005 ], [ 70.248794, 41.495023 ], [ 70.25231, 41.496533 ], [ 70.254463, 41.497207 ], [ 70.26016, 41.497248 ], [ 70.264882, 41.498222 ], [ 70.268658, 41.499742 ], [ 70.269126, 41.500119 ], [ 70.344419, 41.493799 ], [ 70.344522, 41.493696 ], [ 70.344729, 41.493644 ], [ 70.344936, 41.493489 ], [ 70.372434, 41.480921 ], [ 70.372558, 41.479176 ], [ 70.372868, 41.476654 ], [ 70.374959, 41.472743 ], [ 70.376389, 41.470851 ], [ 70.379259, 41.468725 ], [ 70.380864, 41.46801 ], [ 70.383576, 41.468119 ], [ 70.390873, 41.46929 ], [ 70.392, 41.469752 ], [ 70.398989, 41.464964 ], [ 70.413614, 41.450701 ], [ 70.438057, 41.416078 ], [ 70.453198, 41.405484 ], [ 70.470782, 41.404879 ], [ 70.4594, 41.381299 ], [ 70.450253, 41.368535 ], [ 70.401419, 41.319365 ], [ 70.398577, 41.313758 ], [ 70.397181, 41.306445 ], [ 70.399662, 41.294947 ], [ 70.399972, 41.279522 ], [ 70.403383, 41.274251 ], [ 70.406845, 41.270659 ], [ 70.43444, 41.267714 ], [ 70.438006, 41.259704 ], [ 70.433355, 41.245751 ], [ 70.430409, 41.239524 ], [ 70.411341, 41.209009 ], [ 70.40948, 41.202963 ], [ 70.40979, 41.196349 ], [ 70.411961, 41.189631 ], [ 70.418472, 41.181569 ], [ 70.438471, 41.161157 ], [ 70.45878, 41.135164 ], [ 70.463327, 41.11315 ], [ 70.465343, 41.038968 ], [ 70.458056, 41.015895 ], [ 70.458006, 41.015737 ] ], [ [ 69.243448, 41.219172 ], [ 69.275186, 41.249532 ], [ 69.325932, 41.284253 ], [ 69.36377, 41.298498 ], [ 69.353531, 41.30651 ], [ 69.360654, 41.315858 ], [ 69.350415, 41.327432 ], [ 69.336616, 41.334109 ], [ 69.351906, 41.353972 ], [ 69.34819, 41.370166 ], [ 69.311243, 41.387972 ], [ 69.280528, 41.391088 ], [ 69.256935, 41.403552 ], [ 69.223172, 41.403276 ], [ 69.170132, 41.363044 ], [ 69.162119, 41.331438 ], [ 69.136069, 41.282828 ], [ 69.138972, 41.280692 ], [ 69.155887, 41.288259 ], [ 69.157668, 41.275795 ], [ 69.16479, 41.264667 ], [ 69.189718, 41.2433 ], [ 69.205743, 41.255764 ], [ 69.206634, 41.251758 ], [ 69.200847, 41.241964 ], [ 69.213311, 41.225049 ], [ 69.243448, 41.219172 ] ] ] } },
     8: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZNG", "name": "Namangan" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 71.581812, 40.774256 ], [ 71.499078, 40.753327 ], [ 71.41035, 40.716636 ], [ 71.390764, 40.704079 ], [ 71.359293, 40.667285 ], [ 71.293923, 40.620363 ], [ 71.270978, 40.616901 ], [ 71.256716, 40.620312 ], [ 71.211395, 40.639174 ], [ 71.191035, 40.651783 ], [ 71.179873, 40.654935 ], [ 71.161579, 40.657674 ], [ 71.151192, 40.660206 ], [ 71.143906, 40.663461 ], [ 71.115484, 40.685992 ], [ 71.108042, 40.688731 ], [ 71.068923, 40.692038 ], [ 71.063342, 40.696328 ], [ 71.126956, 40.762293 ], [ 71.013836, 40.757642 ], [ 70.9819, 40.761078 ], [ 70.975389, 40.765367 ], [ 70.967327, 40.769656 ], [ 70.951618, 40.774669 ], [ 70.931464, 40.774747 ], [ 70.884438, 40.74263 ], [ 70.871158, 40.741234 ], [ 70.843304, 40.743405 ], [ 70.829817, 40.74263 ], [ 70.81297, 40.73648 ], [ 70.801911, 40.727308 ], [ 70.792713, 40.71705 ], [ 70.782016, 40.707851 ], [ 70.756293, 40.695578 ], [ 70.758502, 40.703925 ], [ 70.767132, 40.737618 ], [ 70.728892, 40.754464 ], [ 70.637424, 40.770587 ], [ 70.621766, 40.785987 ], [ 70.619338, 40.803195 ], [ 70.628743, 40.815856 ], [ 70.64869, 40.81751 ], [ 70.683468, 40.794514 ], [ 70.703157, 40.788933 ], [ 70.70512, 40.807433 ], [ 70.696852, 40.816218 ], [ 70.514434, 40.972591 ], [ 70.482912, 40.99352 ], [ 70.47976, 40.996465 ], [ 70.477227, 40.999824 ], [ 70.458006, 41.015737 ], [ 70.458056, 41.015895 ], [ 70.465343, 41.038968 ], [ 70.463327, 41.11315 ], [ 70.45878, 41.135164 ], [ 70.438471, 41.161157 ], [ 70.418472, 41.181569 ], [ 70.411961, 41.189631 ], [ 70.40979, 41.196349 ], [ 70.40948, 41.202963 ], [ 70.411341, 41.209009 ], [ 70.430409, 41.239524 ], [ 70.433355, 41.245751 ], [ 70.438006, 41.259704 ], [ 70.43444, 41.267714 ], [ 70.406845, 41.270659 ], [ 70.403383, 41.274251 ], [ 70.399972, 41.279522 ], [ 70.399662, 41.294947 ], [ 70.397181, 41.306445 ], [ 70.398577, 41.313758 ], [ 70.401419, 41.319365 ], [ 70.450253, 41.368535 ], [ 70.4594, 41.381299 ], [ 70.470782, 41.404879 ], [ 70.477227, 41.404657 ], [ 70.478611, 41.405056 ], [ 70.479543, 41.403648 ], [ 70.480405, 41.402415 ], [ 70.483616, 41.400884 ], [ 70.489596, 41.398585 ], [ 70.494605, 41.397222 ], [ 70.497044, 41.399365 ], [ 70.499635, 41.402222 ], [ 70.501562, 41.402993 ], [ 70.505762, 41.403357 ], [ 70.508103, 41.401957 ], [ 70.510901, 41.399681 ], [ 70.512633, 41.39945 ], [ 70.514712, 41.399929 ], [ 70.519747, 41.403506 ], [ 70.522167, 41.404793 ], [ 70.525689, 41.405427 ], [ 70.528386, 41.406526 ], [ 70.531749, 41.407552 ], [ 70.535736, 41.409099 ], [ 70.538994, 41.409722 ], [ 70.542772, 41.410466 ], [ 70.546507, 41.409915 ], [ 70.549412, 41.409928 ], [ 70.551458, 41.410902 ], [ 70.551863, 41.412707 ], [ 70.552236, 41.416897 ], [ 70.552482, 41.419093 ], [ 70.554795, 41.421966 ], [ 70.557531, 41.424458 ], [ 70.5608, 41.426871 ], [ 70.564066, 41.427395 ], [ 70.566569, 41.427491 ], [ 70.567596, 41.427929 ], [ 70.56791, 41.429134 ], [ 70.566897, 41.432375 ], [ 70.566937, 41.435657 ], [ 70.568309, 41.438792 ], [ 70.568421, 41.439189 ], [ 70.579231, 41.443869 ], [ 70.579643, 41.44385 ], [ 70.58241, 41.443957 ], [ 70.585178, 41.444063 ], [ 70.588016, 41.445068 ], [ 70.590848, 41.446171 ], [ 70.592737, 41.447537 ], [ 70.59269, 41.448232 ], [ 70.592069, 41.449427 ], [ 70.603056, 41.454183 ], [ 70.605336, 41.452695 ], [ 70.608354, 41.45301 ], [ 70.612353, 41.454456 ], [ 70.616995, 41.458115 ], [ 70.619267, 41.459694 ], [ 70.62361, 41.459959 ], [ 70.627274, 41.460496 ], [ 70.630661, 41.461222 ], [ 70.632685, 41.460603 ], [ 70.638006, 41.458119 ], [ 70.642686, 41.457302 ], [ 70.646495, 41.457646 ], [ 70.648834, 41.458232 ], [ 70.652702, 41.461661 ], [ 70.655824, 41.465162 ], [ 70.660246, 41.468214 ], [ 70.664708, 41.47067 ], [ 70.667318, 41.471167 ], [ 70.668177, 41.471199 ], [ 70.686724, 41.462483 ], [ 70.70357, 41.445482 ], [ 70.759691, 41.372515 ], [ 70.769199, 41.352102 ], [ 70.77106, 41.331018 ], [ 70.75628, 41.269627 ], [ 70.758037, 41.25216 ], [ 70.770439, 41.238518 ], [ 70.773798, 41.238916 ], [ 70.773272, 41.236705 ], [ 70.773477, 41.233525 ], [ 70.773431, 41.229391 ], [ 70.77472, 41.226369 ], [ 70.774853, 41.221888 ], [ 70.774716, 41.216735 ], [ 70.776867, 41.212446 ], [ 70.778988, 41.208628 ], [ 70.780892, 41.205746 ], [ 70.78126, 41.202454 ], [ 70.782191, 41.200127 ], [ 70.785075, 41.196573 ], [ 70.786671, 41.196041 ], [ 70.787349, 41.20008 ], [ 70.787665, 41.202453 ], [ 70.791437, 41.206959 ], [ 70.794483, 41.210613 ], [ 70.796454, 41.21399 ], [ 70.796949, 41.216015 ], [ 70.796335, 41.220715 ], [ 70.796086, 41.224602 ], [ 70.797559, 41.228434 ], [ 70.799747, 41.230875 ], [ 70.80374, 41.231965 ], [ 70.809114, 41.23346 ], [ 70.812429, 41.237831 ], [ 70.815584, 41.239835 ], [ 70.822659, 41.241627 ], [ 70.82752, 41.24629 ], [ 70.830258, 41.248566 ], [ 70.847747, 41.243065 ], [ 70.865731, 41.233195 ], [ 70.882164, 41.220482 ], [ 70.895962, 41.206116 ], [ 70.914203, 41.193042 ], [ 70.933811, 41.191468 ], [ 70.934502, 41.190183 ], [ 70.934767, 41.188013 ], [ 70.934818, 41.187596 ], [ 70.934913, 41.186065 ], [ 70.936715, 41.184712 ], [ 70.939183, 41.182674 ], [ 70.939887, 41.1814 ], [ 70.9407, 41.178359 ], [ 70.942413, 41.175149 ], [ 70.944852, 41.173582 ], [ 70.946171, 41.172448 ], [ 70.949277, 41.170196 ], [ 70.952531, 41.168068 ], [ 70.957596, 41.166947 ], [ 70.961422, 41.165665 ], [ 70.963882, 41.163744 ], [ 70.966389, 41.163596 ], [ 70.967429, 41.164459 ], [ 70.968382, 41.166736 ], [ 70.970719, 41.166818 ], [ 70.973545, 41.166562 ], [ 70.97506, 41.167324 ], [ 70.977607, 41.169066 ], [ 70.980553, 41.169405 ], [ 70.981927, 41.169925 ], [ 70.982753, 41.171725 ], [ 70.98453, 41.173322 ], [ 70.984762, 41.174629 ], [ 70.98731, 41.176371 ], [ 70.990446, 41.178723 ], [ 70.992946, 41.178692 ], [ 70.99624, 41.178453 ], [ 70.998244, 41.178877 ], [ 70.999767, 41.17952 ], [ 71.003539, 41.180939 ], [ 71.008133, 41.183458 ], [ 71.01028, 41.185137 ], [ 71.013719, 41.186105 ], [ 71.015958, 41.186277 ], [ 71.018558, 41.186651 ], [ 71.021771, 41.187234 ], [ 71.024854, 41.187907 ], [ 71.027846, 41.18801 ], [ 71.029173, 41.188229 ], [ 71.047012, 41.182035 ], [ 71.067579, 41.169736 ], [ 71.085769, 41.162036 ], [ 71.093812, 41.161212 ], [ 71.094984, 41.160351 ], [ 71.097861, 41.158182 ], [ 71.100166, 41.157222 ], [ 71.1034, 41.157426 ], [ 71.105145, 41.157485 ], [ 71.105409, 41.155133 ], [ 71.108352, 41.151832 ], [ 71.114763, 41.144777 ], [ 71.11695, 41.145795 ], [ 71.119631, 41.146924 ], [ 71.120758, 41.146868 ], [ 71.122297, 41.146164 ], [ 71.123802, 41.143948 ], [ 71.124322, 41.143588 ], [ 71.126294, 41.144032 ], [ 71.132416, 41.148205 ], [ 71.135789, 41.150423 ], [ 71.139099, 41.148394 ], [ 71.164421, 41.116199 ], [ 71.18013, 41.108138 ], [ 71.189949, 41.127465 ], [ 71.187882, 41.148446 ], [ 71.183024, 41.166377 ], [ 71.185711, 41.180227 ], [ 71.206382, 41.188753 ], [ 71.214386, 41.188249 ], [ 71.218664, 41.185659 ], [ 71.225083, 41.182658 ], [ 71.228916, 41.181178 ], [ 71.231394, 41.181543 ], [ 71.233573, 41.182748 ], [ 71.233932, 41.183235 ], [ 71.241522, 41.175162 ], [ 71.253821, 41.13749 ], [ 71.263381, 41.123486 ], [ 71.276145, 41.113151 ], [ 71.289478, 41.113874 ], [ 71.297275, 41.127781 ], [ 71.301053, 41.128108 ], [ 71.303898, 41.128577 ], [ 71.308185, 41.130037 ], [ 71.31152, 41.132883 ], [ 71.311892, 41.135162 ], [ 71.31264, 41.139625 ], [ 71.313757, 41.144194 ], [ 71.315283, 41.147667 ], [ 71.321085, 41.153301 ], [ 71.324152, 41.152686 ], [ 71.334498, 41.151298 ], [ 71.393657, 41.112737 ], [ 71.398266, 41.115743 ], [ 71.400618, 41.112583 ], [ 71.404117, 41.11477 ], [ 71.410281, 41.118457 ], [ 71.418835, 41.124108 ], [ 71.425911, 41.129428 ], [ 71.432857, 41.134838 ], [ 71.434126, 41.136767 ], [ 71.439171, 41.145045 ], [ 71.443836, 41.150441 ], [ 71.448209, 41.155015 ], [ 71.45239, 41.158544 ], [ 71.449782, 41.158275 ], [ 71.452262, 41.160902 ], [ 71.451267, 41.163138 ], [ 71.448745, 41.165893 ], [ 71.443497, 41.170548 ], [ 71.437114, 41.175394 ], [ 71.433603, 41.177929 ], [ 71.432062, 41.180998 ], [ 71.431269, 41.184091 ], [ 71.432648, 41.186306 ], [ 71.433263, 41.18878 ], [ 71.433619, 41.191436 ], [ 71.436755, 41.193517 ], [ 71.44168, 41.197164 ], [ 71.445763, 41.200218 ], [ 71.452373, 41.202783 ], [ 71.456717, 41.205656 ], [ 71.457712, 41.208048 ], [ 71.457772, 41.211582 ], [ 71.457873, 41.214324 ], [ 71.457232, 41.216949 ], [ 71.457099, 41.2194 ], [ 71.457013, 41.221003 ], [ 71.455558, 41.22247 ], [ 71.452227, 41.223973 ], [ 71.448505, 41.225747 ], [ 71.446572, 41.22682 ], [ 71.446469, 41.228706 ], [ 71.44785, 41.230921 ], [ 71.447798, 41.231864 ], [ 71.44547, 41.233303 ], [ 71.43698, 41.237668 ], [ 71.435416, 41.241152 ], [ 71.435771, 41.243807 ], [ 71.436194, 41.245237 ], [ 71.434796, 41.247933 ], [ 71.434034, 41.250459 ], [ 71.433921, 41.252534 ], [ 71.43552, 41.255322 ], [ 71.436931, 41.256972 ], [ 71.438847, 41.258542 ], [ 71.439634, 41.260172 ], [ 71.439437, 41.261488 ], [ 71.43883, 41.263453 ], [ 71.439731, 41.265275 ], [ 71.440477, 41.26766 ], [ 71.441045, 41.268716 ], [ 71.442852, 41.27 ], [ 71.443785, 41.271257 ], [ 71.441598, 41.27236 ], [ 71.438179, 41.273104 ], [ 71.437577, 41.274974 ], [ 71.432776, 41.278131 ], [ 71.430509, 41.280705 ], [ 71.430303, 41.284476 ], [ 71.431584, 41.286216 ], [ 71.434721, 41.290658 ], [ 71.436571, 41.293455 ], [ 71.440415, 41.296407 ], [ 71.442831, 41.297993 ], [ 71.44556, 41.298455 ], [ 71.449351, 41.300084 ], [ 71.452607, 41.302356 ], [ 71.454583, 41.305156 ], [ 71.456251, 41.306719 ], [ 71.458089, 41.307437 ], [ 71.46232, 41.307897 ], [ 71.463498, 41.309256 ], [ 71.465817, 41.310366 ], [ 71.470645, 41.311364 ], [ 71.473109, 41.312101 ], [ 71.474764, 41.311585 ], [ 71.477592, 41.307894 ], [ 71.480223, 41.305519 ], [ 71.482182, 41.303312 ], [ 71.483864, 41.299963 ], [ 71.48506, 41.298678 ], [ 71.488849, 41.298038 ], [ 71.493028, 41.297126 ], [ 71.497551, 41.296792 ], [ 71.499821, 41.296483 ], [ 71.502238, 41.298137 ], [ 71.507215, 41.30103 ], [ 71.508758, 41.301576 ], [ 71.52383, 41.296654 ], [ 71.527528, 41.297203 ], [ 71.527981, 41.296499 ], [ 71.529339, 41.295089 ], [ 71.530304, 41.294811 ], [ 71.532378, 41.294213 ], [ 71.53576, 41.29496 ], [ 71.541258, 41.296093 ], [ 71.544008, 41.296659 ], [ 71.546432, 41.295281 ], [ 71.55, 41.292486 ], [ 71.553035, 41.291296 ], [ 71.555622, 41.290889 ], [ 71.560087, 41.291346 ], [ 71.563878, 41.292427 ], [ 71.568456, 41.294822 ], [ 71.573581, 41.299009 ], [ 71.580058, 41.305977 ], [ 71.58516, 41.310646 ], [ 71.589032, 41.313504 ], [ 71.593997, 41.316717 ], [ 71.598296, 41.320393 ], [ 71.599084, 41.321707 ], [ 71.600691, 41.323691 ], [ 71.603506, 41.327146 ], [ 71.607158, 41.330964 ], [ 71.608561, 41.332781 ], [ 71.609742, 41.334751 ], [ 71.609192, 41.33693 ], [ 71.610233, 41.343119 ], [ 71.61183, 41.348426 ], [ 71.615014, 41.349418 ], [ 71.61712, 41.348197 ], [ 71.618823, 41.344911 ], [ 71.620145, 41.342384 ], [ 71.622474, 41.340143 ], [ 71.625404, 41.339459 ], [ 71.628457, 41.339677 ], [ 71.630764, 41.341156 ], [ 71.633815, 41.34471 ], [ 71.636375, 41.3512 ], [ 71.639224, 41.355389 ], [ 71.64344, 41.359489 ], [ 71.647108, 41.364343 ], [ 71.651697, 41.371149 ], [ 71.656058, 41.379102 ], [ 71.65906, 41.38368 ], [ 71.659635, 41.38575 ], [ 71.6587, 41.38739 ], [ 71.658457, 41.388795 ], [ 71.658909, 41.389963 ], [ 71.657659, 41.391081 ], [ 71.651396, 41.393593 ], [ 71.647746, 41.394986 ], [ 71.646823, 41.396371 ], [ 71.647588, 41.398062 ], [ 71.651069, 41.399961 ], [ 71.656899, 41.40257 ], [ 71.663043, 41.405701 ], [ 71.668102, 41.410084 ], [ 71.672016, 41.413536 ], [ 71.675387, 41.417613 ], [ 71.675747, 41.420576 ], [ 71.675635, 41.422755 ], [ 71.674572, 41.424752 ], [ 71.681443, 41.422847 ], [ 71.685407, 41.42834 ], [ 71.685203, 41.428013 ], [ 71.683514, 41.424369 ], [ 71.68331, 41.421668 ], [ 71.686537, 41.418551 ], [ 71.690994, 41.4147 ], [ 71.697316, 41.41103 ], [ 71.70295, 41.407469 ], [ 71.70717, 41.404894 ], [ 71.710625, 41.403966 ], [ 71.714532, 41.404206 ], [ 71.717884, 41.405329 ], [ 71.721845, 41.407881 ], [ 71.723614, 41.409986 ], [ 71.723334, 41.41216 ], [ 71.719265, 41.415125 ], [ 71.712002, 41.420566 ], [ 71.70743, 41.426726 ], [ 71.705906, 41.429892 ], [ 71.705855, 41.434255 ], [ 71.705798, 41.438747 ], [ 71.705662, 41.441439 ], [ 71.705558, 41.44349 ], [ 71.706704, 41.444138 ], [ 71.706868, 41.444086 ], [ 71.712242, 41.428015 ], [ 71.721648, 41.424759 ], [ 71.729709, 41.430082 ], [ 71.730089, 41.441151 ], [ 71.731417, 41.441276 ], [ 71.733913, 41.442502 ], [ 71.733161, 41.443893 ], [ 71.733064, 41.445816 ], [ 71.735718, 41.447304 ], [ 71.738561, 41.448412 ], [ 71.743943, 41.44651 ], [ 71.747704, 41.442894 ], [ 71.749284, 41.438573 ], [ 71.750019, 41.434101 ], [ 71.750952, 41.425654 ], [ 71.751381, 41.417065 ], [ 71.75219, 41.41452 ], [ 71.754964, 41.413571 ], [ 71.758513, 41.414185 ], [ 71.760989, 41.415795 ], [ 71.762066, 41.418136 ], [ 71.761976, 41.419931 ], [ 71.759951, 41.422955 ], [ 71.757244, 41.42596 ], [ 71.757187, 41.427114 ], [ 71.7603, 41.429641 ], [ 71.765464, 41.433473 ], [ 71.847015, 41.341819 ], [ 71.863034, 41.312208 ], [ 71.868822, 41.279239 ], [ 71.866342, 41.236605 ], [ 71.868425, 41.219956 ], [ 71.866991, 41.218461 ], [ 71.862408, 41.211599 ], [ 71.86046, 41.207674 ], [ 71.860404, 41.199928 ], [ 71.859546, 41.195548 ], [ 71.860925, 41.193488 ], [ 71.86222, 41.193201 ], [ 71.866309, 41.192506 ], [ 71.870177, 41.191966 ], [ 71.871084, 41.190861 ], [ 71.871045, 41.187197 ], [ 71.871129, 41.185424 ], [ 71.872226, 41.184808 ], [ 71.873962, 41.18421 ], [ 71.876748, 41.183963 ], [ 71.877647, 41.18302 ], [ 71.878812, 41.180954 ], [ 71.880237, 41.177927 ], [ 71.88211, 41.174428 ], [ 71.884348, 41.17223 ], [ 71.888132, 41.168944 ], [ 71.891032, 41.16628 ], [ 71.895203, 41.163811 ], [ 71.901953, 41.160927 ], [ 71.907092, 41.159653 ], [ 71.913758, 41.158541 ], [ 71.917433, 41.15751 ], [ 71.921322, 41.156485 ], [ 71.927181, 41.154383 ], [ 71.932803, 41.152758 ], [ 71.935824, 41.152032 ], [ 71.939301, 41.150672 ], [ 71.943409, 41.149491 ], [ 71.945973, 41.149398 ], [ 71.94955, 41.150461 ], [ 71.95361, 41.154924 ], [ 71.956687, 41.157587 ], [ 71.96136, 41.158034 ], [ 71.969202, 41.15824 ], [ 71.972825, 41.158336 ], [ 71.981577, 41.158243 ], [ 71.99077, 41.157838 ], [ 71.993996, 41.157277 ], [ 71.999764, 41.157105 ], [ 72.005252, 41.157101 ], [ 72.009316, 41.155925 ], [ 72.010623, 41.154326 ], [ 72.01067, 41.149897 ], [ 72.011429, 41.146769 ], [ 72.013676, 41.144846 ], [ 72.017325, 41.142608 ], [ 72.023581, 41.140672 ], [ 72.030751, 41.138992 ], [ 72.037431, 41.137353 ], [ 72.045403, 41.135522 ], [ 72.048058, 41.134774 ], [ 72.052969, 41.131868 ], [ 72.055501, 41.130417 ], [ 72.058792, 41.129219 ], [ 72.062853, 41.126341 ], [ 72.068477, 41.121235 ], [ 72.070541, 41.119887 ], [ 72.072557, 41.123088 ], [ 72.078265, 41.1265 ], [ 72.082771, 41.129181 ], [ 72.091611, 41.135004 ], [ 72.095102, 41.139759 ], [ 72.096488, 41.143294 ], [ 72.099708, 41.147225 ], [ 72.104469, 41.151195 ], [ 72.108788, 41.154687 ], [ 72.112163, 41.155121 ], [ 72.115717, 41.154977 ], [ 72.118958, 41.154942 ], [ 72.123226, 41.156098 ], [ 72.126938, 41.157999 ], [ 72.131716, 41.161618 ], [ 72.133972, 41.162958 ], [ 72.137203, 41.163155 ], [ 72.141271, 41.161856 ], [ 72.147342, 41.160606 ], [ 72.152879, 41.160977 ], [ 72.157005, 41.161896 ], [ 72.162318, 41.163893 ], [ 72.170497, 41.160245 ], [ 72.171434, 41.159801 ], [ 72.174643, 41.141418 ], [ 72.1764, 41.112892 ], [ 72.185599, 41.060647 ], [ 72.185599, 41.041062 ], [ 72.178777, 41.023182 ], [ 72.172371, 41.011996 ], [ 72.169173, 41.013469 ], [ 72.160473, 41.016405 ], [ 72.156604, 41.016893 ], [ 72.152934, 41.016335 ], [ 72.151426, 41.015598 ], [ 72.151635, 41.01432 ], [ 72.153561, 41.012501 ], [ 72.15754, 41.009449 ], [ 72.16199, 41.006176 ], [ 72.164417, 41.003435 ], [ 72.166203, 41.001263 ], [ 72.166218, 41.001251 ], [ 72.167881, 40.999992 ], [ 72.170983, 40.997645 ], [ 72.176317, 40.993755 ], [ 72.179607, 40.991931 ], [ 72.18295, 40.992119 ], [ 72.185371, 40.994294 ], [ 72.187342, 40.997199 ], [ 72.191654, 40.997622 ], [ 72.192424, 40.997707 ], [ 72.189733, 40.990108 ], [ 72.165859, 40.906883 ], [ 72.158263, 40.901483 ], [ 72.153767, 40.899545 ], [ 72.147721, 40.897504 ], [ 72.132631, 40.895385 ], [ 72.072583, 40.893525 ], [ 72.05615, 40.891096 ], [ 72.038632, 40.892595 ], [ 71.907632, 40.91665 ], [ 71.880192, 40.914661 ], [ 71.85611, 40.91603 ], [ 71.834251, 40.91603 ], [ 71.822624, 40.913394 ], [ 71.78087, 40.898279 ], [ 71.747693, 40.910914 ], [ 71.644237, 40.889959 ], [ 71.631266, 40.875283 ], [ 71.618709, 40.86841 ], [ 71.586153, 40.845517 ], [ 71.581915, 40.839781 ], [ 71.582845, 40.832934 ], [ 71.594834, 40.82092 ], [ 71.610647, 40.795779 ], [ 71.581812, 40.774256 ] ], [ [ 70.565904, 41.018376 ], [ 70.549781, 41.015224 ], [ 70.56146, 40.994605 ], [ 70.562494, 40.993778 ], [ 70.579133, 40.980859 ], [ 70.608382, 40.950938 ], [ 70.625229, 40.938691 ], [ 70.645072, 40.935177 ], [ 70.643419, 40.952282 ], [ 70.6305, 40.976415 ], [ 70.61665, 40.99352 ], [ 70.593448, 41.009384 ], [ 70.565904, 41.018376 ] ], [ [ 71.687756, 41.432124 ], [ 71.691469, 41.441916 ], [ 71.696119, 41.447445 ], [ 71.698777, 41.446615 ], [ 71.698751, 41.446581 ], [ 71.698855, 41.44453 ], [ 71.698154, 41.441557 ], [ 71.697459, 41.438456 ], [ 71.694011, 41.435841 ], [ 71.690495, 41.434584 ], [ 71.687882, 41.432327 ], [ 71.687756, 41.432124 ] ], [ [ 71.686488, 41.525366 ], [ 71.689402, 41.514625 ], [ 71.689505, 41.493799 ], [ 71.671108, 41.437627 ], [ 71.671636, 41.429877 ], [ 71.670935, 41.431349 ], [ 71.669815, 41.433242 ], [ 71.670705, 41.435836 ], [ 71.670793, 41.440781 ], [ 71.669751, 41.444474 ], [ 71.668461, 41.446362 ], [ 71.666804, 41.448753 ], [ 71.665861, 41.450523 ], [ 71.666194, 41.453999 ], [ 71.665302, 41.458081 ], [ 71.662806, 41.463529 ], [ 71.659556, 41.467029 ], [ 71.656357, 41.472841 ], [ 71.653945, 41.476623 ], [ 71.65095, 41.478461 ], [ 71.647153, 41.479313 ], [ 71.642717, 41.479312 ], [ 71.63783, 41.478142 ], [ 71.633434, 41.477371 ], [ 71.62847, 41.474401 ], [ 71.622512, 41.470889 ], [ 71.618648, 41.469748 ], [ 71.616046, 41.47057 ], [ 71.61303, 41.472792 ], [ 71.609393, 41.47384 ], [ 71.608439, 41.474082 ], [ 71.605582, 41.476849 ], [ 71.605138, 41.477587 ], [ 71.606795, 41.477871 ], [ 71.60963, 41.47911 ], [ 71.613545, 41.482564 ], [ 71.615345, 41.484029 ], [ 71.619811, 41.486728 ], [ 71.624902, 41.487263 ], [ 71.63616, 41.487336 ], [ 71.641271, 41.487486 ], [ 71.644678, 41.487585 ], [ 71.647849, 41.488962 ], [ 71.650686, 41.4902 ], [ 71.653916, 41.490422 ], [ 71.656439, 41.491138 ], [ 71.660796, 41.492677 ], [ 71.666963, 41.495552 ], [ 71.67054, 41.498993 ], [ 71.674531, 41.504372 ], [ 71.676143, 41.509554 ], [ 71.675258, 41.513508 ], [ 71.674379, 41.517334 ], [ 71.674638, 41.518946 ], [ 71.677595, 41.521214 ], [ 71.682112, 41.523014 ], [ 71.685436, 41.524779 ], [ 71.686488, 41.525366 ] ] ] } },
     9: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZAN", "name": "Andijon" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 72.2192, 40.485199 ], [ 72.218311, 40.487555 ], [ 72.215985, 40.501352 ], [ 72.218776, 40.519258 ], [ 72.222341, 40.537939 ], [ 72.223116, 40.549825 ], [ 72.222806, 40.555354 ], [ 72.221721, 40.560419 ], [ 72.207614, 40.569979 ], [ 72.155782, 40.581864 ], [ 72.144258, 40.582794 ], [ 72.137127, 40.58729 ], [ 72.117593, 40.60902 ], [ 72.103486, 40.616798 ], [ 72.093564, 40.610028 ], [ 72.08266, 40.599719 ], [ 72.065762, 40.598401 ], [ 72.005404, 40.608168 ], [ 71.958688, 40.620079 ], [ 71.930163, 40.618684 ], [ 71.910112, 40.615919 ], [ 71.886393, 40.618839 ], [ 71.877091, 40.62119 ], [ 71.86903, 40.624446 ], [ 71.828825, 40.666278 ], [ 71.819834, 40.677931 ], [ 71.811462, 40.685295 ], [ 71.800403, 40.690178 ], [ 71.748107, 40.703795 ], [ 71.731984, 40.704699 ], [ 71.720977, 40.703485 ], [ 71.716016, 40.70072 ], [ 71.706094, 40.701599 ], [ 71.692916, 40.705164 ], [ 71.66589, 40.715706 ], [ 71.655348, 40.716016 ], [ 71.649301, 40.712993 ], [ 71.647596, 40.695346 ], [ 71.64341, 40.697284 ], [ 71.633488, 40.708058 ], [ 71.611578, 40.740098 ], [ 71.581812, 40.774256 ], [ 71.610647, 40.795779 ], [ 71.594834, 40.82092 ], [ 71.582845, 40.832934 ], [ 71.581915, 40.839781 ], [ 71.586153, 40.845517 ], [ 71.618709, 40.86841 ], [ 71.631266, 40.875283 ], [ 71.644237, 40.889959 ], [ 71.747693, 40.910914 ], [ 71.78087, 40.898279 ], [ 71.822624, 40.913394 ], [ 71.834251, 40.91603 ], [ 71.85611, 40.91603 ], [ 71.880192, 40.914661 ], [ 71.907632, 40.91665 ], [ 72.038632, 40.892595 ], [ 72.05615, 40.891096 ], [ 72.072583, 40.893525 ], [ 72.132631, 40.895385 ], [ 72.147721, 40.897504 ], [ 72.153767, 40.899545 ], [ 72.158263, 40.901483 ], [ 72.165859, 40.906883 ], [ 72.189733, 40.990108 ], [ 72.192424, 40.997707 ], [ 72.196519, 40.998163 ], [ 72.200398, 40.998893 ], [ 72.203715, 40.999714 ], [ 72.208342, 40.999297 ], [ 72.213608, 41.000271 ], [ 72.215827, 41.000642 ], [ 72.217221, 41.001223 ], [ 72.22103, 41.002132 ], [ 72.226506, 41.003664 ], [ 72.230425, 41.005625 ], [ 72.234657, 41.007477 ], [ 72.238179, 41.007911 ], [ 72.241581, 41.007526 ], [ 72.245474, 41.006453 ], [ 72.248405, 41.006289 ], [ 72.251748, 41.007303 ], [ 72.256145, 41.008924 ], [ 72.260714, 41.010083 ], [ 72.266989, 41.014665 ], [ 72.273678, 41.020424 ], [ 72.275964, 41.022069 ], [ 72.27921, 41.024405 ], [ 72.283401, 41.027304 ], [ 72.287939, 41.029277 ], [ 72.291533, 41.03061 ], [ 72.295393, 41.030351 ], [ 72.298414, 41.030644 ], [ 72.300147, 41.030812 ], [ 72.303695, 41.030662 ], [ 72.307963, 41.031695 ], [ 72.310843, 41.032812 ], [ 72.314227, 41.032891 ], [ 72.317593, 41.033436 ], [ 72.321339, 41.035974 ], [ 72.322923, 41.038694 ], [ 72.323507, 41.043258 ], [ 72.323832, 41.046648 ], [ 72.329071, 41.050387 ], [ 72.333257, 41.053517 ], [ 72.339154, 41.05622 ], [ 72.344111, 41.059368 ], [ 72.345828, 41.060341 ], [ 72.349059, 41.060415 ], [ 72.351923, 41.05857 ], [ 72.356931, 41.052622 ], [ 72.36, 41.048767 ], [ 72.361437, 41.047269 ], [ 72.374321, 41.031967 ], [ 72.395198, 41.022045 ], [ 72.423517, 41.01574 ], [ 72.473358, 41.012063 ], [ 72.47485, 41.011593 ], [ 72.477464, 41.011395 ], [ 72.481911, 41.008816 ], [ 72.484702, 41.004682 ], [ 72.485219, 40.999566 ], [ 72.483565, 40.99352 ], [ 72.483358, 40.970575 ], [ 72.501445, 40.963496 ], [ 72.52625, 40.962204 ], [ 72.545577, 40.956519 ], [ 72.588468, 40.905825 ], [ 72.59126, 40.903508 ], [ 72.590831, 40.901273 ], [ 72.588978, 40.899412 ], [ 72.587143, 40.897065 ], [ 72.587413, 40.894033 ], [ 72.585903, 40.891572 ], [ 72.583602, 40.88885 ], [ 72.579236, 40.885721 ], [ 72.576282, 40.88335 ], [ 72.574621, 40.880642 ], [ 72.574675, 40.879185 ], [ 72.576997, 40.876926 ], [ 72.581929, 40.873263 ], [ 72.586804, 40.871178 ], [ 72.591435, 40.871396 ], [ 72.595559, 40.871045 ], [ 72.601237, 40.868854 ], [ 72.604672, 40.866739 ], [ 72.606803, 40.865325 ], [ 72.610185, 40.864666 ], [ 72.612907, 40.864601 ], [ 72.615157, 40.864283 ], [ 72.618406, 40.862892 ], [ 72.623728, 40.861665 ], [ 72.629849, 40.860455 ], [ 72.633067, 40.859914 ], [ 72.638034, 40.859651 ], [ 72.641434, 40.858505 ], [ 72.645351, 40.856277 ], [ 72.650007, 40.855764 ], [ 72.652754, 40.85497 ], [ 72.655412, 40.854416 ], [ 72.659567, 40.854501 ], [ 72.665, 40.852516 ], [ 72.667529, 40.850957 ], [ 72.672749, 40.848245 ], [ 72.678112, 40.846474 ], [ 72.68025, 40.84598 ], [ 72.68347, 40.844837 ], [ 72.690208, 40.844168 ], [ 72.693763, 40.843568 ], [ 72.696602, 40.843222 ], [ 72.700352, 40.842089 ], [ 72.703721, 40.841754 ], [ 72.706917, 40.841281 ], [ 72.712275, 40.839643 ], [ 72.716726, 40.838657 ], [ 72.721488, 40.838886 ], [ 72.725205, 40.838691 ], [ 72.728732, 40.838895 ], [ 72.730312, 40.839194 ], [ 72.735084, 40.839154 ], [ 72.740358, 40.839928 ], [ 72.744745, 40.840819 ], [ 72.749327, 40.841177 ], [ 72.7516, 40.841892 ], [ 72.756177, 40.842384 ], [ 72.760021, 40.843667 ], [ 72.764228, 40.844688 ], [ 72.76929, 40.84653 ], [ 72.77472, 40.847977 ], [ 72.777337, 40.848967 ], [ 72.780476, 40.850235 ], [ 72.784149, 40.851379 ], [ 72.788846, 40.853616 ], [ 72.793382, 40.852887 ], [ 72.797808, 40.852036 ], [ 72.799398, 40.852309 ], [ 72.803461, 40.855182 ], [ 72.806977, 40.855249 ], [ 72.811752, 40.855947 ], [ 72.812218, 40.855996 ], [ 72.81733, 40.856539 ], [ 72.821154, 40.856975 ], [ 72.826081, 40.857919 ], [ 72.8313, 40.859718 ], [ 72.834605, 40.86136 ], [ 72.837427, 40.863114 ], [ 72.842519, 40.863939 ], [ 72.847618, 40.86452 ], [ 72.850936, 40.865797 ], [ 72.853973, 40.865854 ], [ 72.858781, 40.865578 ], [ 72.864095, 40.864462 ], [ 72.869132, 40.860922 ], [ 72.872998, 40.834821 ], [ 72.870311, 40.818181 ], [ 72.883127, 40.819628 ], [ 72.89827, 40.827656 ], [ 72.900441, 40.825822 ], [ 72.902431, 40.823549 ], [ 72.903462, 40.821259 ], [ 72.903029, 40.819793 ], [ 72.900284, 40.815612 ], [ 72.89798, 40.812654 ], [ 72.898828, 40.81109 ], [ 72.901878, 40.810659 ], [ 72.906362, 40.810376 ], [ 72.908469, 40.809442 ], [ 72.910599, 40.80778 ], [ 72.913333, 40.807222 ], [ 72.917144, 40.80802 ], [ 72.919525, 40.808549 ], [ 72.924194, 40.807418 ], [ 72.928552, 40.806038 ], [ 72.934351, 40.804562 ], [ 72.939105, 40.805862 ], [ 72.946935, 40.805881 ], [ 72.954914, 40.8042 ], [ 72.957543, 40.807041 ], [ 72.957368, 40.812749 ], [ 72.959597, 40.818256 ], [ 72.962398, 40.820736 ], [ 72.965571, 40.821521 ], [ 72.967823, 40.821075 ], [ 72.973121, 40.820318 ], [ 72.977149, 40.82452 ], [ 72.979007, 40.826496 ], [ 72.980401, 40.827979 ], [ 72.981282, 40.830546 ], [ 72.984902, 40.832432 ], [ 72.988098, 40.832488 ], [ 72.993222, 40.832213 ], [ 72.996363, 40.83409 ], [ 72.997482, 40.839419 ], [ 72.998801, 40.842416 ], [ 73.001657, 40.842466 ], [ 73.005018, 40.840352 ], [ 73.00759, 40.842568 ], [ 73.012549, 40.845828 ], [ 73.015856, 40.845551 ], [ 73.018707, 40.845767 ], [ 73.021564, 40.845816 ], [ 73.024006, 40.845023 ], [ 73.025868, 40.841546 ], [ 73.02811, 40.84008 ], [ 73.030742, 40.840292 ], [ 73.032665, 40.842163 ], [ 73.036417, 40.845545 ], [ 73.053556, 40.83632 ], [ 73.112467, 40.839162 ], [ 73.135042, 40.835274 ], [ 73.143292, 40.833853 ], [ 73.14337, 40.833839 ], [ 73.147547, 40.817866 ], [ 73.147151, 40.817393 ], [ 73.142855, 40.813815 ], [ 73.139915, 40.808922 ], [ 73.139831, 40.804831 ], [ 73.119538, 40.784436 ], [ 73.116538, 40.783165 ], [ 73.110242, 40.780558 ], [ 73.104371, 40.778458 ], [ 73.100066, 40.775382 ], [ 73.099351, 40.774873 ], [ 73.089441, 40.770598 ], [ 73.088345, 40.770513 ], [ 73.082638, 40.770418 ], [ 73.075199, 40.769459 ], [ 73.069692, 40.770035 ], [ 73.064853, 40.770288 ], [ 73.060009, 40.770708 ], [ 73.05877, 40.768015 ], [ 73.055551, 40.765457 ], [ 73.052946, 40.764411 ], [ 73.048332, 40.7645 ], [ 73.044786, 40.765609 ], [ 73.040635, 40.76487 ], [ 73.036675, 40.765137 ], [ 73.03248, 40.7659 ], [ 73.024997, 40.76644 ], [ 73.019725, 40.766517 ], [ 73.016692, 40.765129 ], [ 73.012297, 40.76522 ], [ 73.008566, 40.765156 ], [ 73.003997, 40.763741 ], [ 72.999835, 40.762983 ], [ 72.991449, 40.764227 ], [ 72.983692, 40.761908 ], [ 72.974195, 40.756779 ], [ 72.966239, 40.75247 ], [ 72.95606, 40.74415 ], [ 72.949465, 40.738077 ], [ 72.94618, 40.734644 ], [ 72.933452, 40.733027 ], [ 72.924366, 40.728751 ], [ 72.919265, 40.725086 ], [ 72.917274, 40.724994 ], [ 72.911832, 40.723903 ], [ 72.905389, 40.723986 ], [ 72.899992, 40.721508 ], [ 72.897144, 40.720861 ], [ 72.889154, 40.717937 ], [ 72.881952, 40.71483 ], [ 72.874472, 40.712312 ], [ 72.869242, 40.712811 ], [ 72.859049, 40.713614 ], [ 72.85739, 40.70603 ], [ 72.85842, 40.700708 ], [ 72.863637, 40.700606 ], [ 72.859907, 40.694902 ], [ 72.85668, 40.689964 ], [ 72.855743, 40.688238 ], [ 72.818945, 40.681084 ], [ 72.806367, 40.676984 ], [ 72.803419, 40.67706 ], [ 72.801101, 40.676222 ], [ 72.79995, 40.674892 ], [ 72.783908, 40.669663 ], [ 72.777891, 40.66263 ], [ 72.777712, 40.668016 ], [ 72.777103, 40.669216 ], [ 72.776711, 40.673176 ], [ 72.774997, 40.677706 ], [ 72.771332, 40.67823 ], [ 72.766137, 40.677733 ], [ 72.76354, 40.677484 ], [ 72.760482, 40.675441 ], [ 72.758525, 40.671634 ], [ 72.757655, 40.668045 ], [ 72.758105, 40.665546 ], [ 72.758133, 40.66471 ], [ 72.765969, 40.659986 ], [ 72.770094, 40.656862 ], [ 72.776042, 40.660469 ], [ 72.760034, 40.641758 ], [ 72.755621, 40.616573 ], [ 72.752757, 40.61246 ], [ 72.750163, 40.608091 ], [ 72.75021, 40.606699 ], [ 72.751174, 40.605185 ], [ 72.751052, 40.603371 ], [ 72.750284, 40.599038 ], [ 72.750406, 40.595418 ], [ 72.750878, 40.592223 ], [ 72.751234, 40.591531 ], [ 72.74841, 40.575408 ], [ 72.747148, 40.578218 ], [ 72.743728, 40.582191 ], [ 72.740958, 40.583112 ], [ 72.737044, 40.582757 ], [ 72.73318, 40.583657 ], [ 72.725992, 40.585605 ], [ 72.721959, 40.586083 ], [ 72.719802, 40.585065 ], [ 72.717717, 40.581959 ], [ 72.714345, 40.579106 ], [ 72.706954, 40.576312 ], [ 72.703507, 40.575686 ], [ 72.702187, 40.576914 ], [ 72.703316, 40.581255 ], [ 72.703524, 40.585857 ], [ 72.702166, 40.588198 ], [ 72.698339, 40.593277 ], [ 72.694771, 40.596131 ], [ 72.691813, 40.597187 ], [ 72.689349, 40.59449 ], [ 72.688259, 40.594329 ], [ 72.684201, 40.595502 ], [ 72.679197, 40.592336 ], [ 72.668638, 40.586133 ], [ 72.66401, 40.582696 ], [ 72.663871, 40.581439 ], [ 72.666661, 40.579963 ], [ 72.669096, 40.578201 ], [ 72.669382, 40.577753 ], [ 72.664226, 40.577783 ], [ 72.656474, 40.561143 ], [ 72.655131, 40.546363 ], [ 72.65048, 40.532152 ], [ 72.640868, 40.519853 ], [ 72.629109, 40.512711 ], [ 72.624872, 40.514287 ], [ 72.619375, 40.51501 ], [ 72.611842, 40.516526 ], [ 72.609063, 40.517723 ], [ 72.608088, 40.519514 ], [ 72.60693, 40.521301 ], [ 72.607048, 40.523114 ], [ 72.606648, 40.524081 ], [ 72.604431, 40.524871 ], [ 72.60113, 40.52536 ], [ 72.59873, 40.526146 ], [ 72.594655, 40.527872 ], [ 72.590052, 40.52903 ], [ 72.588091, 40.530304 ], [ 72.587828, 40.532526 ], [ 72.58594, 40.534296 ], [ 72.58391, 40.53495 ], [ 72.582077, 40.53519 ], [ 72.580011, 40.536817 ], [ 72.57752, 40.540106 ], [ 72.575834, 40.541323 ], [ 72.572542, 40.541533 ], [ 72.570414, 40.539817 ], [ 72.56975, 40.537994 ], [ 72.567598, 40.536974 ], [ 72.561728, 40.537824 ], [ 72.556588, 40.53869 ], [ 72.549396, 40.540765 ], [ 72.544604, 40.542055 ], [ 72.539514, 40.54153 ], [ 72.536399, 40.541881 ], [ 72.532499, 40.543746 ], [ 72.531025, 40.544132 ], [ 72.528826, 40.544364 ], [ 72.525655, 40.546245 ], [ 72.521613, 40.546993 ], [ 72.517252, 40.546482 ], [ 72.5141, 40.547806 ], [ 72.511475, 40.549699 ], [ 72.511257, 40.550668 ], [ 72.51243, 40.553478 ], [ 72.511613, 40.555827 ], [ 72.510452, 40.557612 ], [ 72.508374, 40.559516 ], [ 72.507744, 40.561729 ], [ 72.503363, 40.566646 ], [ 72.500023, 40.570399 ], [ 72.498256, 40.570846 ], [ 72.495858, 40.571159 ], [ 72.493318, 40.570982 ], [ 72.492141, 40.568407 ], [ 72.490647, 40.565824 ], [ 72.488212, 40.562857 ], [ 72.487171, 40.560891 ], [ 72.486595, 40.5593 ], [ 72.486654, 40.557722 ], [ 72.482462, 40.554959 ], [ 72.476558, 40.551187 ], [ 72.473433, 40.553912 ], [ 72.466038, 40.56015 ], [ 72.459954, 40.565359 ], [ 72.454547, 40.569491 ], [ 72.451878, 40.57271 ], [ 72.450795, 40.576087 ], [ 72.44944, 40.578243 ], [ 72.446163, 40.58072 ], [ 72.444065, 40.585653 ], [ 72.441018, 40.590442 ], [ 72.43673, 40.595994 ], [ 72.433214, 40.600531 ], [ 72.428457, 40.604189 ], [ 72.4223, 40.606966 ], [ 72.418716, 40.609072 ], [ 72.416096, 40.610956 ], [ 72.414093, 40.61334 ], [ 72.412849, 40.616712 ], [ 72.411192, 40.618375 ], [ 72.408969, 40.618204 ], [ 72.404851, 40.617626 ], [ 72.399788, 40.616783 ], [ 72.394552, 40.616301 ], [ 72.392068, 40.614666 ], [ 72.388789, 40.613013 ], [ 72.386407, 40.612838 ], [ 72.383717, 40.612413 ], [ 72.38396, 40.610539 ], [ 72.381556, 40.612148 ], [ 72.358387, 40.604196 ], [ 72.356817, 40.604089 ], [ 72.352653, 40.604722 ], [ 72.348339, 40.605109 ], [ 72.343904, 40.604521 ], [ 72.343629, 40.603422 ], [ 72.346082, 40.601779 ], [ 72.350468, 40.599572 ], [ 72.351263, 40.5989 ], [ 72.348509, 40.585508 ], [ 72.348483, 40.585379 ], [ 72.369928, 40.557931 ], [ 72.370083, 40.557732 ], [ 72.36998, 40.539852 ], [ 72.363262, 40.523574 ], [ 72.363467, 40.51241 ], [ 72.363469, 40.512309 ], [ 72.372254, 40.503265 ], [ 72.415585, 40.47933 ], [ 72.415662, 40.479287 ], [ 72.420028, 40.471027 ], [ 72.426096, 40.459545 ], [ 72.426204, 40.45934 ], [ 72.425977, 40.454201 ], [ 72.42438, 40.453947 ], [ 72.423288, 40.453437 ], [ 72.420968, 40.451807 ], [ 72.418629, 40.450662 ], [ 72.416415, 40.446241 ], [ 72.415127, 40.442569 ], [ 72.413136, 40.44063 ], [ 72.411288, 40.439131 ], [ 72.40999, 40.435702 ], [ 72.40621, 40.426631 ], [ 72.404806, 40.421864 ], [ 72.405244, 40.418716 ], [ 72.40878, 40.413452 ], [ 72.412408, 40.408607 ], [ 72.402521, 40.398268 ], [ 72.399651, 40.399039 ], [ 72.394913, 40.398447 ], [ 72.390179, 40.397733 ], [ 72.386027, 40.398367 ], [ 72.382482, 40.399744 ], [ 72.377538, 40.400361 ], [ 72.374151, 40.401741 ], [ 72.369033, 40.402718 ], [ 72.365348, 40.403605 ], [ 72.36371, 40.404904 ], [ 72.363163, 40.406713 ], [ 72.360758, 40.411394 ], [ 72.355329, 40.416248 ], [ 72.346903, 40.422188 ], [ 72.340679, 40.427024 ], [ 72.332685, 40.432426 ], [ 72.324103, 40.436599 ], [ 72.318727, 40.439996 ], [ 72.315284, 40.442709 ], [ 72.312465, 40.445679 ], [ 72.310874, 40.445763 ], [ 72.309661, 40.445492 ], [ 72.306892, 40.443242 ], [ 72.304802, 40.439915 ], [ 72.302658, 40.437922 ], [ 72.300442, 40.437748 ], [ 72.296758, 40.438512 ], [ 72.293888, 40.438809 ], [ 72.290004, 40.436654 ], [ 72.287153, 40.436466 ], [ 72.283494, 40.436622 ], [ 72.282071, 40.436467 ], [ 72.278615, 40.435536 ], [ 72.276557, 40.435366 ], [ 72.274421, 40.437137 ], [ 72.273016, 40.440468 ], [ 72.271604, 40.443956 ], [ 72.269082, 40.447418 ], [ 72.267679, 40.450664 ], [ 72.263916, 40.453368 ], [ 72.261189, 40.454021 ], [ 72.260227, 40.454252 ], [ 72.255888, 40.455485 ], [ 72.252154, 40.45746 ], [ 72.248613, 40.45859 ], [ 72.247522, 40.458894 ], [ 72.245399, 40.459485 ], [ 72.244208, 40.4614 ], [ 72.244769, 40.463234 ], [ 72.246039, 40.46715 ], [ 72.248043, 40.472541 ], [ 72.251659, 40.477363 ], [ 72.251563, 40.47973 ], [ 72.249583, 40.481504 ], [ 72.243193, 40.482323 ], [ 72.234963, 40.483826 ], [ 72.224767, 40.484432 ], [ 72.2192, 40.485199 ] ] ] } },
    10: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZSI", "name": "Sirdaryo" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 68.659073, 40.945027 ], [ 68.700179, 40.91634 ], [ 68.708137, 40.907633 ], [ 68.711393, 40.89753 ], [ 68.712736, 40.873836 ], [ 68.715269, 40.866498 ], [ 68.720591, 40.863914 ], [ 68.729428, 40.868927 ], [ 68.733769, 40.86903 ], [ 68.736714, 40.862338 ], [ 68.73997, 40.845052 ], [ 68.756248, 40.850065 ], [ 68.778262, 40.847094 ], [ 68.800018, 40.83973 ], [ 68.815056, 40.831384 ], [ 68.823996, 40.822547 ], [ 68.835623, 40.80552 ], [ 68.843013, 40.797872 ], [ 68.849834, 40.793919 ], [ 68.876499, 40.783609 ], [ 68.887506, 40.777046 ], [ 68.89288, 40.771827 ], [ 68.903216, 40.755652 ], [ 68.904146, 40.75126 ], [ 68.902286, 40.739581 ], [ 68.903216, 40.735188 ], [ 68.909882, 40.730227 ], [ 68.916858, 40.729969 ], [ 68.923938, 40.730848 ], [ 68.931121, 40.728987 ], [ 68.94466, 40.719427 ], [ 68.955719, 40.70718 ], [ 68.957993, 40.693692 ], [ 68.944764, 40.680566 ], [ 68.960215, 40.673538 ], [ 68.974271, 40.677001 ], [ 68.988223, 40.684132 ], [ 69.003468, 40.688008 ], [ 69.012925, 40.683719 ], [ 69.009204, 40.67359 ], [ 68.993184, 40.653255 ], [ 69.035352, 40.659456 ], [ 69.053801, 40.658294 ], [ 69.065583, 40.633334 ], [ 69.083877, 40.621707 ], [ 69.088786, 40.612302 ], [ 69.085065, 40.603749 ], [ 69.068684, 40.59176 ], [ 69.068322, 40.584345 ], [ 69.076073, 40.580702 ], [ 69.085995, 40.586257 ], [ 69.096537, 40.594422 ], [ 69.106149, 40.598633 ], [ 69.115193, 40.595455 ], [ 69.121445, 40.588376 ], [ 69.121859, 40.581296 ], [ 69.096641, 40.572614 ], [ 69.087081, 40.558791 ], [ 69.075763, 40.522901 ], [ 69.086977, 40.523832 ], [ 69.097726, 40.523263 ], [ 69.107648, 40.520628 ], [ 69.116743, 40.51546 ], [ 69.097881, 40.50745 ], [ 69.099948, 40.499363 ], [ 69.110438, 40.491741 ], [ 69.116743, 40.485359 ], [ 69.118758, 40.477271 ], [ 69.122376, 40.468512 ], [ 69.124029, 40.459546 ], [ 69.119843, 40.450916 ], [ 69.105632, 40.436705 ], [ 69.100103, 40.429264 ], [ 69.09416, 40.419135 ], [ 69.091576, 40.412314 ], [ 69.070647, 40.32064 ], [ 69.08491, 40.293019 ], [ 69.091421, 40.284673 ], [ 69.093282, 40.270049 ], [ 69.079019, 40.23031 ], [ 69.073748, 40.21721 ], [ 69.07364, 40.216941 ], [ 69.042018, 40.229173 ], [ 69.019229, 40.232067 ], [ 68.856551, 40.21274 ], [ 68.836656, 40.206436 ], [ 68.801877, 40.19114 ], [ 68.778468, 40.188763 ], [ 68.720539, 40.196514 ], [ 68.698318, 40.194964 ], [ 68.642732, 40.183692 ], [ 68.642353, 40.184007 ], [ 68.642043, 40.184266 ], [ 68.630106, 40.201991 ], [ 68.633361, 40.210466 ], [ 68.637547, 40.217597 ], [ 68.651345, 40.255734 ], [ 68.655376, 40.26284 ], [ 68.659561, 40.268188 ], [ 68.664264, 40.273201 ], [ 68.669535, 40.280126 ], [ 68.66845, 40.282296 ], [ 68.664057, 40.282451 ], [ 68.364437, 40.225659 ], [ 68.137113, 40.229483 ], [ 68.109672, 40.232893 ], [ 68.105952, 40.236666 ], [ 68.100061, 40.244366 ], [ 68.095823, 40.252427 ], [ 68.091792, 40.279764 ], [ 68.094583, 40.295577 ], [ 68.098614, 40.309271 ], [ 68.216746, 40.516158 ], [ 68.214059, 40.528793 ], [ 68.204602, 40.528147 ], [ 68.186774, 40.523883 ], [ 68.170031, 40.522359 ], [ 68.164605, 40.52608 ], [ 68.162382, 40.531247 ], [ 68.168945, 40.568428 ], [ 68.170186, 40.592225 ], [ 68.172511, 40.597316 ], [ 68.177162, 40.600261 ], [ 68.182898, 40.602173 ], [ 68.19592, 40.604524 ], [ 68.250852, 40.611682 ], [ 68.264185, 40.622379 ], [ 68.266497, 40.662703 ], [ 68.343921, 40.631733 ], [ 68.461743, 40.584656 ], [ 68.463397, 40.587188 ], [ 68.46505, 40.58972 ], [ 68.471148, 40.594474 ], [ 68.473287, 40.596114 ], [ 68.47972, 40.59445 ], [ 68.482195, 40.592699 ], [ 68.484441, 40.591112 ], [ 68.4875, 40.59611 ], [ 68.48926, 40.598274 ], [ 68.489625, 40.598724 ], [ 68.49111, 40.60055 ], [ 68.492839, 40.601956 ], [ 68.49556, 40.60417 ], [ 68.49984, 40.605597 ], [ 68.5, 40.60565 ], [ 68.500885, 40.605943 ], [ 68.50139, 40.60611 ], [ 68.51, 40.605 ], [ 68.51805, 40.60444 ], [ 68.522653, 40.605977 ], [ 68.52389, 40.60639 ], [ 68.524695, 40.608358 ], [ 68.52639, 40.6125 ], [ 68.52712, 40.613813 ], [ 68.528713, 40.616678 ], [ 68.546338, 40.610029 ], [ 68.566233, 40.602484 ], [ 68.579669, 40.600934 ], [ 68.593001, 40.599487 ], [ 68.598993, 40.602218 ], [ 68.60195, 40.60111 ], [ 68.603083, 40.600852 ], [ 68.60806, 40.59972 ], [ 68.61305, 40.6025 ], [ 68.618195, 40.603356 ], [ 68.61972, 40.60361 ], [ 68.62556, 40.60555 ], [ 68.63167, 40.6075 ], [ 68.633652, 40.608604 ], [ 68.63666, 40.61028 ], [ 68.64111, 40.61389 ], [ 68.64555, 40.6175 ], [ 68.649169, 40.621669 ], [ 68.648533, 40.625037 ], [ 68.64833, 40.62611 ], [ 68.644999, 40.63 ], [ 68.644144, 40.630449 ], [ 68.63917, 40.63306 ], [ 68.635006, 40.633982 ], [ 68.63167, 40.63472 ], [ 68.62388, 40.63639 ], [ 68.625456, 40.640206 ], [ 68.62583, 40.64111 ], [ 68.629065, 40.645086 ], [ 68.62945, 40.64556 ], [ 68.629772, 40.645905 ], [ 68.63138, 40.64763 ], [ 68.63249, 40.64882 ], [ 68.63333, 40.64972 ], [ 68.63695, 40.65417 ], [ 68.637435, 40.654725 ], [ 68.64083, 40.65861 ], [ 68.642315, 40.659725 ], [ 68.64528, 40.66195 ], [ 68.647989, 40.665282 ], [ 68.64889, 40.66639 ], [ 68.65195, 40.67167 ], [ 68.64833, 40.67556 ], [ 68.6468, 40.67828 ], [ 68.64584, 40.68 ], [ 68.64222, 40.68417 ], [ 68.63973, 40.68861 ], [ 68.637819, 40.691999 ], [ 68.63722, 40.69306 ], [ 68.636012, 40.696896 ], [ 68.63556, 40.69833 ], [ 68.63194, 40.70222 ], [ 68.631333, 40.704419 ], [ 68.63056, 40.70722 ], [ 68.63026, 40.71025 ], [ 68.63, 40.71278 ], [ 68.62861, 40.71805 ], [ 68.63223, 40.72222 ], [ 68.62834, 40.725 ], [ 68.627397, 40.724963 ], [ 68.62111, 40.72472 ], [ 68.61222, 40.72583 ], [ 68.60417, 40.72639 ], [ 68.59556, 40.7275 ], [ 68.589721, 40.730279 ], [ 68.58833, 40.73556 ], [ 68.588869, 40.737697 ], [ 68.58917, 40.73889 ], [ 68.58878, 40.74196 ], [ 68.587857, 40.749196 ], [ 68.58694, 40.75639 ], [ 68.58389, 40.77445 ], [ 68.58132, 40.78938 ], [ 68.581268, 40.789689 ], [ 68.58084, 40.79222 ], [ 68.578656, 40.804889 ], [ 68.57816, 40.80777 ], [ 68.578083, 40.808219 ], [ 68.57778, 40.81 ], [ 68.576008, 40.820297 ], [ 68.57472, 40.82778 ], [ 68.57237, 40.84143 ], [ 68.57166, 40.84555 ], [ 68.56805, 40.86139 ], [ 68.57306, 40.86278 ], [ 68.57624, 40.86455 ], [ 68.576738, 40.864823 ], [ 68.57806, 40.86555 ], [ 68.58389, 40.8675 ], [ 68.587895, 40.869609 ], [ 68.589168, 40.870279 ], [ 68.590229, 40.871141 ], [ 68.59361, 40.87389 ], [ 68.59583, 40.88 ], [ 68.596218, 40.884238 ], [ 68.59639, 40.886111 ], [ 68.59389, 40.890551 ], [ 68.592687, 40.895119 ], [ 68.5925, 40.895831 ], [ 68.592444, 40.896387 ], [ 68.59194, 40.90139 ], [ 68.59139, 40.90695 ], [ 68.592173, 40.910072 ], [ 68.59306, 40.91361 ], [ 68.593202, 40.915256 ], [ 68.594655, 40.918382 ], [ 68.595201, 40.919547 ], [ 68.59944, 40.91834 ], [ 68.60611, 40.91611 ], [ 68.61194, 40.91306 ], [ 68.61389, 40.91777 ], [ 68.614389, 40.923317 ], [ 68.61444, 40.92389 ], [ 68.615, 40.930279 ], [ 68.616198, 40.930842 ], [ 68.617888, 40.931636 ], [ 68.62252, 40.93381 ], [ 68.622602, 40.933836 ], [ 68.62874, 40.93575 ], [ 68.633585, 40.935359 ], [ 68.63592, 40.93517 ], [ 68.64526, 40.93633 ], [ 68.645728, 40.936626 ], [ 68.64789, 40.93799 ], [ 68.659073, 40.945027 ] ], [ [ 68.696545, 40.111739 ], [ 68.930655, 40.146801 ], [ 68.977267, 40.121015 ], [ 68.983779, 40.10701 ], [ 68.986982, 40.091714 ], [ 68.985432, 40.077141 ], [ 68.977267, 40.064894 ], [ 68.95453, 40.062052 ], [ 68.881769, 40.070837 ], [ 68.861512, 40.065824 ], [ 68.826062, 40.042053 ], [ 68.813143, 40.038901 ], [ 68.790405, 40.070165 ], [ 68.774696, 40.07988 ], [ 68.761725, 40.061483 ], [ 68.763844, 40.052492 ], [ 68.78162, 40.041536 ], [ 68.785031, 40.03394 ], [ 68.782912, 40.013424 ], [ 68.784411, 40.004019 ], [ 68.789372, 39.993994 ], [ 68.877428, 39.900563 ], [ 68.880787, 39.878342 ], [ 68.838258, 39.864648 ], [ 68.815365, 39.891882 ], [ 68.80012, 39.935134 ], [ 68.77976, 39.969448 ], [ 68.758883, 39.980558 ], [ 68.75201, 39.972755 ], [ 68.755575, 39.954048 ], [ 68.765239, 39.932447 ], [ 68.787615, 39.895757 ], [ 68.787356, 39.881701 ], [ 68.775212, 39.862529 ], [ 68.77144, 39.860514 ], [ 68.76095, 39.859119 ], [ 68.757539, 39.857517 ], [ 68.750408, 39.842479 ], [ 68.750614, 39.841083 ], [ 68.750511, 39.836071 ], [ 68.748341, 39.826149 ], [ 68.741623, 39.819638 ], [ 68.728187, 39.82496 ], [ 68.701522, 39.858447 ], [ 68.685089, 39.868007 ], [ 68.651086, 39.844701 ], [ 68.640276, 39.848136 ], [ 68.642818, 39.858394 ], [ 68.643128, 39.873794 ], [ 68.648399, 39.882579 ], [ 68.6515, 39.88971 ], [ 68.652895, 39.895446 ], [ 68.64995, 39.89927 ], [ 68.644989, 39.902448 ], [ 68.62716, 39.911259 ], [ 68.622509, 39.91467 ], [ 68.620494, 39.918597 ], [ 68.621269, 39.922654 ], [ 68.629331, 39.9264 ], [ 68.635532, 39.925806 ], [ 68.640803, 39.923403 ], [ 68.644834, 39.919476 ], [ 68.648089, 39.915497 ], [ 68.651655, 39.91591 ], [ 68.655221, 39.921259 ], [ 68.658321, 39.954306 ], [ 68.657546, 39.963608 ], [ 68.656151, 39.969034 ], [ 68.652895, 39.978645 ], [ 68.644679, 39.996629 ], [ 68.642508, 40.000194 ], [ 68.641888, 40.001176 ], [ 68.638787, 40.00668 ], [ 68.634912, 40.015956 ], [ 68.633516, 40.021537 ], [ 68.633206, 40.028151 ], [ 68.634137, 40.035696 ], [ 68.638322, 40.046677 ], [ 68.653825, 40.068252 ], [ 68.696545, 40.111739 ] ] ] } },
    11: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZJI", "name": "Jizzakh" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 68.266497, 40.662703 ], [ 68.264185, 40.622379 ], [ 68.250852, 40.611682 ], [ 68.19592, 40.604524 ], [ 68.182898, 40.602173 ], [ 68.177162, 40.600261 ], [ 68.172511, 40.597316 ], [ 68.170186, 40.592225 ], [ 68.168945, 40.568428 ], [ 68.162382, 40.531247 ], [ 68.164605, 40.52608 ], [ 68.170031, 40.522359 ], [ 68.186774, 40.523883 ], [ 68.204602, 40.528147 ], [ 68.214059, 40.528793 ], [ 68.216746, 40.516158 ], [ 68.098614, 40.309271 ], [ 68.094583, 40.295577 ], [ 68.091792, 40.279764 ], [ 68.095823, 40.252427 ], [ 68.100061, 40.244366 ], [ 68.105952, 40.236666 ], [ 68.109672, 40.232893 ], [ 68.137113, 40.229483 ], [ 68.364437, 40.225659 ], [ 68.664057, 40.282451 ], [ 68.66845, 40.282296 ], [ 68.669535, 40.280126 ], [ 68.664264, 40.273201 ], [ 68.659561, 40.268188 ], [ 68.655376, 40.26284 ], [ 68.651345, 40.255734 ], [ 68.637547, 40.217597 ], [ 68.633361, 40.210466 ], [ 68.630106, 40.201991 ], [ 68.642043, 40.184266 ], [ 68.642353, 40.184007 ], [ 68.642732, 40.183692 ], [ 68.601993, 40.17543 ], [ 68.581116, 40.164216 ], [ 68.606954, 40.142305 ], [ 68.651706, 40.120756 ], [ 68.687052, 40.110318 ], [ 68.696545, 40.111739 ], [ 68.653825, 40.068252 ], [ 68.638322, 40.046677 ], [ 68.634137, 40.035696 ], [ 68.633206, 40.028151 ], [ 68.633516, 40.021537 ], [ 68.634912, 40.015956 ], [ 68.638787, 40.00668 ], [ 68.641888, 40.001176 ], [ 68.642508, 40.000194 ], [ 68.644679, 39.996629 ], [ 68.652895, 39.978645 ], [ 68.656151, 39.969034 ], [ 68.657546, 39.963608 ], [ 68.658321, 39.954306 ], [ 68.655221, 39.921259 ], [ 68.651655, 39.91591 ], [ 68.648089, 39.915497 ], [ 68.644834, 39.919476 ], [ 68.640803, 39.923403 ], [ 68.635532, 39.925806 ], [ 68.629331, 39.9264 ], [ 68.621269, 39.922654 ], [ 68.620494, 39.918597 ], [ 68.622509, 39.91467 ], [ 68.62716, 39.911259 ], [ 68.644989, 39.902448 ], [ 68.64995, 39.89927 ], [ 68.652895, 39.895446 ], [ 68.6515, 39.88971 ], [ 68.648399, 39.882579 ], [ 68.643128, 39.873794 ], [ 68.642818, 39.858394 ], [ 68.640276, 39.848136 ], [ 68.637753, 39.848938 ], [ 68.626178, 39.84961 ], [ 68.615842, 39.828113 ], [ 68.605817, 39.666882 ], [ 68.600339, 39.642853 ], [ 68.587007, 39.623164 ], [ 68.562926, 39.603579 ], [ 68.520241, 39.582546 ], [ 68.506702, 39.56756 ], [ 68.510158, 39.561411 ], [ 68.517268, 39.548765 ], [ 68.51745, 39.54844 ], [ 68.49771, 39.541412 ], [ 68.436267, 39.528803 ], [ 68.386606, 39.525186 ], [ 68.337565, 39.527924 ], [ 68.255864, 39.550559 ], [ 68.106209, 39.554124 ], [ 67.764525, 39.622595 ], [ 67.717603, 39.623371 ], [ 67.680447, 39.614121 ], [ 67.587378, 39.562651 ], [ 67.507435, 39.552936 ], [ 67.487642, 39.538001 ], [ 67.494567, 39.493663 ], [ 67.491156, 39.490097 ], [ 67.487022, 39.487152 ], [ 67.482371, 39.485291 ], [ 67.477411, 39.484413 ], [ 67.451676, 39.487152 ], [ 67.436483, 39.485705 ], [ 67.360933, 39.537587 ], [ 67.31923, 39.566164 ], [ 67.30507, 39.579032 ], [ 67.294838, 39.59562 ], [ 67.297009, 39.664866 ], [ 67.300265, 39.672721 ], [ 67.306001, 39.682178 ], [ 67.319643, 39.684555 ], [ 67.349926, 39.685278 ], [ 67.358297, 39.686208 ], [ 67.367289, 39.689051 ], [ 67.37163, 39.693598 ], [ 67.3738, 39.699722 ], [ 67.374627, 39.711633 ], [ 67.374317, 39.717266 ], [ 67.37194, 39.727575 ], [ 67.370234, 39.732614 ], [ 67.368839, 39.739513 ], [ 67.368374, 39.748375 ], [ 67.369459, 39.763025 ], [ 67.371526, 39.769976 ], [ 67.37349, 39.774213 ], [ 67.381603, 39.780415 ], [ 67.397106, 39.789251 ], [ 67.428164, 39.801912 ], [ 67.449713, 39.80801 ], [ 67.476688, 39.812686 ], [ 67.484491, 39.813152 ], [ 67.499839, 39.816381 ], [ 67.503715, 39.824236 ], [ 67.476688, 39.91746 ], [ 67.459945, 39.938183 ], [ 67.286777, 39.963117 ], [ 67.263212, 39.965416 ], [ 67.253394, 39.962574 ], [ 67.244247, 39.963608 ], [ 67.237271, 39.966243 ], [ 67.220993, 39.97433 ], [ 67.214172, 39.973995 ], [ 67.207195, 39.97247 ], [ 67.191176, 39.971695 ], [ 67.179703, 39.972858 ], [ 67.100897, 39.989549 ], [ 67.089063, 40.004949 ], [ 67.084412, 40.003605 ], [ 67.079916, 40.003037 ], [ 67.066429, 39.999109 ], [ 67.03165, 40.028771 ], [ 67.0301, 40.034068 ], [ 67.02979, 40.042259 ], [ 67.032891, 40.048822 ], [ 67.032116, 40.062465 ], [ 67.027155, 40.068666 ], [ 67.020178, 40.072516 ], [ 67.012427, 40.073446 ], [ 67.006071, 40.073265 ], [ 67.00111, 40.072283 ], [ 66.981989, 40.064842 ], [ 66.975788, 40.063291 ], [ 66.967882, 40.062309 ], [ 66.959355, 40.062723 ], [ 66.947883, 40.064893 ], [ 66.943232, 40.06926 ], [ 66.939976, 40.07435 ], [ 66.935481, 40.119309 ], [ 66.936256, 40.124657 ], [ 66.938891, 40.12923 ], [ 66.944162, 40.131633 ], [ 66.962921, 40.136413 ], [ 66.968037, 40.139617 ], [ 66.970982, 40.142847 ], [ 66.975323, 40.151891 ], [ 66.975943, 40.175042 ], [ 66.948658, 40.200751 ], [ 66.945402, 40.20876 ], [ 66.945868, 40.216047 ], [ 66.948193, 40.221886 ], [ 66.949123, 40.228914 ], [ 66.945713, 40.233255 ], [ 66.940752, 40.236769 ], [ 66.920236, 40.244366 ], [ 66.91233, 40.248655 ], [ 66.908919, 40.253771 ], [ 66.906593, 40.258912 ], [ 66.892486, 40.31077 ], [ 66.89016, 40.327539 ], [ 66.888455, 40.374564 ], [ 66.888765, 40.381308 ], [ 66.88985, 40.387613 ], [ 66.891866, 40.393555 ], [ 66.900547, 40.4088 ], [ 66.906283, 40.423373 ], [ 66.907369, 40.437119 ], [ 66.905198, 40.446627 ], [ 66.901322, 40.456187 ], [ 66.893571, 40.468822 ], [ 66.888455, 40.475204 ], [ 66.883029, 40.47815 ], [ 66.877138, 40.477736 ], [ 66.850731, 40.473395 ], [ 66.827942, 40.472569 ], [ 66.811767, 40.474429 ], [ 66.795644, 40.47784 ], [ 66.754096, 40.487064 ], [ 66.628057, 40.490655 ], [ 66.620151, 40.4951 ], [ 66.773165, 40.721907 ], [ 66.801225, 40.775212 ], [ 66.779366, 40.804926 ], [ 66.770219, 40.822366 ], [ 66.768514, 40.826966 ], [ 66.768514, 40.84376 ], [ 66.770995, 40.861718 ], [ 66.771305, 40.871562 ], [ 66.770839, 40.878875 ], [ 66.768824, 40.883448 ], [ 66.765258, 40.887246 ], [ 66.759781, 40.890579 ], [ 66.669347, 40.909286 ], [ 66.655549, 40.9151 ], [ 66.649503, 40.918381 ], [ 66.64108, 40.926133 ], [ 66.635499, 40.934659 ], [ 66.633018, 40.939259 ], [ 66.631313, 40.944736 ], [ 66.61426, 41.084159 ], [ 66.626817, 41.096562 ], [ 66.635189, 41.112168 ], [ 66.757507, 41.149737 ], [ 66.75789, 41.15314 ], [ 66.774094, 41.149944 ], [ 66.81528, 41.141883 ], [ 66.931397, 41.147154 ], [ 67.028962, 41.151494 ], [ 67.174793, 41.158109 ], [ 67.281712, 41.162967 ], [ 67.409301, 41.168703 ], [ 67.490536, 41.172423 ], [ 67.620244, 41.178366 ], [ 67.748143, 41.184102 ], [ 67.759564, 41.181674 ], [ 67.770933, 41.179296 ], [ 67.792017, 41.170976 ], [ 67.812997, 41.162708 ], [ 67.823953, 41.159763 ], [ 67.834908, 41.156869 ], [ 67.84452, 41.157902 ], [ 67.854132, 41.158988 ], [ 67.861353, 41.162598 ], [ 67.873698, 41.16454 ], [ 67.88079, 41.171014 ], [ 67.883945, 41.173895 ], [ 67.912009, 41.187978 ], [ 67.92467, 41.194179 ], [ 67.927796, 41.195698 ], [ 67.930187, 41.195958 ], [ 67.93472, 41.196449 ], [ 67.93472, 41.19445 ], [ 67.93472, 41.18917 ], [ 67.934968, 41.187445 ], [ 67.93556, 41.18334 ], [ 67.94306, 41.17222 ], [ 67.946001, 41.168992 ], [ 67.95167, 41.16277 ], [ 67.962769, 41.154023 ], [ 67.96611, 41.15139 ], [ 67.968105, 41.149515 ], [ 67.97528, 41.14277 ], [ 67.979449, 41.138983 ], [ 67.980946, 41.13749 ], [ 67.994542, 41.124052 ], [ 67.9975, 41.12028 ], [ 67.999316, 41.117345 ], [ 68.0, 41.11624 ], [ 68.00111, 41.11444 ], [ 68.004137, 41.108641 ], [ 68.00444, 41.10806 ], [ 68.004576, 41.107774 ], [ 68.00749, 41.10166 ], [ 68.01083, 41.095 ], [ 68.011288, 41.091977 ], [ 68.01167, 41.08945 ], [ 68.0125, 41.08361 ], [ 68.013229, 41.081695 ], [ 68.01472, 41.07778 ], [ 68.016022, 41.073699 ], [ 68.01667, 41.07167 ], [ 68.017058, 41.068943 ], [ 68.0175, 41.06583 ], [ 68.01827, 41.063416 ], [ 68.01945, 41.05972 ], [ 68.020157, 41.056154 ], [ 68.02055, 41.05417 ], [ 68.024103, 41.048712 ], [ 68.02417, 41.04861 ], [ 68.02861, 41.04389 ], [ 68.030279, 41.042923 ], [ 68.03389, 41.04083 ], [ 68.03584, 41.04194 ], [ 68.039185, 41.04362 ], [ 68.04028, 41.04417 ], [ 68.04073, 41.04435 ], [ 68.05146, 41.04987 ], [ 68.052141, 41.050315 ], [ 68.0525, 41.05055 ], [ 68.05389, 41.05111 ], [ 68.06639, 41.05222 ], [ 68.076111, 41.04472 ], [ 68.079269, 41.045574 ], [ 68.082695, 41.046501 ], [ 68.08482, 41.047076 ], [ 68.08639, 41.0475 ], [ 68.086965, 41.050549 ], [ 68.089053, 41.053929 ], [ 68.093925, 41.06182 ], [ 68.097591, 41.064466 ], [ 68.09833, 41.065 ], [ 68.101547, 41.06525 ], [ 68.10555, 41.06556 ], [ 68.10611, 41.06556 ], [ 68.1125, 41.06445 ], [ 68.112892, 41.064243 ], [ 68.113276, 41.062649 ], [ 68.11238, 41.060986 ], [ 68.114237, 41.05506 ], [ 68.114821, 41.053727 ], [ 68.118795, 41.046866 ], [ 68.121067, 41.046238 ], [ 68.121196, 41.045506 ], [ 68.121299, 41.044369 ], [ 68.121454, 41.043284 ], [ 68.120162, 41.038685 ], [ 68.118922, 41.034034 ], [ 68.119978, 41.03377 ], [ 68.114011, 41.035054 ], [ 68.11076, 41.036223 ], [ 68.108695, 41.034374 ], [ 68.108395, 41.034244 ], [ 68.088501, 41.03069 ], [ 68.082232, 41.026365 ], [ 68.081122, 41.026196 ], [ 68.055495, 41.009031 ], [ 68.057701, 41.005698 ], [ 68.068308, 41.00806 ], [ 68.082275, 41.00131 ], [ 68.082795, 40.999292 ], [ 68.08359, 40.997685 ], [ 68.080419, 40.995488 ], [ 68.078715, 40.994633 ], [ 68.073992, 40.98613 ], [ 68.074051, 40.986062 ], [ 68.087944, 40.970089 ], [ 68.084355, 40.965986 ], [ 68.083849, 40.964412 ], [ 68.084105, 40.963693 ], [ 68.075653, 40.960577 ], [ 68.082104, 40.952945 ], [ 68.075063, 40.949599 ], [ 68.071627, 40.953359 ], [ 68.06991, 40.952459 ], [ 68.066458, 40.950516 ], [ 68.06446, 40.948537 ], [ 68.06424, 40.946932 ], [ 68.064117, 40.946594 ], [ 68.063709, 40.946053 ], [ 68.063213, 40.945646 ], [ 68.084285, 40.941763 ], [ 68.09145, 40.941872 ], [ 68.096396, 40.936299 ], [ 68.095723, 40.936067 ], [ 68.088698, 40.92554 ], [ 68.081624, 40.923318 ], [ 68.080479, 40.923317 ], [ 68.073166, 40.924594 ], [ 68.072469, 40.916741 ], [ 68.054561, 40.912575 ], [ 68.050418, 40.909094 ], [ 68.048783, 40.908635 ], [ 68.040057, 40.907594 ], [ 68.034333, 40.903567 ], [ 68.03388, 40.902481 ], [ 68.033133, 40.900899 ], [ 68.028695, 40.900077 ], [ 68.027336, 40.898515 ], [ 68.01251, 40.890516 ], [ 68.012115, 40.889689 ], [ 68.007048, 40.885514 ], [ 68.007996, 40.883255 ], [ 68.008722, 40.880162 ], [ 68.007196, 40.870089 ], [ 68.005966, 40.860643 ], [ 68.002743, 40.86017 ], [ 68.001898, 40.860635 ], [ 68.000734, 40.860565 ], [ 67.999199, 40.859982 ], [ 67.9969, 40.860067 ], [ 67.996065, 40.860476 ], [ 67.994729, 40.860441 ], [ 67.993523, 40.859933 ], [ 67.992286, 40.859218 ], [ 67.9924, 40.858596 ], [ 67.988175, 40.860331 ], [ 67.987546, 40.860487 ], [ 67.984582, 40.860757 ], [ 67.984259, 40.860937 ], [ 67.982008, 40.861041 ], [ 67.980674, 40.861205 ], [ 67.977729, 40.861265 ], [ 67.976818, 40.861152 ], [ 67.975992, 40.86128 ], [ 67.974764, 40.861291 ], [ 67.973931, 40.86095 ], [ 67.973528, 40.861661 ], [ 67.973112, 40.861828 ], [ 67.97275, 40.861871 ], [ 67.97275, 40.854864 ], [ 67.973268, 40.853984 ], [ 67.973287, 40.853204 ], [ 67.972958, 40.852435 ], [ 67.972517, 40.851867 ], [ 67.971838, 40.851325 ], [ 67.975027, 40.847927 ], [ 67.975336, 40.847012 ], [ 67.977127, 40.844954 ], [ 67.978297, 40.844869 ], [ 67.978919, 40.844532 ], [ 67.979354, 40.844041 ], [ 67.980718, 40.841555 ], [ 67.980766, 40.840783 ], [ 67.980405, 40.839926 ], [ 67.979335, 40.838856 ], [ 67.979144, 40.838566 ], [ 67.978592, 40.837455 ], [ 67.977167, 40.837455 ], [ 67.976382, 40.83574 ], [ 67.975928, 40.83388 ], [ 67.975984, 40.833027 ], [ 67.976552, 40.832093 ], [ 67.977518, 40.831249 ], [ 67.994928, 40.819541 ], [ 67.994071, 40.818957 ], [ 67.992521, 40.815029 ], [ 67.990919, 40.811102 ], [ 67.994227, 40.809345 ], [ 67.997482, 40.807536 ], [ 68.017326, 40.804281 ], [ 68.01791, 40.804186 ], [ 68.023489, 40.800696 ], [ 68.04687, 40.795872 ], [ 68.051169, 40.794984 ], [ 68.052259, 40.794514 ], [ 68.067504, 40.788002 ], [ 68.113237, 40.753534 ], [ 68.158919, 40.719118 ], [ 68.192406, 40.699016 ], [ 68.226099, 40.678862 ], [ 68.266497, 40.662703 ] ] ] } },
    12: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZSA", "name": "Samarkand" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 66.620151, 40.4951 ], [ 66.628057, 40.490655 ], [ 66.754096, 40.487064 ], [ 66.795644, 40.47784 ], [ 66.811767, 40.474429 ], [ 66.827942, 40.472569 ], [ 66.850731, 40.473395 ], [ 66.877138, 40.477736 ], [ 66.883029, 40.47815 ], [ 66.888455, 40.475204 ], [ 66.893571, 40.468822 ], [ 66.901322, 40.456187 ], [ 66.905198, 40.446627 ], [ 66.907369, 40.437119 ], [ 66.906283, 40.423373 ], [ 66.900547, 40.4088 ], [ 66.891866, 40.393555 ], [ 66.88985, 40.387613 ], [ 66.888765, 40.381308 ], [ 66.888455, 40.374564 ], [ 66.89016, 40.327539 ], [ 66.892486, 40.31077 ], [ 66.906593, 40.258912 ], [ 66.908919, 40.253771 ], [ 66.91233, 40.248655 ], [ 66.920236, 40.244366 ], [ 66.940752, 40.236769 ], [ 66.945713, 40.233255 ], [ 66.949123, 40.228914 ], [ 66.948193, 40.221886 ], [ 66.945868, 40.216047 ], [ 66.945402, 40.20876 ], [ 66.948658, 40.200751 ], [ 66.975943, 40.175042 ], [ 66.975323, 40.151891 ], [ 66.970982, 40.142847 ], [ 66.968037, 40.139617 ], [ 66.962921, 40.136413 ], [ 66.944162, 40.131633 ], [ 66.938891, 40.12923 ], [ 66.936256, 40.124657 ], [ 66.935481, 40.119309 ], [ 66.939976, 40.07435 ], [ 66.943232, 40.06926 ], [ 66.947883, 40.064893 ], [ 66.959355, 40.062723 ], [ 66.967882, 40.062309 ], [ 66.975788, 40.063291 ], [ 66.981989, 40.064842 ], [ 67.00111, 40.072283 ], [ 67.006071, 40.073265 ], [ 67.012427, 40.073446 ], [ 67.020178, 40.072516 ], [ 67.027155, 40.068666 ], [ 67.032116, 40.062465 ], [ 67.032891, 40.048822 ], [ 67.02979, 40.042259 ], [ 67.0301, 40.034068 ], [ 67.03165, 40.028771 ], [ 67.066429, 39.999109 ], [ 67.079916, 40.003037 ], [ 67.084412, 40.003605 ], [ 67.089063, 40.004949 ], [ 67.100897, 39.989549 ], [ 67.179703, 39.972858 ], [ 67.191176, 39.971695 ], [ 67.207195, 39.97247 ], [ 67.214172, 39.973995 ], [ 67.220993, 39.97433 ], [ 67.237271, 39.966243 ], [ 67.244247, 39.963608 ], [ 67.253394, 39.962574 ], [ 67.263212, 39.965416 ], [ 67.286777, 39.963117 ], [ 67.459945, 39.938183 ], [ 67.476688, 39.91746 ], [ 67.503715, 39.824236 ], [ 67.499839, 39.816381 ], [ 67.484491, 39.813152 ], [ 67.476688, 39.812686 ], [ 67.449713, 39.80801 ], [ 67.428164, 39.801912 ], [ 67.397106, 39.789251 ], [ 67.381603, 39.780415 ], [ 67.37349, 39.774213 ], [ 67.371526, 39.769976 ], [ 67.369459, 39.763025 ], [ 67.368374, 39.748375 ], [ 67.368839, 39.739513 ], [ 67.370234, 39.732614 ], [ 67.37194, 39.727575 ], [ 67.374317, 39.717266 ], [ 67.374627, 39.711633 ], [ 67.3738, 39.699722 ], [ 67.37163, 39.693598 ], [ 67.367289, 39.689051 ], [ 67.358297, 39.686208 ], [ 67.349926, 39.685278 ], [ 67.319643, 39.684555 ], [ 67.306001, 39.682178 ], [ 67.300265, 39.672721 ], [ 67.297009, 39.664866 ], [ 67.294838, 39.59562 ], [ 67.30507, 39.579032 ], [ 67.31923, 39.566164 ], [ 67.360933, 39.537587 ], [ 67.436483, 39.485705 ], [ 67.427284, 39.47661 ], [ 67.414779, 39.438111 ], [ 67.408164, 39.397906 ], [ 67.407079, 39.361009 ], [ 67.394418, 39.327368 ], [ 67.386873, 39.294192 ], [ 67.380259, 39.292331 ], [ 67.371267, 39.294502 ], [ 67.360622, 39.291763 ], [ 67.358697, 39.290431 ], [ 67.119655, 39.33716 ], [ 67.066429, 39.339098 ], [ 67.066119, 39.334008 ], [ 67.067669, 39.324163 ], [ 67.067824, 39.319151 ], [ 67.067049, 39.314112 ], [ 67.064878, 39.308919 ], [ 67.061158, 39.304604 ], [ 67.056352, 39.301219 ], [ 67.050926, 39.299152 ], [ 67.038833, 39.297136 ], [ 66.928349, 39.293778 ], [ 66.914035, 39.296051 ], [ 66.906749, 39.298248 ], [ 66.900237, 39.301064 ], [ 66.894656, 39.304449 ], [ 66.89078, 39.310366 ], [ 66.889385, 39.318479 ], [ 66.891091, 39.333775 ], [ 66.897447, 39.361551 ], [ 66.893726, 39.375478 ], [ 66.873727, 39.405089 ], [ 66.852282, 39.407621 ], [ 66.767274, 39.420643 ], [ 66.688571, 39.430565 ], [ 66.675393, 39.430462 ], [ 66.65741, 39.426379 ], [ 66.641855, 39.419635 ], [ 66.633639, 39.414313 ], [ 66.627282, 39.409042 ], [ 66.594881, 39.370672 ], [ 66.585373, 39.363541 ], [ 66.510597, 39.340131 ], [ 66.502535, 39.339563 ], [ 66.489513, 39.34225 ], [ 66.473493, 39.348632 ], [ 66.414375, 39.385348 ], [ 66.388796, 39.397854 ], [ 66.369882, 39.396975 ], [ 66.22555, 39.371137 ], [ 66.220589, 39.370905 ], [ 66.125142, 39.334344 ], [ 66.104213, 39.323698 ], [ 66.088556, 39.319616 ], [ 66.052847, 39.319538 ], [ 65.985978, 39.333465 ], [ 65.979467, 39.337237 ], [ 65.974919, 39.343361 ], [ 65.972645, 39.354859 ], [ 65.971819, 39.362352 ], [ 65.971715, 39.369018 ], [ 65.973059, 39.384754 ], [ 65.972749, 39.400154 ], [ 65.969648, 39.406251 ], [ 65.966703, 39.410902 ], [ 65.941433, 39.425914 ], [ 65.91177, 39.44183 ], [ 65.859474, 39.481311 ], [ 65.848622, 39.49299 ], [ 65.843196, 39.500277 ], [ 65.843196, 39.500483 ], [ 65.842731, 39.501 ], [ 65.840405, 39.506142 ], [ 65.830793, 39.538672 ], [ 65.828313, 39.542987 ], [ 65.824902, 39.546992 ], [ 65.820406, 39.550403 ], [ 65.815291, 39.552935 ], [ 65.808779, 39.554692 ], [ 65.799271, 39.555881 ], [ 65.7678, 39.556759 ], [ 65.756948, 39.555286 ], [ 65.748576, 39.550816 ], [ 65.746509, 39.545855 ], [ 65.745579, 39.540507 ], [ 65.746406, 39.52534 ], [ 65.746096, 39.520275 ], [ 65.744649, 39.515211 ], [ 65.741238, 39.510793 ], [ 65.736742, 39.506994 ], [ 65.715813, 39.495109 ], [ 65.694213, 39.486324 ], [ 65.682585, 39.483378 ], [ 65.255583, 39.491802 ], [ 65.202201, 39.57407 ], [ 65.189954, 39.603733 ], [ 65.190884, 39.609779 ], [ 65.22034, 39.661197 ], [ 65.222975, 39.669181 ], [ 65.225301, 39.678457 ], [ 65.226231, 39.693185 ], [ 65.224991, 39.700988 ], [ 65.19476, 39.785065 ], [ 65.186027, 39.794445 ], [ 65.17874, 39.800878 ], [ 65.158897, 39.814521 ], [ 65.129079, 39.84054 ], [ 65.121483, 39.853175 ], [ 65.123188, 39.858033 ], [ 65.127736, 39.861702 ], [ 65.13404, 39.864389 ], [ 65.143084, 39.866172 ], [ 65.192435, 39.871469 ], [ 65.252638, 39.883612 ], [ 65.260234, 39.887824 ], [ 65.268606, 39.893741 ], [ 65.272326, 39.911027 ], [ 65.274807, 39.917047 ], [ 65.280078, 39.924101 ], [ 65.286279, 39.926297 ], [ 65.293565, 39.925832 ], [ 65.327258, 39.911053 ], [ 65.357076, 39.900924 ], [ 65.384981, 39.897642 ], [ 65.413506, 39.897927 ], [ 65.42658, 39.901053 ], [ 65.435262, 39.90573 ], [ 65.441773, 39.917719 ], [ 65.458827, 39.969447 ], [ 65.461617, 39.975415 ], [ 65.477482, 40.001641 ], [ 65.481202, 40.009858 ], [ 65.481978, 40.015258 ], [ 65.480737, 40.019883 ], [ 65.476552, 40.023681 ], [ 65.47097, 40.026239 ], [ 65.464253, 40.027738 ], [ 65.457431, 40.028461 ], [ 65.454021, 40.032053 ], [ 65.454796, 40.038616 ], [ 65.480427, 40.06802 ], [ 65.483683, 40.072748 ], [ 65.485543, 40.076107 ], [ 65.487404, 40.080706 ], [ 65.488799, 40.085874 ], [ 65.490659, 40.106183 ], [ 65.490504, 40.118378 ], [ 65.491279, 40.123598 ], [ 65.49407, 40.130006 ], [ 65.500116, 40.139462 ], [ 65.506007, 40.144372 ], [ 65.512518, 40.146852 ], [ 65.527091, 40.14618 ], [ 65.618352, 40.114864 ], [ 65.638195, 40.111919 ], [ 65.641503, 40.110653 ], [ 65.65158, 40.10918 ], [ 65.677263, 40.081533 ], [ 65.692921, 40.068795 ], [ 65.733487, 40.057659 ], [ 65.752452, 40.046135 ], [ 65.771986, 40.038383 ], [ 65.792915, 40.043732 ], [ 65.836323, 40.022441 ], [ 65.878594, 40.015749 ], [ 66.094343, 40.051225 ], [ 66.105454, 40.055747 ], [ 66.169998, 40.101764 ], [ 66.178989, 40.110188 ], [ 66.184105, 40.11843 ], [ 66.18426, 40.126285 ], [ 66.181625, 40.132641 ], [ 66.175734, 40.138584 ], [ 66.168447, 40.141426 ], [ 66.158991, 40.142563 ], [ 66.150154, 40.142227 ], [ 66.131189, 40.139592 ], [ 66.123902, 40.140083 ], [ 66.119561, 40.141943 ], [ 66.117701, 40.147343 ], [ 66.119716, 40.155017 ], [ 66.145658, 40.201732 ], [ 66.153409, 40.224418 ], [ 66.159611, 40.237389 ], [ 66.168292, 40.250102 ], [ 66.193304, 40.277645 ], [ 66.198265, 40.28457 ], [ 66.199505, 40.29413 ], [ 66.184105, 40.304052 ], [ 66.18054, 40.309039 ], [ 66.178059, 40.316454 ], [ 66.179299, 40.322862 ], [ 66.192787, 40.345393 ], [ 66.199815, 40.3672 ], [ 66.196198, 40.402961 ], [ 66.185345, 40.426628 ], [ 66.185656, 40.43407 ], [ 66.190616, 40.440038 ], [ 66.210047, 40.447221 ], [ 66.217333, 40.452363 ], [ 66.22524, 40.46399 ], [ 66.22586, 40.471639 ], [ 66.221364, 40.4797 ], [ 66.214388, 40.488382 ], [ 66.205551, 40.505797 ], [ 66.205861, 40.522178 ], [ 66.208807, 40.537939 ], [ 66.221674, 40.565173 ], [ 66.229891, 40.577782 ], [ 66.239037, 40.589151 ], [ 66.250665, 40.599253 ], [ 66.262963, 40.606204 ], [ 66.276141, 40.609563 ], [ 66.290249, 40.608219 ], [ 66.305131, 40.602742 ], [ 66.325802, 40.590985 ], [ 66.34394, 40.583208 ], [ 66.361665, 40.577756 ], [ 66.377944, 40.575973 ], [ 66.397787, 40.57804 ], [ 66.421197, 40.586205 ], [ 66.493389, 40.623722 ], [ 66.502845, 40.626616 ], [ 66.511682, 40.625634 ], [ 66.522999, 40.620932 ], [ 66.551111, 40.602018 ], [ 66.585218, 40.57202 ], [ 66.588008, 40.567938 ], [ 66.589455, 40.563519 ], [ 66.588628, 40.554088 ], [ 66.582737, 40.538249 ], [ 66.582582, 40.533754 ], [ 66.583667, 40.530136 ], [ 66.585838, 40.525847 ], [ 66.589248, 40.521196 ], [ 66.600617, 40.509724 ], [ 66.620151, 40.4951 ] ] ] } },
    13: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZQA", "name": "Kashkadarya" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 65.255583, 39.491802 ], [ 65.682585, 39.483378 ], [ 65.694213, 39.486324 ], [ 65.715813, 39.495109 ], [ 65.736742, 39.506994 ], [ 65.741238, 39.510793 ], [ 65.744649, 39.515211 ], [ 65.746096, 39.520275 ], [ 65.746406, 39.52534 ], [ 65.745579, 39.540507 ], [ 65.746509, 39.545855 ], [ 65.748576, 39.550816 ], [ 65.756948, 39.555286 ], [ 65.7678, 39.556759 ], [ 65.799271, 39.555881 ], [ 65.808779, 39.554692 ], [ 65.815291, 39.552935 ], [ 65.820406, 39.550403 ], [ 65.824902, 39.546992 ], [ 65.828313, 39.542987 ], [ 65.830793, 39.538672 ], [ 65.840405, 39.506142 ], [ 65.842731, 39.501 ], [ 65.843196, 39.500483 ], [ 65.843196, 39.500277 ], [ 65.848622, 39.49299 ], [ 65.859474, 39.481311 ], [ 65.91177, 39.44183 ], [ 65.941433, 39.425914 ], [ 65.966703, 39.410902 ], [ 65.969648, 39.406251 ], [ 65.972749, 39.400154 ], [ 65.973059, 39.384754 ], [ 65.971715, 39.369018 ], [ 65.971819, 39.362352 ], [ 65.972645, 39.354859 ], [ 65.974919, 39.343361 ], [ 65.979467, 39.337237 ], [ 65.985978, 39.333465 ], [ 66.052847, 39.319538 ], [ 66.088556, 39.319616 ], [ 66.104213, 39.323698 ], [ 66.125142, 39.334344 ], [ 66.220589, 39.370905 ], [ 66.22555, 39.371137 ], [ 66.369882, 39.396975 ], [ 66.388796, 39.397854 ], [ 66.414375, 39.385348 ], [ 66.473493, 39.348632 ], [ 66.489513, 39.34225 ], [ 66.502535, 39.339563 ], [ 66.510597, 39.340131 ], [ 66.585373, 39.363541 ], [ 66.594881, 39.370672 ], [ 66.627282, 39.409042 ], [ 66.633639, 39.414313 ], [ 66.641855, 39.419635 ], [ 66.65741, 39.426379 ], [ 66.675393, 39.430462 ], [ 66.688571, 39.430565 ], [ 66.767274, 39.420643 ], [ 66.852282, 39.407621 ], [ 66.873727, 39.405089 ], [ 66.893726, 39.375478 ], [ 66.897447, 39.361551 ], [ 66.891091, 39.333775 ], [ 66.889385, 39.318479 ], [ 66.89078, 39.310366 ], [ 66.894656, 39.304449 ], [ 66.900237, 39.301064 ], [ 66.906749, 39.298248 ], [ 66.914035, 39.296051 ], [ 66.928349, 39.293778 ], [ 67.038833, 39.297136 ], [ 67.050926, 39.299152 ], [ 67.056352, 39.301219 ], [ 67.061158, 39.304604 ], [ 67.064878, 39.308919 ], [ 67.067049, 39.314112 ], [ 67.067824, 39.319151 ], [ 67.067669, 39.324163 ], [ 67.066119, 39.334008 ], [ 67.066429, 39.339098 ], [ 67.119655, 39.33716 ], [ 67.358697, 39.290431 ], [ 67.351217, 39.285252 ], [ 67.346462, 39.280808 ], [ 67.344395, 39.273831 ], [ 67.34269, 39.259568 ], [ 67.350037, 39.220058 ], [ 67.35008, 39.219829 ], [ 67.378192, 39.199495 ], [ 67.499011, 39.165983 ], [ 67.58035, 39.163605 ], [ 67.619831, 39.151255 ], [ 67.624172, 39.147379 ], [ 67.63213, 39.136217 ], [ 67.637711, 39.13154 ], [ 67.644532, 39.13061 ], [ 67.661172, 39.133375 ], [ 67.66758, 39.131773 ], [ 67.676581, 39.119821 ], [ 67.676726, 39.119629 ], [ 67.678587, 39.105935 ], [ 67.667218, 39.028368 ], [ 67.672185, 39.003992 ], [ 67.672231, 39.00377 ], [ 67.673254, 39.002978 ], [ 67.658434, 38.994158 ], [ 67.640399, 38.988473 ], [ 67.567793, 38.985967 ], [ 67.555081, 38.983435 ], [ 67.543402, 38.979637 ], [ 67.537511, 38.976898 ], [ 67.531465, 38.972815 ], [ 67.524179, 38.966976 ], [ 67.518287, 38.959896 ], [ 67.515652, 38.952455 ], [ 67.515807, 38.944032 ], [ 67.523248, 38.920751 ], [ 67.528984, 38.885069 ], [ 67.553376, 38.850549 ], [ 67.555391, 38.84626 ], [ 67.556786, 38.841144 ], [ 67.556476, 38.835408 ], [ 67.555391, 38.829103 ], [ 67.553376, 38.823367 ], [ 67.552135, 38.817321 ], [ 67.55167, 38.81205 ], [ 67.55167, 38.806831 ], [ 67.552291, 38.801663 ], [ 67.553686, 38.796599 ], [ 67.555701, 38.791793 ], [ 67.558802, 38.781561 ], [ 67.559422, 38.776031 ], [ 67.559422, 38.770295 ], [ 67.556631, 38.762854 ], [ 67.551515, 38.75487 ], [ 67.541128, 38.742442 ], [ 67.536426, 38.734173 ], [ 67.533945, 38.726784 ], [ 67.53379, 38.709291 ], [ 67.532085, 38.704563 ], [ 67.528519, 38.701101 ], [ 67.521543, 38.701927 ], [ 67.516272, 38.704408 ], [ 67.498134, 38.719652 ], [ 67.493948, 38.722288 ], [ 67.488625, 38.72482 ], [ 67.482114, 38.727042 ], [ 67.467386, 38.730349 ], [ 67.451573, 38.731874 ], [ 67.437155, 38.731383 ], [ 67.424546, 38.728851 ], [ 67.410129, 38.723761 ], [ 67.400672, 38.71805 ], [ 67.394316, 38.713193 ], [ 67.38889, 38.708077 ], [ 67.329152, 38.616997 ], [ 67.319023, 38.606274 ], [ 67.301195, 38.592115 ], [ 67.291738, 38.58612 ], [ 67.276545, 38.579842 ], [ 67.236961, 38.572323 ], [ 67.228744, 38.557698 ], [ 67.217892, 38.543333 ], [ 67.200012, 38.527984 ], [ 67.16265, 38.503723 ], [ 67.157069, 38.497495 ], [ 67.150558, 38.484757 ], [ 67.14508, 38.467652 ], [ 67.134228, 38.416286 ], [ 67.126477, 38.392541 ], [ 67.123686, 38.387218 ], [ 67.110974, 38.376263 ], [ 67.000179, 38.306422 ], [ 66.943077, 38.281281 ], [ 66.93145, 38.278568 ], [ 66.895121, 38.273891 ], [ 66.88706, 38.269189 ], [ 66.877913, 38.260714 ], [ 66.862513, 38.24025 ], [ 66.851816, 38.220381 ], [ 66.848096, 38.208882 ], [ 66.84267, 38.196532 ], [ 66.836159, 38.184543 ], [ 66.828717, 38.173898 ], [ 66.706761, 38.083981 ], [ 66.698492, 38.075454 ], [ 66.692446, 38.058892 ], [ 66.68733, 38.019669 ], [ 66.681904, 38.00613 ], [ 66.666246, 37.981765 ], [ 66.659115, 37.978124 ], [ 66.620186, 38.014033 ], [ 66.594361, 38.026673 ], [ 66.565628, 38.035899 ], [ 66.551238, 38.038235 ], [ 66.496543, 38.041855 ], [ 66.469998, 38.035313 ], [ 66.439438, 38.035457 ], [ 66.408329, 38.042847 ], [ 66.317706, 38.076403 ], [ 66.31305, 38.078797 ], [ 66.27353, 38.114158 ], [ 66.245522, 38.154041 ], [ 66.235436, 38.159175 ], [ 66.198203, 38.160769 ], [ 66.133565, 38.175294 ], [ 66.096016, 38.199078 ], [ 66.094116, 38.20198 ], [ 66.090459, 38.202599 ], [ 66.071605, 38.214542 ], [ 66.043493, 38.226195 ], [ 65.97745, 38.234567 ], [ 65.953486, 38.243698 ], [ 65.936731, 38.258831 ], [ 65.91504, 38.274741 ], [ 65.895531, 38.278703 ], [ 65.87242, 38.278668 ], [ 65.853738, 38.274576 ], [ 65.842885, 38.275339 ], [ 65.81436, 38.266192 ], [ 65.801274, 38.257902 ], [ 65.785118, 38.259174 ], [ 65.639368, 38.275474 ], [ 65.56184, 38.289586 ], [ 65.539742, 38.289316 ], [ 65.537888, 38.290884 ], [ 65.537888, 38.296937 ], [ 65.541714, 38.300234 ], [ 65.319615, 38.420303 ], [ 65.171182, 38.502563 ], [ 65.15574, 38.520333 ], [ 65.037461, 38.60574 ], [ 65.031048, 38.607699 ], [ 64.99614, 38.611279 ], [ 64.976661, 38.622672 ], [ 64.963399, 38.626736 ], [ 64.91219, 38.659096 ], [ 64.897027, 38.670817 ], [ 64.86298, 38.681417 ], [ 64.820451, 38.68303 ], [ 64.797311, 38.696258 ], [ 64.784053, 38.709292 ], [ 64.716819, 38.752148 ], [ 64.700683, 38.756431 ], [ 64.685361, 38.764326 ], [ 64.664076, 38.77077 ], [ 64.524809, 38.846787 ], [ 64.384386, 38.954153 ], [ 64.474442, 39.030951 ], [ 64.521313, 39.056066 ], [ 64.658927, 39.099112 ], [ 64.712619, 39.114254 ], [ 64.878965, 39.161176 ], [ 64.884701, 39.163785 ], [ 64.889352, 39.167868 ], [ 64.891678, 39.176239 ], [ 64.890903, 39.182027 ], [ 64.888112, 39.187014 ], [ 64.884701, 39.190993 ], [ 64.852714, 39.221508 ], [ 64.845737, 39.22944 ], [ 64.840931, 39.238045 ], [ 64.839381, 39.242669 ], [ 64.838296, 39.247476 ], [ 64.838296, 39.252643 ], [ 64.839381, 39.258121 ], [ 64.845427, 39.266596 ], [ 64.855091, 39.27675 ], [ 64.931262, 39.341191 ], [ 64.937153, 39.344782 ], [ 64.944594, 39.347521 ], [ 64.956842, 39.348632 ], [ 64.965988, 39.34809 ], [ 64.977822, 39.351448 ], [ 64.99038, 39.358993 ], [ 65.090632, 39.436663 ], [ 65.137813, 39.464258 ], [ 65.236618, 39.482319 ], [ 65.255583, 39.491802 ] ] ] } },
    14: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZSU", "name": "Surkhandarya" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 66.659115, 37.978124 ], [ 66.666246, 37.981765 ], [ 66.681904, 38.00613 ], [ 66.68733, 38.019669 ], [ 66.692446, 38.058892 ], [ 66.698492, 38.075454 ], [ 66.706761, 38.083981 ], [ 66.828717, 38.173898 ], [ 66.836159, 38.184543 ], [ 66.84267, 38.196532 ], [ 66.848096, 38.208882 ], [ 66.851816, 38.220381 ], [ 66.862513, 38.24025 ], [ 66.877913, 38.260714 ], [ 66.88706, 38.269189 ], [ 66.895121, 38.273891 ], [ 66.93145, 38.278568 ], [ 66.943077, 38.281281 ], [ 67.000179, 38.306422 ], [ 67.110974, 38.376263 ], [ 67.123686, 38.387218 ], [ 67.126477, 38.392541 ], [ 67.134228, 38.416286 ], [ 67.14508, 38.467652 ], [ 67.150558, 38.484757 ], [ 67.157069, 38.497495 ], [ 67.16265, 38.503723 ], [ 67.200012, 38.527984 ], [ 67.217892, 38.543333 ], [ 67.228744, 38.557698 ], [ 67.236961, 38.572323 ], [ 67.276545, 38.579842 ], [ 67.291738, 38.58612 ], [ 67.301195, 38.592115 ], [ 67.319023, 38.606274 ], [ 67.329152, 38.616997 ], [ 67.38889, 38.708077 ], [ 67.394316, 38.713193 ], [ 67.400672, 38.71805 ], [ 67.410129, 38.723761 ], [ 67.424546, 38.728851 ], [ 67.437155, 38.731383 ], [ 67.451573, 38.731874 ], [ 67.467386, 38.730349 ], [ 67.482114, 38.727042 ], [ 67.488625, 38.72482 ], [ 67.493948, 38.722288 ], [ 67.498134, 38.719652 ], [ 67.516272, 38.704408 ], [ 67.521543, 38.701927 ], [ 67.528519, 38.701101 ], [ 67.532085, 38.704563 ], [ 67.53379, 38.709291 ], [ 67.533945, 38.726784 ], [ 67.536426, 38.734173 ], [ 67.541128, 38.742442 ], [ 67.551515, 38.75487 ], [ 67.556631, 38.762854 ], [ 67.559422, 38.770295 ], [ 67.559422, 38.776031 ], [ 67.558802, 38.781561 ], [ 67.555701, 38.791793 ], [ 67.553686, 38.796599 ], [ 67.552291, 38.801663 ], [ 67.55167, 38.806831 ], [ 67.55167, 38.81205 ], [ 67.552135, 38.817321 ], [ 67.553376, 38.823367 ], [ 67.555391, 38.829103 ], [ 67.556476, 38.835408 ], [ 67.556786, 38.841144 ], [ 67.555391, 38.84626 ], [ 67.553376, 38.850549 ], [ 67.528984, 38.885069 ], [ 67.523248, 38.920751 ], [ 67.515807, 38.944032 ], [ 67.515652, 38.952455 ], [ 67.518287, 38.959896 ], [ 67.524179, 38.966976 ], [ 67.531465, 38.972815 ], [ 67.537511, 38.976898 ], [ 67.543402, 38.979637 ], [ 67.555081, 38.983435 ], [ 67.567793, 38.985967 ], [ 67.640399, 38.988473 ], [ 67.658434, 38.994158 ], [ 67.673254, 39.002978 ], [ 67.690524, 38.989611 ], [ 67.818372, 38.97341 ], [ 67.845243, 38.973772 ], [ 67.921156, 38.993797 ], [ 67.921259, 38.993797 ], [ 67.921259, 38.993874 ], [ 67.921518, 38.993874 ], [ 67.93485, 38.999068 ], [ 67.948906, 39.002013 ], [ 67.963272, 39.00191 ], [ 67.980119, 38.997388 ], [ 67.987974, 38.993771 ], [ 68.003373, 38.982118 ], [ 68.019806, 38.979689 ], [ 68.036446, 38.984392 ], [ 68.053086, 38.993952 ], [ 68.060941, 38.995528 ], [ 68.069106, 38.996096 ], [ 68.077271, 38.995528 ], [ 68.085074, 38.993952 ], [ 68.08528, 38.993952 ], [ 68.085435, 38.993797 ], [ 68.085642, 38.993771 ], [ 68.100938, 38.979276 ], [ 68.134683, 38.920985 ], [ 68.153386, 38.899403 ], [ 68.163725, 38.887472 ], [ 68.173699, 38.867319 ], [ 68.172562, 38.845278 ], [ 68.163674, 38.828639 ], [ 68.151271, 38.815125 ], [ 68.135975, 38.804506 ], [ 68.119025, 38.796703 ], [ 68.095616, 38.792931 ], [ 68.077891, 38.793395 ], [ 68.066729, 38.787969 ], [ 68.063318, 38.766317 ], [ 68.066315, 38.756214 ], [ 68.072206, 38.747352 ], [ 68.07665, 38.738102 ], [ 68.075927, 38.726862 ], [ 68.070759, 38.720739 ], [ 68.04549, 38.706708 ], [ 68.037635, 38.691645 ], [ 68.040322, 38.673351 ], [ 68.053706, 38.635937 ], [ 68.055877, 38.615732 ], [ 68.052518, 38.558268 ], [ 68.055153, 38.536305 ], [ 68.062594, 38.523076 ], [ 68.086882, 38.494034 ], [ 68.092567, 38.478789 ], [ 68.094634, 38.446982 ], [ 68.098045, 38.432436 ], [ 68.107553, 38.418276 ], [ 68.146724, 38.388743 ], [ 68.183724, 38.335491 ], [ 68.200829, 38.321693 ], [ 68.25266, 38.298749 ], [ 68.332035, 38.24299 ], [ 68.35622, 38.212604 ], [ 68.360664, 38.174053 ], [ 68.344334, 38.115452 ], [ 68.31953, 38.06021 ], [ 68.280566, 38.013236 ], [ 68.268577, 37.994194 ], [ 68.268473, 37.994116 ], [ 68.268473, 37.993987 ], [ 68.26837, 37.993909 ], [ 68.268267, 37.993832 ], [ 68.260774, 37.976779 ], [ 68.256226, 37.96156 ], [ 68.248733, 37.948951 ], [ 68.238024, 37.942716 ], [ 68.233023, 37.939804 ], [ 68.217727, 37.936084 ], [ 68.171115, 37.931071 ], [ 68.139954, 37.922699 ], [ 68.122229, 37.908333 ], [ 68.079648, 37.806272 ], [ 68.050192, 37.760409 ], [ 67.977328, 37.679742 ], [ 67.923378, 37.638789 ], [ 67.871857, 37.586802 ], [ 67.829224, 37.527943 ], [ 67.801215, 37.466448 ], [ 67.797339, 37.424435 ], [ 67.817183, 37.345422 ], [ 67.820645, 37.303306 ], [ 67.815426, 37.267339 ], [ 67.803954, 37.233439 ], [ 67.785092, 37.20357 ], [ 67.780544, 37.188868 ], [ 67.775997, 37.207549 ], [ 67.764266, 37.220882 ], [ 67.746593, 37.229408 ], [ 67.725871, 37.233542 ], [ 67.690162, 37.23225 ], [ 67.677502, 37.233542 ], [ 67.666443, 37.238012 ], [ 67.644635, 37.251216 ], [ 67.633163, 37.254058 ], [ 67.621794, 37.252921 ], [ 67.602726, 37.24827 ], [ 67.592287, 37.247185 ], [ 67.586034, 37.242612 ], [ 67.579937, 37.232664 ], [ 67.572185, 37.223155 ], [ 67.561385, 37.2199 ], [ 67.545003, 37.231527 ], [ 67.526141, 37.272894 ], [ 67.503145, 37.281963 ], [ 67.482371, 37.277364 ], [ 67.463975, 37.266279 ], [ 67.431108, 37.239769 ], [ 67.411265, 37.22791 ], [ 67.391163, 37.21959 ], [ 67.36951, 37.21468 ], [ 67.345222, 37.213027 ], [ 67.319591, 37.208428 ], [ 67.281454, 37.188661 ], [ 67.259129, 37.185147 ], [ 67.236753, 37.192408 ], [ 67.225281, 37.207704 ], [ 67.217995, 37.226256 ], [ 67.20797, 37.243464 ], [ 67.187816, 37.258244 ], [ 67.143477, 37.27186 ], [ 67.123324, 37.281963 ], [ 67.113918, 37.297182 ], [ 67.097382, 37.34059 ], [ 67.085083, 37.349633 ], [ 67.064102, 37.354569 ], [ 67.024105, 37.377487 ], [ 67.005915, 37.384386 ], [ 66.957649, 37.385213 ], [ 66.865768, 37.367927 ], [ 66.734975, 37.363302 ], [ 66.724433, 37.36015 ], [ 66.704744, 37.346533 ], [ 66.694099, 37.343406 ], [ 66.667021, 37.344311 ], [ 66.65467, 37.346145 ], [ 66.588576, 37.368469 ], [ 66.564598, 37.370692 ], [ 66.539018, 37.36909 ], [ 66.538773, 37.369028 ], [ 66.521635, 37.375126 ], [ 66.520726, 37.379465 ], [ 66.525767, 37.385556 ], [ 66.526179, 37.396626 ], [ 66.530762, 37.402976 ], [ 66.55645, 37.418392 ], [ 66.582337, 37.430886 ], [ 66.57991, 37.438514 ], [ 66.584419, 37.443696 ], [ 66.584764, 37.470107 ], [ 66.572738, 37.506115 ], [ 66.531876, 37.529226 ], [ 66.527658, 37.537888 ], [ 66.525621, 37.558161 ], [ 66.530387, 37.577591 ], [ 66.538803, 37.662009 ], [ 66.544783, 37.70184 ], [ 66.538498, 37.728054 ], [ 66.539352, 37.749683 ], [ 66.548225, 37.791774 ], [ 66.564218, 37.822449 ], [ 66.580146, 37.841735 ], [ 66.596757, 37.85476 ], [ 66.608344, 37.876645 ], [ 66.624327, 37.892204 ], [ 66.669762, 37.911912 ], [ 66.679161, 37.918695 ], [ 66.684303, 37.9329 ], [ 66.683708, 37.948273 ], [ 66.676629, 37.961968 ], [ 66.659115, 37.978124 ] ] ] } },
    15: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZQR", "name": "Karakalpakstan" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 62.028321, 43.480922 ], [ 62.135205, 43.347742 ], [ 62.185331, 43.313946 ], [ 62.455806, 43.259272 ], [ 62.470999, 43.252761 ], [ 62.470844, 43.242761 ], [ 62.465417, 43.231212 ], [ 62.193083, 42.855059 ], [ 61.936716, 42.492187 ], [ 61.881629, 42.396896 ], [ 61.85915, 42.189311 ], [ 61.85915, 42.177012 ], [ 61.862095, 42.167426 ], [ 61.976145, 42.011183 ], [ 61.995885, 41.980022 ], [ 61.9917, 41.974648 ], [ 61.979711, 41.965139 ], [ 61.76484, 41.874731 ], [ 61.743084, 41.861011 ], [ 61.743704, 41.847782 ], [ 61.751611, 41.834191 ], [ 62.18037, 41.392306 ], [ 62.464642, 41.094675 ], [ 62.465418, 41.080955 ], [ 62.239488, 40.998971 ], [ 62.186727, 40.985871 ], [ 62.171689, 40.989643 ], [ 62.157581, 40.995715 ], [ 62.153499, 40.998893 ], [ 62.034023, 41.142735 ], [ 61.8638, 41.28456 ], [ 61.804838, 41.318589 ], [ 61.759672, 41.339337 ], [ 61.711303, 41.35484 ], [ 61.520256, 41.389567 ], [ 61.466099, 41.38967 ], [ 61.44641, 41.386286 ], [ 61.42822, 41.379438 ], [ 61.412872, 41.37024 ], [ 61.396904, 41.355796 ], [ 61.357165, 41.298151 ], [ 61.339646, 41.288075 ], [ 61.314222, 41.28624 ], [ 61.29045, 41.293242 ], [ 61.283991, 41.296162 ], [ 61.268746, 41.301872 ], [ 61.256912, 41.331043 ], [ 61.2442, 41.345539 ], [ 61.191128, 41.390006 ], [ 61.172266, 41.398352 ], [ 61.114389, 41.406775 ], [ 61.091806, 41.413596 ], [ 61.060955, 41.434629 ], [ 61.02504, 41.465066 ], [ 61.01331, 41.470802 ], [ 61.000804, 41.474807 ], [ 60.975379, 41.478812 ], [ 60.738495, 41.639526 ], [ 60.706093, 41.667147 ], [ 60.680307, 41.701589 ], [ 60.663305, 41.740424 ], [ 60.651988, 41.756883 ], [ 60.636227, 41.763653 ], [ 60.588271, 41.76479 ], [ 60.567342, 41.768769 ], [ 60.549979, 41.777321 ], [ 60.535923, 41.790731 ], [ 60.507914, 41.828455 ], [ 60.496907, 41.854035 ], [ 60.46988, 41.885092 ], [ 60.461819, 41.900854 ], [ 60.462439, 41.945993 ], [ 60.458977, 41.966638 ], [ 60.444766, 41.975319 ], [ 60.395311, 41.97935 ], [ 60.345133, 41.988962 ], [ 60.334436, 41.993251 ], [ 60.313094, 42.005576 ], [ 60.296868, 42.003431 ], [ 60.290977, 42.000847 ], [ 60.271908, 41.98829 ], [ 60.220852, 41.961522 ], [ 60.200233, 41.955062 ], [ 60.173051, 41.954287 ], [ 60.157393, 41.951962 ], [ 60.150572, 41.947931 ], [ 60.147626, 41.943357 ], [ 60.149176, 41.938887 ], [ 60.151192, 41.934392 ], [ 60.162819, 41.91739 ], [ 60.164834, 41.906331 ], [ 60.152897, 41.884007 ], [ 60.142617, 41.875448 ], [ 60.141144, 41.874221 ], [ 60.133453, 41.883019 ], [ 60.118222, 41.900441 ], [ 60.088766, 41.919355 ], [ 60.03186, 41.935428 ], [ 59.986916, 41.948122 ], [ 59.983656, 41.949043 ], [ 59.966233, 41.948574 ], [ 59.931773, 41.947647 ], [ 59.91751, 41.952428 ], [ 59.906451, 41.966613 ], [ 59.908002, 41.979816 ], [ 59.919267, 41.98966 ], [ 59.936941, 41.993484 ], [ 59.937251, 41.993407 ], [ 59.937561, 41.993407 ], [ 59.937871, 41.993407 ], [ 59.997195, 42.010615 ], [ 59.994095, 42.050096 ], [ 59.974458, 42.09924 ], [ 59.979307, 42.123678 ], [ 59.983656, 42.145594 ], [ 60.000089, 42.154508 ], [ 60.020553, 42.160787 ], [ 60.036986, 42.169701 ], [ 60.040397, 42.18647 ], [ 60.028201, 42.199518 ], [ 60.013068, 42.206223 ], [ 60.00505, 42.209776 ], [ 59.995533, 42.212555 ], [ 59.988254, 42.21468 ], [ 59.960712, 42.222721 ], [ 59.925675, 42.246285 ], [ 59.897873, 42.278532 ], [ 59.896265, 42.279842 ], [ 59.893506, 42.28209 ], [ 59.89296, 42.282534 ], [ 59.866351, 42.304215 ], [ 59.820979, 42.307987 ], [ 59.77633, 42.303956 ], [ 59.689514, 42.309796 ], [ 59.550844, 42.293945 ], [ 59.53336, 42.291947 ], [ 59.528862, 42.291433 ], [ 59.518732, 42.290275 ], [ 59.51655, 42.290026 ], [ 59.478157, 42.285637 ], [ 59.426481, 42.286774 ], [ 59.401469, 42.293905 ], [ 59.361575, 42.32579 ], [ 59.338114, 42.33181 ], [ 59.287161, 42.335944 ], [ 59.258429, 42.347545 ], [ 59.2452, 42.365348 ], [ 59.233314, 42.441726 ], [ 59.223806, 42.460872 ], [ 59.209646, 42.477718 ], [ 59.146084, 42.526759 ], [ 59.145189, 42.527177 ], [ 59.122003, 42.537999 ], [ 59.096475, 42.535984 ], [ 59.067433, 42.525571 ], [ 59.064749, 42.525027 ], [ 59.038597, 42.519731 ], [ 59.009245, 42.518465 ], [ 58.9647, 42.524382 ], [ 58.89442, 42.547843 ], [ 58.827448, 42.593758 ], [ 58.621649, 42.772695 ], [ 58.612267, 42.780852 ], [ 58.587876, 42.791188 ], [ 58.569375, 42.768502 ], [ 58.555733, 42.683597 ], [ 58.536943, 42.657796 ], [ 58.534546, 42.654503 ], [ 58.493204, 42.64546 ], [ 58.441838, 42.647837 ], [ 58.390575, 42.656674 ], [ 58.302146, 42.683101 ], [ 58.282675, 42.68892 ], [ 58.258283, 42.689514 ], [ 58.239576, 42.685148 ], [ 58.186556, 42.661196 ], [ 58.148833, 42.649 ], [ 58.130643, 42.638845 ], [ 58.121341, 42.624247 ], [ 58.127025, 42.604997 ], [ 58.145732, 42.592569 ], [ 58.270996, 42.549032 ], [ 58.306239, 42.528671 ], [ 58.337038, 42.493712 ], [ 58.363703, 42.447074 ], [ 58.437911, 42.3577 ], [ 58.478218, 42.322327 ], [ 58.489587, 42.314524 ], [ 58.494135, 42.305713 ], [ 58.490621, 42.297574 ], [ 58.478218, 42.291993 ], [ 58.473734, 42.291489 ], [ 58.413933, 42.284759 ], [ 58.398322, 42.287723 ], [ 58.397603, 42.287859 ], [ 58.395676, 42.290061 ], [ 58.385821, 42.301321 ], [ 58.386131, 42.31685 ], [ 58.391505, 42.33398 ], [ 58.394916, 42.352248 ], [ 58.39009, 42.369028 ], [ 58.382788, 42.389712 ], [ 58.358949, 42.413407 ], [ 58.325049, 42.431856 ], [ 58.225821, 42.466549 ], [ 58.224288, 42.466774 ], [ 58.203816, 42.469502 ], [ 58.194234, 42.468311 ], [ 58.18573, 42.467254 ], [ 58.149453, 42.455678 ], [ 58.134783, 42.454674 ], [ 58.133226, 42.454567 ], [ 58.117207, 42.461518 ], [ 58.094366, 42.48671 ], [ 58.079896, 42.497304 ], [ 58.060879, 42.502265 ], [ 58.038245, 42.502782 ], [ 58.037331, 42.502655 ], [ 58.016024, 42.499707 ], [ 57.997731, 42.493428 ], [ 57.987298, 42.483629 ], [ 57.987085, 42.483429 ], [ 57.982269, 42.47704 ], [ 57.9783, 42.471776 ], [ 57.952772, 42.450072 ], [ 57.93933, 42.445638 ], [ 57.92559, 42.441106 ], [ 57.908641, 42.430435 ], [ 57.912362, 42.413097 ], [ 57.914325, 42.40395 ], [ 57.935719, 42.369818 ], [ 57.937476, 42.354237 ], [ 57.928794, 42.330931 ], [ 57.888073, 42.261582 ], [ 57.873707, 42.249645 ], [ 57.861118, 42.246616 ], [ 57.844548, 42.24263 ], [ 57.835467, 42.240446 ], [ 57.827302, 42.227372 ], [ 57.834537, 42.211636 ], [ 57.847352, 42.200914 ], [ 57.850453, 42.191431 ], [ 57.828439, 42.179545 ], [ 57.809215, 42.176393 ], [ 57.807598, 42.176449 ], [ 57.757097, 42.178187 ], [ 57.740899, 42.178744 ], [ 57.721572, 42.175334 ], [ 57.666278, 42.155103 ], [ 57.642077, 42.151499 ], [ 57.631834, 42.149974 ], [ 57.619769, 42.148178 ], [ 57.478279, 42.166523 ], [ 57.382264, 42.163629 ], [ 57.288213, 42.129419 ], [ 57.207805, 42.07056 ], [ 57.152924, 41.993743 ], [ 57.152924, 41.993484 ], [ 57.115511, 41.952092 ], [ 57.074376, 41.928786 ], [ 57.052402, 41.92108 ], [ 57.021384, 41.910204 ], [ 56.978361, 41.895118 ], [ 56.950146, 41.86605 ], [ 56.949836, 41.8275 ], [ 56.968611, 41.76047 ], [ 56.971954, 41.748538 ], [ 56.971461, 41.741057 ], [ 56.969473, 41.710892 ], [ 56.961618, 41.678723 ], [ 56.960481, 41.647201 ], [ 56.978361, 41.611466 ], [ 57.000582, 41.584026 ], [ 57.012054, 41.557826 ], [ 57.015775, 41.528991 ], [ 57.015052, 41.493644 ], [ 57.019599, 41.465946 ], [ 57.033035, 41.438247 ], [ 57.036563, 41.433724 ], [ 57.052259, 41.413597 ], [ 57.07417, 41.394994 ], [ 57.088329, 41.387294 ], [ 57.103625, 41.38161 ], [ 57.122137, 41.378194 ], [ 57.153751, 41.37236 ], [ 57.158655, 41.369543 ], [ 57.161399, 41.367967 ], [ 57.159229, 41.361146 ], [ 57.147964, 41.351069 ], [ 57.126673, 41.339597 ], [ 57.080061, 41.322027 ], [ 57.060778, 41.305318 ], [ 57.06032, 41.304922 ], [ 57.029521, 41.262599 ], [ 57.020043, 41.258442 ], [ 57.010194, 41.254124 ], [ 56.919319, 41.268412 ], [ 56.887928, 41.273348 ], [ 56.793463, 41.288334 ], [ 56.570014, 41.29748 ], [ 56.533721, 41.298969 ], [ 56.326825, 41.307454 ], [ 56.140686, 41.315154 ], [ 56.031977, 41.319551 ], [ 56.000598, 41.32082 ], [ 56.000598, 41.324351 ], [ 56.000021, 43.605728 ], [ 55.999818, 44.41045 ], [ 55.99967, 45.00022 ], [ 56.694968, 45.158349 ], [ 56.977537, 45.222612 ], [ 57.51548, 45.344955 ], [ 57.603233, 45.363899 ], [ 57.728186, 45.390926 ], [ 57.853243, 45.417901 ], [ 57.9783, 45.444927 ], [ 58.036075, 45.457071 ], [ 58.093849, 45.469112 ], [ 58.151623, 45.481204 ], [ 58.209604, 45.493348 ], [ 58.269755, 45.505544 ], [ 58.33001, 45.517843 ], [ 58.390265, 45.530142 ], [ 58.450416, 45.542389 ], [ 58.531445, 45.558719 ], [ 58.554906, 45.557169 ], [ 58.582191, 45.548694 ], [ 58.588767, 45.545574 ], [ 58.580288, 45.538758 ], [ 58.57403, 45.532132 ], [ 58.571454, 45.524033 ], [ 58.570349, 45.507468 ], [ 58.56446, 45.489063 ], [ 58.557465, 45.480228 ], [ 58.553784, 45.470657 ], [ 58.552552, 45.464575 ], [ 58.553416, 45.449307 ], [ 58.549013, 45.43252 ], [ 58.549176, 45.42462 ], [ 58.548291, 45.422776 ], [ 58.549367, 45.40771 ], [ 58.546054, 45.402925 ], [ 58.532434, 45.395195 ], [ 58.523599, 45.389673 ], [ 58.499304, 45.364273 ], [ 58.489858, 45.360817 ], [ 58.487399, 45.358379 ], [ 58.469119, 45.348444 ], [ 58.455988, 45.328925 ], [ 58.417007, 45.290684 ], [ 58.412885, 45.283619 ], [ 58.410236, 45.275671 ], [ 58.407152, 45.252121 ], [ 58.410037, 45.23433 ], [ 58.403411, 45.223287 ], [ 58.386478, 45.202673 ], [ 58.37838, 45.174696 ], [ 58.37249, 45.130523 ], [ 58.357029, 45.103283 ], [ 58.326844, 45.076779 ], [ 58.312075, 45.06201 ], [ 58.311666, 45.059033 ], [ 58.304942, 45.049539 ], [ 58.299788, 45.028925 ], [ 58.300157, 45.015631 ], [ 58.2858, 44.988064 ], [ 58.281383, 44.963769 ], [ 58.262977, 44.945364 ], [ 58.236509, 44.908196 ], [ 58.235016, 44.901275 ], [ 58.227638, 44.887938 ], [ 58.222485, 44.869533 ], [ 58.221012, 44.84671 ], [ 58.229111, 44.796647 ], [ 58.237946, 44.765725 ], [ 58.256351, 44.731123 ], [ 58.281383, 44.689159 ], [ 58.316163, 44.630032 ], [ 58.321139, 44.603021 ], [ 58.313776, 44.570627 ], [ 58.302733, 44.56032 ], [ 58.289481, 44.563265 ], [ 58.276229, 44.564737 ], [ 58.262241, 44.557375 ], [ 58.246044, 44.53897 ], [ 58.236776, 44.524463 ], [ 58.233528, 44.506576 ], [ 58.235001, 44.46093 ], [ 58.244572, 44.441788 ], [ 58.260032, 44.431481 ], [ 58.27807, 44.426696 ], [ 58.304574, 44.423751 ], [ 58.344299, 44.423487 ], [ 58.364275, 44.424721 ], [ 58.416847, 44.443997 ], [ 58.483107, 44.504367 ], [ 58.524336, 44.569154 ], [ 58.54495, 44.657501 ], [ 58.578816, 44.756155 ], [ 58.562619, 44.772351 ], [ 58.595013, 44.772351 ], [ 58.61121, 44.790021 ], [ 58.624462, 44.817997 ], [ 58.622989, 44.854808 ], [ 58.609737, 44.876895 ], [ 58.578816, 44.896037 ], [ 58.567036, 44.915178 ], [ 58.568877, 44.929535 ], [ 58.588019, 44.950149 ], [ 58.592436, 44.973708 ], [ 58.588019, 44.989905 ], [ 58.568877, 45.004629 ], [ 58.54679, 45.007574 ], [ 58.643971, 45.072362 ], [ 58.670475, 45.103283 ], [ 58.682255, 45.129787 ], [ 58.683727, 45.148929 ], [ 58.663113, 45.204881 ], [ 58.641027, 45.243165 ], [ 58.629247, 45.263779 ], [ 58.629247, 45.302063 ], [ 58.638082, 45.353598 ], [ 58.661641, 45.439 ], [ 58.671948, 45.459614 ], [ 58.710231, 45.486118 ], [ 58.711573, 45.487223 ], [ 58.743112, 45.472264 ], [ 58.84047, 45.426014 ], [ 58.967904, 45.365449 ], [ 59.055132, 45.324023 ], [ 59.12035, 45.29305 ], [ 59.292432, 45.211247 ], [ 59.479397, 45.122467 ], [ 59.579378, 45.07495 ], [ 60.726762, 44.472392 ], [ 60.971402, 44.343917 ], [ 60.992637, 44.332765 ], [ 61.090381, 44.281435 ], [ 61.093149, 44.259419 ], [ 61.102864, 44.236061 ], [ 61.161672, 44.168106 ], [ 61.276394, 44.078861 ], [ 61.331171, 44.036176 ], [ 61.386051, 43.99344 ], [ 61.456124, 43.935175 ], [ 61.513485, 43.887245 ], [ 61.571053, 43.839289 ], [ 61.628517, 43.791359 ], [ 61.685981, 43.743429 ], [ 61.742102, 43.696533 ], [ 61.798326, 43.649585 ], [ 61.85455, 43.602689 ], [ 61.91067, 43.555818 ], [ 61.985704, 43.493341 ], [ 62.005962, 43.486985 ], [ 62.026115, 43.480629 ], [ 62.028321, 43.480922 ] ] ] } },
    16: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZNW", "name": "Navoi" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 66.75789, 41.15314 ], [ 66.757507, 41.149737 ], [ 66.635189, 41.112168 ], [ 66.626817, 41.096562 ], [ 66.61426, 41.084159 ], [ 66.631313, 40.944736 ], [ 66.633018, 40.939259 ], [ 66.635499, 40.934659 ], [ 66.64108, 40.926133 ], [ 66.649503, 40.918381 ], [ 66.655549, 40.9151 ], [ 66.669347, 40.909286 ], [ 66.759781, 40.890579 ], [ 66.765258, 40.887246 ], [ 66.768824, 40.883448 ], [ 66.770839, 40.878875 ], [ 66.771305, 40.871562 ], [ 66.770995, 40.861718 ], [ 66.768514, 40.84376 ], [ 66.768514, 40.826966 ], [ 66.770219, 40.822366 ], [ 66.779366, 40.804926 ], [ 66.801225, 40.775212 ], [ 66.773165, 40.721907 ], [ 66.620151, 40.4951 ], [ 66.600617, 40.509724 ], [ 66.589248, 40.521196 ], [ 66.585838, 40.525847 ], [ 66.583667, 40.530136 ], [ 66.582582, 40.533754 ], [ 66.582737, 40.538249 ], [ 66.588628, 40.554088 ], [ 66.589455, 40.563519 ], [ 66.588008, 40.567938 ], [ 66.585218, 40.57202 ], [ 66.551111, 40.602018 ], [ 66.522999, 40.620932 ], [ 66.511682, 40.625634 ], [ 66.502845, 40.626616 ], [ 66.493389, 40.623722 ], [ 66.421197, 40.586205 ], [ 66.397787, 40.57804 ], [ 66.377944, 40.575973 ], [ 66.361665, 40.577756 ], [ 66.34394, 40.583208 ], [ 66.325802, 40.590985 ], [ 66.305131, 40.602742 ], [ 66.290249, 40.608219 ], [ 66.276141, 40.609563 ], [ 66.262963, 40.606204 ], [ 66.250665, 40.599253 ], [ 66.239037, 40.589151 ], [ 66.229891, 40.577782 ], [ 66.221674, 40.565173 ], [ 66.208807, 40.537939 ], [ 66.205861, 40.522178 ], [ 66.205551, 40.505797 ], [ 66.214388, 40.488382 ], [ 66.221364, 40.4797 ], [ 66.22586, 40.471639 ], [ 66.22524, 40.46399 ], [ 66.217333, 40.452363 ], [ 66.210047, 40.447221 ], [ 66.190616, 40.440038 ], [ 66.185656, 40.43407 ], [ 66.185345, 40.426628 ], [ 66.196198, 40.402961 ], [ 66.199815, 40.3672 ], [ 66.192787, 40.345393 ], [ 66.179299, 40.322862 ], [ 66.178059, 40.316454 ], [ 66.18054, 40.309039 ], [ 66.184105, 40.304052 ], [ 66.199505, 40.29413 ], [ 66.198265, 40.28457 ], [ 66.193304, 40.277645 ], [ 66.168292, 40.250102 ], [ 66.159611, 40.237389 ], [ 66.153409, 40.224418 ], [ 66.145658, 40.201732 ], [ 66.119716, 40.155017 ], [ 66.117701, 40.147343 ], [ 66.119561, 40.141943 ], [ 66.123902, 40.140083 ], [ 66.131189, 40.139592 ], [ 66.150154, 40.142227 ], [ 66.158991, 40.142563 ], [ 66.168447, 40.141426 ], [ 66.175734, 40.138584 ], [ 66.181625, 40.132641 ], [ 66.18426, 40.126285 ], [ 66.184105, 40.11843 ], [ 66.178989, 40.110188 ], [ 66.169998, 40.101764 ], [ 66.105454, 40.055747 ], [ 66.094343, 40.051225 ], [ 65.878594, 40.015749 ], [ 65.836323, 40.022441 ], [ 65.792915, 40.043732 ], [ 65.771986, 40.038383 ], [ 65.752452, 40.046135 ], [ 65.733487, 40.057659 ], [ 65.692921, 40.068795 ], [ 65.677263, 40.081533 ], [ 65.65158, 40.10918 ], [ 65.641503, 40.110653 ], [ 65.638195, 40.111919 ], [ 65.618352, 40.114864 ], [ 65.527091, 40.14618 ], [ 65.512518, 40.146852 ], [ 65.506007, 40.144372 ], [ 65.500116, 40.139462 ], [ 65.49407, 40.130006 ], [ 65.491279, 40.123598 ], [ 65.490504, 40.118378 ], [ 65.490659, 40.106183 ], [ 65.488799, 40.085874 ], [ 65.487404, 40.080706 ], [ 65.485543, 40.076107 ], [ 65.483683, 40.072748 ], [ 65.480427, 40.06802 ], [ 65.454796, 40.038616 ], [ 65.454021, 40.032053 ], [ 65.457431, 40.028461 ], [ 65.464253, 40.027738 ], [ 65.47097, 40.026239 ], [ 65.476552, 40.023681 ], [ 65.480737, 40.019883 ], [ 65.481978, 40.015258 ], [ 65.481202, 40.009858 ], [ 65.477482, 40.001641 ], [ 65.461617, 39.975415 ], [ 65.458827, 39.969447 ], [ 65.441773, 39.917719 ], [ 65.435262, 39.90573 ], [ 65.42658, 39.901053 ], [ 65.413506, 39.897927 ], [ 65.384981, 39.897642 ], [ 65.357076, 39.900924 ], [ 65.327258, 39.911053 ], [ 65.293565, 39.925832 ], [ 65.286279, 39.926297 ], [ 65.280078, 39.924101 ], [ 65.274807, 39.917047 ], [ 65.272326, 39.911027 ], [ 65.268606, 39.893741 ], [ 65.260234, 39.887824 ], [ 65.252638, 39.883612 ], [ 65.192435, 39.871469 ], [ 65.143084, 39.866172 ], [ 65.13404, 39.864389 ], [ 65.127736, 39.861702 ], [ 65.123188, 39.858033 ], [ 65.121483, 39.853175 ], [ 65.129079, 39.84054 ], [ 65.158897, 39.814521 ], [ 65.17874, 39.800878 ], [ 65.186027, 39.794445 ], [ 65.19476, 39.785065 ], [ 65.224991, 39.700988 ], [ 65.226231, 39.693185 ], [ 65.225301, 39.678457 ], [ 65.222975, 39.669181 ], [ 65.22034, 39.661197 ], [ 65.190884, 39.609779 ], [ 65.189954, 39.603733 ], [ 65.202201, 39.57407 ], [ 65.255583, 39.491802 ], [ 65.236618, 39.482319 ], [ 65.137813, 39.464258 ], [ 65.135332, 39.492112 ], [ 65.133627, 39.499036 ], [ 65.123653, 39.52565 ], [ 65.117452, 39.536709 ], [ 65.113421, 39.542367 ], [ 65.097453, 39.559369 ], [ 65.079625, 39.573244 ], [ 65.064535, 39.579755 ], [ 65.040661, 39.586473 ], [ 65.021386, 39.595051 ], [ 65.013324, 39.615851 ], [ 65.010068, 39.637633 ], [ 65.009758, 39.653936 ], [ 65.001542, 39.676209 ], [ 64.983248, 39.699877 ], [ 64.863927, 39.743104 ], [ 64.854936, 39.754421 ], [ 64.839846, 39.756824 ], [ 64.796386, 39.741451 ], [ 64.777008, 39.742329 ], [ 64.763055, 39.747703 ], [ 64.759489, 39.756178 ], [ 64.754373, 39.765273 ], [ 64.752978, 39.771061 ], [ 64.705953, 39.79106 ], [ 64.678151, 39.805788 ], [ 64.605545, 39.883173 ], [ 64.590042, 39.907797 ], [ 64.60415, 39.933377 ], [ 64.620428, 39.961101 ], [ 64.652881, 39.992546 ], [ 64.656447, 39.996836 ], [ 64.664198, 40.003114 ], [ 64.672105, 40.016188 ], [ 64.733186, 40.037686 ], [ 64.751118, 40.047453 ], [ 64.768791, 40.060501 ], [ 64.782589, 40.075332 ], [ 64.830028, 40.149591 ], [ 64.845272, 40.159099 ], [ 64.854212, 40.159358 ], [ 64.861757, 40.16375 ], [ 64.867958, 40.167109 ], [ 64.874779, 40.168401 ], [ 64.9047, 40.171192 ], [ 64.90594, 40.174654 ], [ 64.901755, 40.181139 ], [ 64.886407, 40.196048 ], [ 64.856951, 40.218967 ], [ 64.845582, 40.233152 ], [ 64.844187, 40.237131 ], [ 64.844807, 40.239456 ], [ 64.849613, 40.240697 ], [ 64.858501, 40.247208 ], [ 64.87509, 40.284983 ], [ 64.85013, 40.304259 ], [ 64.844807, 40.323637 ], [ 64.845272, 40.332422 ], [ 64.846823, 40.341724 ], [ 64.849613, 40.351129 ], [ 64.858811, 40.359759 ], [ 64.8754, 40.366761 ], [ 64.910178, 40.371283 ], [ 64.932657, 40.371438 ], [ 64.952036, 40.367252 ], [ 64.972241, 40.353765 ], [ 64.993635, 40.342809 ], [ 65.016425, 40.337073 ], [ 65.13404, 40.336143 ], [ 65.144789, 40.352989 ], [ 65.167423, 40.407921 ], [ 65.185923, 40.421151 ], [ 65.207782, 40.440658 ], [ 65.234447, 40.504143 ], [ 65.236153, 40.516623 ], [ 65.247522, 40.529516 ], [ 65.255273, 40.534735 ], [ 65.26473, 40.536802 ], [ 65.274652, 40.536389 ], [ 65.326948, 40.527862 ], [ 65.340281, 40.527501 ], [ 65.341056, 40.538999 ], [ 65.337335, 40.55091 ], [ 65.335165, 40.571012 ], [ 65.334855, 40.595791 ], [ 65.337025, 40.622069 ], [ 65.341831, 40.647597 ], [ 65.365447, 40.70966 ], [ 65.317491, 40.699118 ], [ 65.014409, 40.715086 ], [ 64.915759, 40.733483 ], [ 64.881136, 40.748521 ], [ 64.846512, 40.770406 ], [ 64.832405, 40.79981 ], [ 64.823258, 40.826346 ], [ 64.802019, 40.926934 ], [ 64.793286, 40.950757 ], [ 64.781193, 40.951971 ], [ 64.749102, 40.917503 ], [ 64.717115, 40.907012 ], [ 64.6735, 40.900139 ], [ 64.541156, 40.895644 ], [ 64.507463, 40.885928 ], [ 64.488395, 40.878229 ], [ 64.458009, 40.78888 ], [ 64.435478, 40.773015 ], [ 64.164694, 40.797484 ], [ 64.122319, 40.809008 ], [ 64.108521, 40.830609 ], [ 64.106816, 40.896419 ], [ 64.1017, 40.930474 ], [ 64.081236, 40.953521 ], [ 64.061651, 40.965975 ], [ 64.042892, 40.969799 ], [ 64.022738, 40.964528 ], [ 64.002998, 40.952462 ], [ 63.985015, 40.932799 ], [ 63.925587, 40.838645 ], [ 63.854222, 40.757952 ], [ 63.735056, 40.726248 ], [ 63.736606, 40.745782 ], [ 63.699967, 40.774049 ], [ 63.677333, 40.804306 ], [ 63.376421, 40.944685 ], [ 63.222322, 41.010314 ], [ 63.090909, 41.048942 ], [ 63.002491, 41.064212 ], [ 62.978564, 41.074599 ], [ 62.843741, 41.254614 ], [ 62.675534, 41.40383 ], [ 62.650833, 41.436799 ], [ 62.619052, 41.491783 ], [ 62.534767, 41.493282 ], [ 62.18037, 41.392306 ], [ 61.751611, 41.834191 ], [ 61.743704, 41.847782 ], [ 61.743084, 41.861011 ], [ 61.76484, 41.874731 ], [ 61.979711, 41.965139 ], [ 61.9917, 41.974648 ], [ 61.995885, 41.980022 ], [ 61.976145, 42.011183 ], [ 61.862095, 42.167426 ], [ 61.85915, 42.177012 ], [ 61.85915, 42.189311 ], [ 61.881629, 42.396896 ], [ 61.936716, 42.492187 ], [ 62.193083, 42.855059 ], [ 62.465417, 43.231212 ], [ 62.470844, 43.242761 ], [ 62.470999, 43.252761 ], [ 62.455806, 43.259272 ], [ 62.185331, 43.313946 ], [ 62.135205, 43.347742 ], [ 62.028321, 43.480922 ], [ 62.110916, 43.49192 ], [ 62.146056, 43.496674 ], [ 62.181403, 43.501429 ], [ 62.21675, 43.506157 ], [ 62.25189, 43.51086 ], [ 62.308424, 43.518404 ], [ 62.364854, 43.526001 ], [ 62.421285, 43.533597 ], [ 62.477716, 43.541116 ], [ 62.568976, 43.551891 ], [ 62.660237, 43.562717 ], [ 62.751497, 43.573491 ], [ 62.842861, 43.584292 ], [ 62.934122, 43.595066 ], [ 63.025383, 43.605841 ], [ 63.116643, 43.616615 ], [ 63.208007, 43.627467 ], [ 63.360349, 43.617416 ], [ 63.512691, 43.607262 ], [ 63.665137, 43.597288 ], [ 63.817376, 43.587237 ], [ 63.95592, 43.578065 ], [ 64.094671, 43.568918 ], [ 64.233164, 43.559719 ], [ 64.371657, 43.550599 ], [ 64.426744, 43.547033 ], [ 64.444211, 43.550676 ], [ 64.461574, 43.554319 ], [ 64.562136, 43.594808 ], [ 64.658358, 43.633591 ], [ 64.757628, 43.673614 ], [ 64.855038, 43.712914 ], [ 64.873073, 43.717824 ], [ 64.891005, 43.722785 ], [ 64.907025, 43.720976 ], [ 64.922941, 43.719116 ], [ 64.939581, 43.708289 ], [ 64.956531, 43.69736 ], [ 65.064224, 43.595557 ], [ 65.171918, 43.493677 ], [ 65.221734, 43.455282 ], [ 65.271447, 43.417015 ], [ 65.37449, 43.369912 ], [ 65.477378, 43.322809 ], [ 65.49717, 43.310019 ], [ 65.51691, 43.297229 ], [ 65.601866, 43.16902 ], [ 65.656126, 43.087216 ], [ 65.731057, 42.974226 ], [ 65.795239, 42.877203 ], [ 65.804024, 42.87648 ], [ 65.812603, 42.875756 ], [ 65.821922, 42.879453 ], [ 65.827189, 42.868133 ], [ 65.848833, 42.875665 ], [ 65.85907, 42.87923 ], [ 65.91604, 42.89906 ], [ 65.958908, 42.913879 ], [ 65.99996, 42.92807 ], [ 66.01703, 42.93396 ], [ 66.098815, 42.962058 ], [ 66.079718, 42.74194 ], [ 66.058169, 42.493609 ], [ 66.055689, 42.467254 ], [ 66.053208, 42.440873 ], [ 66.048144, 42.432269 ], [ 66.043183, 42.423665 ], [ 66.031401, 42.420254 ], [ 66.019618, 42.416843 ], [ 66.016724, 42.409945 ], [ 66.013727, 42.40302 ], [ 66.013159, 42.37287 ], [ 66.010058, 42.208226 ], [ 66.006493, 42.013431 ], [ 66.007526, 42.008057 ], [ 66.008663, 42.002657 ], [ 66.008712, 42.002627 ], [ 66.00863, 41.99901 ], [ 66.0084, 41.9884 ], [ 66.008298, 41.987694 ], [ 66.00774, 41.98384 ], [ 66.007442, 41.981827 ], [ 66.0069, 41.97817 ], [ 66.007534, 41.967252 ], [ 66.00757, 41.96664 ], [ 66.00855, 41.9435 ], [ 66.03245, 41.941336 ], [ 66.0504, 41.93971 ], [ 66.056996, 41.938887 ], [ 66.06586, 41.93778 ], [ 66.09569, 41.93512 ], [ 66.11369, 41.93393 ], [ 66.15535, 41.930227 ], [ 66.21777, 41.92468 ], [ 66.24335, 41.9225 ], [ 66.30605, 41.9171 ], [ 66.321964, 41.91564 ], [ 66.41463, 41.90713 ], [ 66.467835, 41.902477 ], [ 66.47821, 41.90157 ], [ 66.48209, 41.90118 ], [ 66.517265, 41.897646 ], [ 66.521448, 41.86711 ], [ 66.538863, 41.740761 ], [ 66.560285, 41.65768 ], [ 66.56193, 41.64267 ], [ 66.56914, 41.57551 ], [ 66.570096, 41.568624 ], [ 66.57059, 41.56507 ], [ 66.58012, 41.47753 ], [ 66.59315, 41.35481 ], [ 66.59964, 41.30931 ], [ 66.600011, 41.3032 ], [ 66.60153, 41.27815 ], [ 66.606101, 41.25141 ], [ 66.622417, 41.249551 ], [ 66.622601, 41.24953 ], [ 66.65503, 41.24835 ], [ 66.674261, 41.247314 ], [ 66.688208, 41.199192 ], [ 66.710739, 41.178625 ], [ 66.73296, 41.158057 ], [ 66.75789, 41.15314 ] ] ] } },
    17: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZXO", "name": "Khorezm" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 60.142617, 41.875448 ], [ 60.152897, 41.884007 ], [ 60.164834, 41.906331 ], [ 60.162819, 41.91739 ], [ 60.151192, 41.934392 ], [ 60.149176, 41.938887 ], [ 60.147626, 41.943357 ], [ 60.150572, 41.947931 ], [ 60.157393, 41.951962 ], [ 60.173051, 41.954287 ], [ 60.200233, 41.955062 ], [ 60.220852, 41.961522 ], [ 60.271908, 41.98829 ], [ 60.290977, 42.000847 ], [ 60.296868, 42.003431 ], [ 60.313094, 42.005576 ], [ 60.334436, 41.993251 ], [ 60.345133, 41.988962 ], [ 60.395311, 41.97935 ], [ 60.444766, 41.975319 ], [ 60.458977, 41.966638 ], [ 60.462439, 41.945993 ], [ 60.461819, 41.900854 ], [ 60.46988, 41.885092 ], [ 60.496907, 41.854035 ], [ 60.507914, 41.828455 ], [ 60.535923, 41.790731 ], [ 60.549979, 41.777321 ], [ 60.567342, 41.768769 ], [ 60.588271, 41.76479 ], [ 60.636227, 41.763653 ], [ 60.651988, 41.756883 ], [ 60.663305, 41.740424 ], [ 60.680307, 41.701589 ], [ 60.706093, 41.667147 ], [ 60.738495, 41.639526 ], [ 60.975379, 41.478812 ], [ 61.000804, 41.474807 ], [ 61.01331, 41.470802 ], [ 61.02504, 41.465066 ], [ 61.060955, 41.434629 ], [ 61.091806, 41.413596 ], [ 61.114389, 41.406775 ], [ 61.172266, 41.398352 ], [ 61.191128, 41.390006 ], [ 61.2442, 41.345539 ], [ 61.256912, 41.331043 ], [ 61.268746, 41.301872 ], [ 61.283991, 41.296162 ], [ 61.29045, 41.293242 ], [ 61.314222, 41.28624 ], [ 61.339646, 41.288075 ], [ 61.357165, 41.298151 ], [ 61.396904, 41.355796 ], [ 61.412872, 41.37024 ], [ 61.42822, 41.379438 ], [ 61.44641, 41.386286 ], [ 61.466099, 41.38967 ], [ 61.520256, 41.389567 ], [ 61.711303, 41.35484 ], [ 61.759672, 41.339337 ], [ 61.804838, 41.318589 ], [ 61.8638, 41.28456 ], [ 62.034023, 41.142735 ], [ 62.153499, 40.998893 ], [ 62.157581, 40.995715 ], [ 62.171689, 40.989643 ], [ 62.186727, 40.985871 ], [ 62.239488, 40.998971 ], [ 62.402734, 40.859935 ], [ 62.435135, 40.821772 ], [ 62.447279, 40.788312 ], [ 62.395603, 40.70271 ], [ 62.199927, 40.517682 ], [ 62.188537, 40.531083 ], [ 62.169171, 40.542202 ], [ 62.134171, 40.577834 ], [ 62.120683, 40.59897 ], [ 62.100064, 40.660413 ], [ 62.088696, 40.674366 ], [ 62.055726, 40.701754 ], [ 62.045293, 40.714353 ], [ 62.042075, 40.757743 ], [ 62.032165, 40.769939 ], [ 62.026401, 40.786816 ], [ 62.021074, 40.793334 ], [ 61.993869, 40.865879 ], [ 61.988889, 40.87471 ], [ 62.000119, 40.892406 ], [ 61.996898, 40.900283 ], [ 61.995629, 40.922978 ], [ 61.99273, 40.931302 ], [ 61.991401, 40.946902 ], [ 61.996369, 40.973536 ], [ 61.991565, 40.980087 ], [ 61.981914, 40.983178 ], [ 61.979297, 40.998842 ], [ 61.977029, 41.003281 ], [ 61.977161, 41.005909 ], [ 61.970879, 41.019137 ], [ 61.963734, 41.027358 ], [ 61.957695, 41.032134 ], [ 61.897441, 41.10881 ], [ 61.877907, 41.124984 ], [ 61.654355, 41.249421 ], [ 61.632828, 41.256439 ], [ 61.626885, 41.264988 ], [ 61.624049, 41.26232 ], [ 61.619961, 41.260634 ], [ 61.567332, 41.277792 ], [ 61.470077, 41.29717 ], [ 61.43318, 41.300323 ], [ 61.410752, 41.292003 ], [ 61.397213, 41.27097 ], [ 61.387498, 41.235779 ], [ 61.363003, 41.225185 ], [ 61.343986, 41.193817 ], [ 61.315874, 41.17046 ], [ 61.281355, 41.157282 ], [ 61.243217, 41.1563 ], [ 61.2026, 41.168806 ], [ 61.09966, 41.2241 ], [ 61.093924, 41.224233 ], [ 61.090418, 41.230105 ], [ 61.086202, 41.225773 ], [ 61.086041, 41.224417 ], [ 61.081884, 41.224513 ], [ 61.077109, 41.223896 ], [ 61.065598, 41.243682 ], [ 61.065025, 41.254265 ], [ 61.062082, 41.25568 ], [ 61.059747, 41.254219 ], [ 61.056009, 41.254656 ], [ 61.054802, 41.257575 ], [ 61.051616, 41.245906 ], [ 61.042936, 41.255673 ], [ 61.044987, 41.264888 ], [ 61.04225, 41.265724 ], [ 61.037552, 41.261188 ], [ 61.034149, 41.262058 ], [ 61.033531, 41.269236 ], [ 61.028058, 41.259707 ], [ 61.030247, 41.25954 ], [ 61.029796, 41.222658 ], [ 61.024991, 41.222314 ], [ 61.017135, 41.226102 ], [ 61.005866, 41.231537 ], [ 61.001624, 41.233582 ], [ 61.000462, 41.243241 ], [ 60.998958, 41.242339 ], [ 60.944899, 41.247829 ], [ 60.816012, 41.258828 ], [ 60.684368, 41.257104 ], [ 60.58105, 41.224103 ], [ 60.578572, 41.223476 ], [ 60.568263, 41.223373 ], [ 60.512035, 41.216481 ], [ 60.491466, 41.217479 ], [ 60.475815, 41.221381 ], [ 60.405722, 41.253079 ], [ 60.342789, 41.295385 ], [ 60.276258, 41.330378 ], [ 60.242567, 41.333363 ], [ 60.230022, 41.337202 ], [ 60.169323, 41.369337 ], [ 60.130402, 41.395278 ], [ 60.093114, 41.413193 ], [ 60.076917, 41.434836 ], [ 60.075854, 41.441828 ], [ 60.077486, 41.448678 ], [ 60.074077, 41.457487 ], [ 60.090808, 41.500398 ], [ 60.103643, 41.537148 ], [ 60.103908, 41.542131 ], [ 60.122741, 41.553705 ], [ 60.128257, 41.550135 ], [ 60.140989, 41.555917 ], [ 60.140703, 41.562339 ], [ 60.145561, 41.563986 ], [ 60.142786, 41.567748 ], [ 60.146772, 41.570763 ], [ 60.157857, 41.579145 ], [ 60.158441, 41.579188 ], [ 60.163736, 41.579571 ], [ 60.172314, 41.576076 ], [ 60.176512, 41.577661 ], [ 60.172363, 41.584365 ], [ 60.173557, 41.587987 ], [ 60.178278, 41.588362 ], [ 60.178993, 41.591358 ], [ 60.172504, 41.602723 ], [ 60.177205, 41.606763 ], [ 60.172506, 41.616139 ], [ 60.171911, 41.626549 ], [ 60.158109, 41.646361 ], [ 60.145558, 41.658666 ], [ 60.114993, 41.681573 ], [ 60.091423, 41.708394 ], [ 60.075031, 41.728489 ], [ 60.069595, 41.747086 ], [ 60.058777, 41.763769 ], [ 60.065787, 41.771271 ], [ 60.075123, 41.774782 ], [ 60.076958, 41.7821 ], [ 60.102409, 41.79528 ], [ 60.133724, 41.797295 ], [ 60.171345, 41.788406 ], [ 60.205865, 41.772025 ], [ 60.225398, 41.765462 ], [ 60.237199, 41.766666 ], [ 60.237739, 41.766334 ], [ 60.245055, 41.765557 ], [ 60.263422, 41.766917 ], [ 60.280299, 41.756627 ], [ 60.297919, 41.752274 ], [ 60.311184, 41.754295 ], [ 60.318743, 41.750859 ], [ 60.325018, 41.761288 ], [ 60.3258, 41.768371 ], [ 60.314456, 41.77974 ], [ 60.290031, 41.794025 ], [ 60.264838, 41.815415 ], [ 60.23783, 41.824691 ], [ 60.214993, 41.828498 ], [ 60.214856, 41.828585 ], [ 60.167521, 41.849591 ], [ 60.155311, 41.859043 ], [ 60.148978, 41.870194 ], [ 60.142617, 41.875448 ] ] ] } },
    18: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZBU", "name": "Bukhoro" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 65.137813, 39.464258 ], [ 65.090632, 39.436663 ], [ 64.99038, 39.358993 ], [ 64.977822, 39.351448 ], [ 64.965988, 39.34809 ], [ 64.956842, 39.348632 ], [ 64.944594, 39.347521 ], [ 64.937153, 39.344782 ], [ 64.931262, 39.341191 ], [ 64.855091, 39.27675 ], [ 64.845427, 39.266596 ], [ 64.839381, 39.258121 ], [ 64.838296, 39.252643 ], [ 64.838296, 39.247476 ], [ 64.839381, 39.242669 ], [ 64.840931, 39.238045 ], [ 64.845737, 39.22944 ], [ 64.852714, 39.221508 ], [ 64.884701, 39.190993 ], [ 64.888112, 39.187014 ], [ 64.890903, 39.182027 ], [ 64.891678, 39.176239 ], [ 64.889352, 39.167868 ], [ 64.884701, 39.163785 ], [ 64.878965, 39.161176 ], [ 64.712619, 39.114254 ], [ 64.658927, 39.099112 ], [ 64.521313, 39.056066 ], [ 64.474442, 39.030951 ], [ 64.384386, 38.954153 ], [ 64.354852, 38.976735 ], [ 64.33584, 38.971685 ], [ 64.313573, 38.98248 ], [ 64.283394, 38.979689 ], [ 64.249308, 38.966378 ], [ 64.234344, 38.966512 ], [ 64.181194, 38.96186 ], [ 64.171504, 38.970708 ], [ 64.09497, 39.007408 ], [ 64.008669, 39.053419 ], [ 63.995575, 39.063154 ], [ 63.775664, 39.183833 ], [ 63.762551, 39.192802 ], [ 63.705149, 39.223866 ], [ 63.694214, 39.272438 ], [ 63.565059, 39.337599 ], [ 63.550748, 39.345538 ], [ 63.54101, 39.3561 ], [ 63.477551, 39.402919 ], [ 63.424475, 39.432162 ], [ 63.420414, 39.44539 ], [ 63.358472, 39.474774 ], [ 63.303672, 39.503665 ], [ 63.262142, 39.527541 ], [ 63.170418, 39.574109 ], [ 62.948581, 39.696122 ], [ 62.868556, 39.738436 ], [ 62.846479, 39.750598 ], [ 62.710156, 39.825735 ], [ 62.695267, 39.833943 ], [ 62.585657, 39.89604 ], [ 62.535387, 39.93498 ], [ 62.524586, 39.939734 ], [ 62.452808, 40.009239 ], [ 62.441956, 40.035955 ], [ 62.424386, 40.092128 ], [ 62.421595, 40.115072 ], [ 62.425781, 40.136673 ], [ 62.434101, 40.154811 ], [ 62.439682, 40.172898 ], [ 62.435754, 40.194189 ], [ 62.405059, 40.245245 ], [ 62.400976, 40.265605 ], [ 62.400201, 40.292115 ], [ 62.396532, 40.312011 ], [ 62.388315, 40.330149 ], [ 62.362581, 40.369682 ], [ 62.356379, 40.388182 ], [ 62.353279, 40.430402 ], [ 62.350348, 40.433129 ], [ 62.350376, 40.433235 ], [ 62.34946, 40.438297 ], [ 62.330401, 40.445199 ], [ 62.289336, 40.463242 ], [ 62.263669, 40.484776 ], [ 62.23631, 40.494113 ], [ 62.207718, 40.508515 ], [ 62.199927, 40.517682 ], [ 62.395603, 40.70271 ], [ 62.447279, 40.788312 ], [ 62.435135, 40.821772 ], [ 62.402734, 40.859935 ], [ 62.239488, 40.998971 ], [ 62.465418, 41.080955 ], [ 62.464642, 41.094675 ], [ 62.18037, 41.392306 ], [ 62.534767, 41.493282 ], [ 62.619052, 41.491783 ], [ 62.650833, 41.436799 ], [ 62.675534, 41.40383 ], [ 62.843741, 41.254614 ], [ 62.978564, 41.074599 ], [ 63.002491, 41.064212 ], [ 63.090909, 41.048942 ], [ 63.222322, 41.010314 ], [ 63.376421, 40.944685 ], [ 63.677333, 40.804306 ], [ 63.699967, 40.774049 ], [ 63.736606, 40.745782 ], [ 63.735056, 40.726248 ], [ 63.854222, 40.757952 ], [ 63.925587, 40.838645 ], [ 63.985015, 40.932799 ], [ 64.002998, 40.952462 ], [ 64.022738, 40.964528 ], [ 64.042892, 40.969799 ], [ 64.061651, 40.965975 ], [ 64.081236, 40.953521 ], [ 64.1017, 40.930474 ], [ 64.106816, 40.896419 ], [ 64.108521, 40.830609 ], [ 64.122319, 40.809008 ], [ 64.164694, 40.797484 ], [ 64.435478, 40.773015 ], [ 64.458009, 40.78888 ], [ 64.488395, 40.878229 ], [ 64.507463, 40.885928 ], [ 64.541156, 40.895644 ], [ 64.6735, 40.900139 ], [ 64.717115, 40.907012 ], [ 64.749102, 40.917503 ], [ 64.781193, 40.951971 ], [ 64.793286, 40.950757 ], [ 64.802019, 40.926934 ], [ 64.823258, 40.826346 ], [ 64.832405, 40.79981 ], [ 64.846512, 40.770406 ], [ 64.881136, 40.748521 ], [ 64.915759, 40.733483 ], [ 65.014409, 40.715086 ], [ 65.317491, 40.699118 ], [ 65.365447, 40.70966 ], [ 65.341831, 40.647597 ], [ 65.337025, 40.622069 ], [ 65.334855, 40.595791 ], [ 65.335165, 40.571012 ], [ 65.337335, 40.55091 ], [ 65.341056, 40.538999 ], [ 65.340281, 40.527501 ], [ 65.326948, 40.527862 ], [ 65.274652, 40.536389 ], [ 65.26473, 40.536802 ], [ 65.255273, 40.534735 ], [ 65.247522, 40.529516 ], [ 65.236153, 40.516623 ], [ 65.234447, 40.504143 ], [ 65.207782, 40.440658 ], [ 65.185923, 40.421151 ], [ 65.167423, 40.407921 ], [ 65.144789, 40.352989 ], [ 65.13404, 40.336143 ], [ 65.016425, 40.337073 ], [ 64.993635, 40.342809 ], [ 64.972241, 40.353765 ], [ 64.952036, 40.367252 ], [ 64.932657, 40.371438 ], [ 64.910178, 40.371283 ], [ 64.8754, 40.366761 ], [ 64.858811, 40.359759 ], [ 64.849613, 40.351129 ], [ 64.846823, 40.341724 ], [ 64.845272, 40.332422 ], [ 64.844807, 40.323637 ], [ 64.85013, 40.304259 ], [ 64.87509, 40.284983 ], [ 64.858501, 40.247208 ], [ 64.849613, 40.240697 ], [ 64.844807, 40.239456 ], [ 64.844187, 40.237131 ], [ 64.845582, 40.233152 ], [ 64.856951, 40.218967 ], [ 64.886407, 40.196048 ], [ 64.901755, 40.181139 ], [ 64.90594, 40.174654 ], [ 64.9047, 40.171192 ], [ 64.874779, 40.168401 ], [ 64.867958, 40.167109 ], [ 64.861757, 40.16375 ], [ 64.854212, 40.159358 ], [ 64.845272, 40.159099 ], [ 64.830028, 40.149591 ], [ 64.782589, 40.075332 ], [ 64.768791, 40.060501 ], [ 64.751118, 40.047453 ], [ 64.733186, 40.037686 ], [ 64.672105, 40.016188 ], [ 64.664198, 40.003114 ], [ 64.656447, 39.996836 ], [ 64.652881, 39.992546 ], [ 64.620428, 39.961101 ], [ 64.60415, 39.933377 ], [ 64.590042, 39.907797 ], [ 64.605545, 39.883173 ], [ 64.678151, 39.805788 ], [ 64.705953, 39.79106 ], [ 64.752978, 39.771061 ], [ 64.754373, 39.765273 ], [ 64.759489, 39.756178 ], [ 64.763055, 39.747703 ], [ 64.777008, 39.742329 ], [ 64.796386, 39.741451 ], [ 64.839846, 39.756824 ], [ 64.854936, 39.754421 ], [ 64.863927, 39.743104 ], [ 64.983248, 39.699877 ], [ 65.001542, 39.676209 ], [ 65.009758, 39.653936 ], [ 65.010068, 39.637633 ], [ 65.013324, 39.615851 ], [ 65.021386, 39.595051 ], [ 65.040661, 39.586473 ], [ 65.064535, 39.579755 ], [ 65.079625, 39.573244 ], [ 65.097453, 39.559369 ], [ 65.113421, 39.542367 ], [ 65.117452, 39.536709 ], [ 65.123653, 39.52565 ], [ 65.133627, 39.499036 ], [ 65.135332, 39.492112 ], [ 65.137813, 39.464258 ] ] ] } },
    19: { "type": "Feature", "properties": { "source": "https://simplemaps.com", "id": "UZTK", "name": "Tashkent" }, "geometry": { "type": "MultiLineString", "coordinates": [ [ [ 69.243448, 41.219172 ], [ 69.213311, 41.225049 ], [ 69.200847, 41.241964 ], [ 69.206634, 41.251758 ], [ 69.205743, 41.255764 ], [ 69.189718, 41.2433 ], [ 69.16479, 41.264667 ], [ 69.157668, 41.275795 ], [ 69.155887, 41.288259 ], [ 69.138972, 41.280692 ], [ 69.136069, 41.282828 ], [ 69.162119, 41.331438 ], [ 69.170132, 41.363044 ], [ 69.223172, 41.403276 ], [ 69.256935, 41.403552 ], [ 69.280528, 41.391088 ], [ 69.311243, 41.387972 ], [ 69.34819, 41.370166 ], [ 69.351906, 41.353972 ], [ 69.336616, 41.334109 ], [ 69.350415, 41.327432 ], [ 69.360654, 41.315858 ], [ 69.353531, 41.30651 ], [ 69.36377, 41.298498 ], [ 69.325932, 41.284253 ], [ 69.275186, 41.249532 ], [ 69.243448, 41.219172 ] ] ] } }
    20: ]
    21: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\boot\heartbeat.js
SIZE: 1128 bytes
================================================================================
     1: // src/boot/heartbeat.js
     2: import { heartbeat, isAuthenticated } from "../api/auth";
     3: 
     4: let started = false;
     5: let timer = null;
     6: 
     7: export function startHeartbeat(intervalMs = 40000) {
     8:   if (started) return;
     9:   started = true;
    10: 
    11:   let pendingImmediate = false;
    12: 
    13:   const tick = () => {
    14:     if (!isAuthenticated()) return;
    15:     heartbeat().catch(() => {});
    16:   };
    17: 
    18:   // Token o'zgarganda (login / refresh) tezkor heartbeat
    19:   const onToken = () => {
    20:     if (!isAuthenticated()) return; // token tozalangan bo'lishi mumkin
    21:     if (pendingImmediate) return;
    22:     pendingImmediate = true;
    23:     // kichik debounce (100ms) – ketma-ket ikki marta setAccessToken bo'lsa ham 1 marta jo'natish
    24:     setTimeout(() => {
    25:       pendingImmediate = false;
    26:       tick();
    27:     }, 100);
    28:   };
    29:   window.addEventListener("auth:token-changed", onToken);
    30: 
    31:   // darhol bir marta
    32:   setTimeout(tick, 2000);
    33:   // keyin interval
    34:   timer = setInterval(tick, intervalMs);
    35:   return () => {
    36:     if (timer) clearInterval(timer);
    37:     timer = null;
    38:     started = false;
    39:     window.removeEventListener("auth:token-changed", onToken);
    40:   };
    41: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\boot\sessionManager.js
SIZE: 5486 bytes
================================================================================
     1: // Session manager: proactive token refresh & idle auto-logout
     2: // Config via env:
     3: //   VITE_IDLE_MINUTES=10 (default 5)
     4: //   VITE_TOKEN_REFRESH_LEEWAY_SEC=90 (buffer before exp to refresh, default 90s)
     5: 
     6: import {
     7:   getAccessExpireAt,
     8:   isAuthenticated,
     9:   logout,
    10:   refreshAccessToken,
    11:   decodeJWT,
    12: } from "../api/auth";
    13: 
    14: let started = false;
    15: let refreshTimer = null; // setTimeout id
    16: let idleTimer = null; // setTimeout id
    17: let lastActivity = Date.now();
    18: let refreshRetryTimer = null;
    19: let expiryWarnTimer = null; // pre-expiry toast
    20: const EXPIRY_WARN_MS = 60_000; // 60s oldin ogohlantirish
    21: 
    22: function getIdleMinutesCfg() {
    23:   const v = import.meta.env.VITE_IDLE_MINUTES;
    24:   const n = Number(v);
    25:   if (!v) return 5; // default
    26:   return Number.isFinite(n) && n > 0 ? n : 5;
    27: }
    28: function getRefreshLeewaySec() {
    29:   const v = import.meta.env.VITE_TOKEN_REFRESH_LEEWAY_SEC;
    30:   const n = Number(v);
    31:   if (!v) return 90; // 1.5 min default
    32:   return Number.isFinite(n) && n > 0 ? n : 90;
    33: }
    34: 
    35: function scheduleProactiveRefresh() {
    36:   if (refreshTimer) clearTimeout(refreshTimer);
    37:   if (expiryWarnTimer) clearTimeout(expiryWarnTimer);
    38:   if (!isAuthenticated()) return;
    39:   const expAt = getAccessExpireAt();
    40:   if (!expAt) return; // unknown exp
    41:   const leewayMs = getRefreshLeewaySec() * 1000;
    42:   const now = Date.now();
    43:   let delay = expAt - leewayMs - now;
    44:   if (delay < 5000) delay = 5000; // kamida 5s
    45:   // Pre-expiry ogohlantirish (agar window va vaqt yetarli bo'lsa)
    46:   const warnDelay = expAt - EXPIRY_WARN_MS - now;
    47:   if (warnDelay > 0) {
    48:     expiryWarnTimer = setTimeout(() => {
    49:       try {
    50:         window.dispatchEvent(
    51:           new CustomEvent("session:expiring", {
    52:             detail: { inMs: EXPIRY_WARN_MS },
    53:           })
    54:         );
    55:       } catch {}
    56:     }, warnDelay);
    57:   }
    58:   refreshTimer = setTimeout(async () => {
    59:     // Hali ham yaqinlashgan bo'lsa va refresh token mavjud bo'lsa
    60:     try {
    61:       const beforeExp = getAccessExpireAt() - Date.now();
    62:       if (beforeExp < leewayMs + 30000) {
    63:         await refreshAccessToken();
    64:       }
    65:     } catch {
    66:       // Bir martalik kechiktirilgan retry (2s) – tarmoq flakeni yumshatish
    67:       if (!refreshRetryTimer) {
    68:         refreshRetryTimer = setTimeout(async () => {
    69:           refreshRetryTimer = null;
    70:           try {
    71:             await refreshAccessToken();
    72:           } catch {
    73:             // silent retry failure
    74:           }
    75:         }, 2000);
    76:       }
    77:     } finally {
    78:       scheduleProactiveRefresh(); // keyingi sikl
    79:     }
    80:   }, delay);
    81: }
    82: 
    83: function resetIdleTimer() {
    84:   lastActivity = Date.now();
    85:   const idleMs = getIdleMinutesCfg() * 60 * 1000;
    86:   if (idleTimer) clearTimeout(idleTimer);
    87:   idleTimer = setTimeout(async () => {
    88:     // Agar shu orada activity bo'lsa qaytaramiz
    89:     const diff = Date.now() - lastActivity;
    90:     if (diff < idleMs - 1000) {
    91:       resetIdleTimer();
    92:       return;
    93:     }
    94:     if (isAuthenticated()) {
    95:       await logout().catch(() => {});
    96:       // Hard redirect to login to reset state
    97:       window.location.replace("/login");
    98:     }
    99:   }, idleMs);
   100: }
   101: 
   102: function onUserActivity() {
   103:   resetIdleTimer();
   104: }
   105: 
   106: function attachActivityListeners() {
   107:   const events = [
   108:     "mousemove",
   109:     "mousedown",
   110:     "keydown",
   111:     "scroll",
   112:     "touchstart",
   113:     "visibilitychange",
   114:   ];
   115:   events.forEach((ev) =>
   116:     window.addEventListener(ev, onUserActivity, { passive: true })
   117:   );
   118:   return () =>
   119:     events.forEach((ev) => window.removeEventListener(ev, onUserActivity));
   120: }
   121: 
   122: export function startSessionManager() {
   123:   if (started) return () => {};
   124:   started = true;
   125:   // initial schedule
   126:   scheduleProactiveRefresh();
   127:   resetIdleTimer();
   128:   const detach = attachActivityListeners();
   129: 
   130:   // Storage o'zgarishi (token rotate) bo'lsa — qayta schedule
   131:   const onStorage = (e) => {
   132:     if (
   133:       e.key === "token" ||
   134:       e.key === "tokenExpAt" ||
   135:       e.key === "refreshToken"
   136:     ) {
   137:       scheduleProactiveRefresh();
   138:       resetIdleTimer();
   139:     }
   140:   };
   141:   window.addEventListener("storage", onStorage);
   142: 
   143:   // Sahifa fokus / uyg'onish
   144:   const onVisibility = () => {
   145:     if (document.visibilityState === "visible") {
   146:       scheduleProactiveRefresh();
   147:     }
   148:   };
   149:   window.addEventListener("visibilitychange", onVisibility);
   150:   const onTokenChanged = () => {
   151:     scheduleProactiveRefresh();
   152:     resetIdleTimer();
   153:   };
   154:   window.addEventListener("auth:token-changed", onTokenChanged);
   155: 
   156:   return () => {
   157:     window.removeEventListener("storage", onStorage);
   158:     window.removeEventListener("visibilitychange", onVisibility);
   159:     window.removeEventListener("auth:token-changed", onTokenChanged);
   160:     detach();
   161:     if (refreshTimer) clearTimeout(refreshTimer);
   162:     if (idleTimer) clearTimeout(idleTimer);
   163:     if (refreshRetryTimer) clearTimeout(refreshRetryTimer);
   164:     if (expiryWarnTimer) clearTimeout(expiryWarnTimer);
   165:     started = false;
   166:   };
   167: }
   168: 
   169: // Debug helper (browser console): window.__authPayload()
   170: if (typeof window !== "undefined") {
   171:   window.__authPayload = () => decodeJWT();
   172:   window.__authCountdown = () => {
   173:     const exp = getAccessExpireAt();
   174:     if (!exp) return null;
   175:     const ms = exp - Date.now();
   176:     if (ms <= 0) return { expired: true, ms: 0, text: "expired" };
   177:     const s = Math.floor(ms / 1000);
   178:     const m = Math.floor(s / 60);
   179:     const rem = s % 60;
   180:     return { expired: false, ms, text: `${m}:${String(rem).padStart(2, "0")}` };
   181:   };
   182: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\common\CaptchaBox.jsx
SIZE: 5407 bytes
================================================================================
     1: import { useCallback, useEffect, useMemo, useRef, useState } from "react";
     2: import { getNewCaptcha } from "../../api/captcha";
     3: 
     4: /**
     5:  * CaptchaBox
     6:  * Props:
     7:  * - onChange: ({ id, answer }) => void
     8:  * - onExpired: () => void (optional)
     9:  * - className (optional)
    10:  * - autoFocus (boolean, default false) for input
    11:  */
    12: export default function CaptchaBox({
    13:   onChange,
    14:   onExpired,
    15:   className,
    16:   autoFocus,
    17: }) {
    18:   const [captchaId, setCaptchaId] = useState("");
    19:   const [image, setImage] = useState("");
    20:   const [ttlSeconds, setTtlSeconds] = useState(0);
    21:   const [answer, setAnswer] = useState("");
    22:   const [loading, setLoading] = useState(false);
    23:   const [error, setError] = useState("");
    24:   const timerRef = useRef(null);
    25: 
    26:   const load = useCallback(async () => {
    27:     clearInterval(timerRef.current);
    28:     setLoading(true);
    29:     setError("");
    30:     try {
    31:       let data;
    32:       try {
    33:         data = await getNewCaptcha();
    34:       } catch (e) {
    35:         if (e?.response?.status === 429) {
    36:           await new Promise((r) => setTimeout(r, 1000));
    37:           data = await getNewCaptcha();
    38:         } else {
    39:           throw e;
    40:         }
    41:       }
    42:       const { id, image, ttlSeconds } = data || {};
    43:       setCaptchaId(id);
    44:       setImage(image);
    45:       setTtlSeconds(Number(ttlSeconds || 0));
    46:       setAnswer("");
    47:       onChange?.({ id, answer: "" });
    48:     } catch (e) {
    49:       setError(
    50:         e?.response?.data?.message || e?.message || "CAPTCHA olishda xatolik"
    51:       );
    52:     } finally {
    53:       setLoading(false);
    54:     }
    55:   }, [onChange]);
    56: 
    57:   useEffect(() => {
    58:     load();
    59:     return () => clearInterval(timerRef.current);
    60:   }, [load]);
    61: 
    62:   // Countdown
    63:   useEffect(() => {
    64:     clearInterval(timerRef.current);
    65:     if (!ttlSeconds) return;
    66:     timerRef.current = setInterval(() => {
    67:       setTtlSeconds((s) => {
    68:         if (s <= 1) {
    69:           clearInterval(timerRef.current);
    70:           onExpired?.();
    71:           return 0;
    72:         }
    73:         return s - 1;
    74:       });
    75:     }, 1000);
    76:     return () => clearInterval(timerRef.current);
    77:   }, [ttlSeconds, onExpired]);
    78: 
    79:   // Auto refresh when expired
    80:   useEffect(() => {
    81:     if (ttlSeconds === 0 && captchaId) {
    82:       // auto-refresh silently
    83:       load();
    84:     }
    85:   }, [ttlSeconds, captchaId, load]);
    86: 
    87:   const ttlLabel = useMemo(() => {
    88:     if (!ttlSeconds) return "expired";
    89:     return `${ttlSeconds}s`;
    90:   }, [ttlSeconds]);
    91: 
    92:   const onRefresh = async (e) => {
    93:     e?.preventDefault?.();
    94:     await load();
    95:   };
    96: 
    97:   const onInput = (e) => {
    98:     const v = e.target.value;
    99:     setAnswer(v);
   100:     onChange?.({ id: captchaId, answer: v });
   101:   };
   102: 
   103:   return (
   104:     <div className={className} style={{ display: "grid", gap: 10 }}>
   105:       <label style={{ fontSize: 13, color: "var(--am-muted, #64748b)" }}>
   106:         CAPTCHA
   107:       </label>
   108:       <div style={{ display: "flex", alignItems: "center", gap: 10 }}>
   109:         <div
   110:           style={{
   111:             width: 160,
   112:             height: 56,
   113:             display: "grid",
   114:             placeItems: "center",
   115:             border: "1px solid var(--am-border, #e5e7eb)",
   116:             borderRadius: 8,
   117:             overflow: "hidden",
   118:             background: "var(--am-card, #ffffff)",
   119:           }}
   120:         >
   121:           {image ? (
   122:             <img
   123:               src={image}
   124:               width={160}
   125:               height={56}
   126:               alt="Tekshiruv rasmini kiriting"
   127:               style={{ objectFit: "cover" }}
   128:             />
   129:           ) : (
   130:             <span style={{ fontSize: 12, color: "var(--am-muted, #6b7280)" }}>
   131:               {loading ? "Yuklanmoqda..." : error || "Rasm yo'q"}
   132:             </span>
   133:           )}
   134:         </div>
   135:         <div style={{ display: "grid", gap: 6, flex: 1, minWidth: 160 }}>
   136:           <input
   137:             inputMode="text"
   138:             autoComplete="off"
   139:             placeholder="Javobni kiriting"
   140:             value={answer}
   141:             onChange={onInput}
   142:             aria-label="CAPTCHA javobi"
   143:             autoFocus={autoFocus}
   144:             style={{
   145:               padding: "10px 12px",
   146:               borderRadius: 10,
   147:               border: "1px solid var(--am-border, #e5e7eb)",
   148:               background: "transparent",
   149:               color: "var(--am-text, #0f172a)",
   150:             }}
   151:           />
   152:           <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
   153:             <button
   154:               type="button"
   155:               onClick={onRefresh}
   156:               aria-label="CAPTCHA yangilash"
   157:               title="CAPTCHA yangilash"
   158:               style={{
   159:                 border: "1px solid var(--am-border, #e5e7eb)",
   160:                 background:
   161:                   "color-mix(in srgb, var(--am-card, #ffffff) 96%, var(--am-text, #0f172a) 4%)",
   162:                 color: "var(--am-text, #0f172a)",
   163:                 padding: "8px 10px",
   164:                 borderRadius: 10,
   165:                 cursor: "pointer",
   166:               }}
   167:               disabled={loading}
   168:             >
   169:               Yangilash
   170:             </button>
   171:             <span style={{ fontSize: 12, color: "var(--am-muted, #6b7280)" }}>
   172:               Qolgan vaqt: {ttlLabel}
   173:             </span>
   174:           </div>
   175:         </div>
   176:       </div>
   177:       {error && (
   178:         <div style={{ fontSize: 12, color: "var(--danger-2, #b91c1c)" }}>
   179:           {error}
   180:         </div>
   181:       )}
   182:     </div>
   183:   );
   184: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\dashboard\FacilityTypeChips.jsx
SIZE: 2330 bytes
================================================================================
     1: import React from "react";
     2: 
     3: /**
     4:  * Single-select facility chips.
     5:  *
     6:  * Props:
     7:  * - value: string|null (tanlangan type yoki null)
     8:  * - onChange: (next:string|null)=>void
     9:  * - types: {key:string,label:string}[]  (ixtiyoriy, default pastda)
    10:  * - loading?: boolean                    (ixtiyoriy)
    11:  */
    12: export default function FacilityTypeChips({
    13:   value,
    14:   onChange,
    15:   types = DEFAULT_FACILITY_TYPES,
    16:   loading = false,
    17: }) {
    18:   const handleClick = (key) => {
    19:     if (loading) return;
    20:     if (value === key) onChange?.(null); // toggle off
    21:     else onChange?.(key);
    22:   };
    23: 
    24:   const hasSelection = !!value;
    25: 
    26:   return (
    27:     <div className="ftchips">
    28:       {types.map((t) => {
    29:         const active = value === t.key;
    30:         const disabled = hasSelection && !active;
    31:         return (
    32:           <button
    33:             key={t.key}
    34:             type="button"
    35:             className={`chip ${active ? "is-active" : ""} ${
    36:               disabled ? "is-disabled" : ""
    37:             }`}
    38:             disabled={disabled}
    39:             aria-pressed={active}
    40:             onClick={() => handleClick(t.key)}
    41:             title={t.label}
    42:           >
    43:             {t.label}
    44:           </button>
    45:         );
    46:       })}
    47: 
    48:       {/* Tozalash: faqat tanlov bo'lganda ko'rsatamiz */}
    49:       <button
    50:         type="button"
    51:         className="chip reset"
    52:         onClick={() => onChange?.(null)}
    53:         disabled={!hasSelection}
    54:         title="Filterni bekor qilish"
    55:       >
    56:         Tozalash
    57:       </button>
    58:     </div>
    59:   );
    60: }
    61: 
    62: // Default ro'yxat (kerak bo'lsa tartib/nomlarini o'zgartirishingiz mumkin)
    63: // eslint-disable-next-line react-refresh/only-export-components
    64: export const DEFAULT_FACILITY_TYPES = [
    65:   { key: "GREENHOUSE", label: "Issiqxona" },
    66:   { key: "FISHPOND", label: "Baliqchilik ko‘li" },
    67:   { key: "BORDER_LAND", label: "Chegara oldi yeri" },
    68:   { key: "WORKSHOP_SAUSAGE", label: "Ishlab chiqarish sexi (kolbasa)" },
    69:   { key: "WORKSHOP_COOKIE", label: "Ishlab chiqarish sexi (pechenye)" },
    70:   { key: "POULTRY_MEAT", label: "Tovuqxona (go‘sht)" },
    71:   { key: "POULTRY_EGG", label: "Tovuqxona (tuxum)" },
    72:   { key: "TURKEY", label: "Kurkaxona" },
    73:   { key: "COWSHED", label: "Molxona" },
    74:   { key: "SHEEPFOLD", label: "Qo‘yxona" },
    75:   { key: "AUX_LAND", label: "Yordamchi xo‘jalik yeri" },
    76: ];


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\facilities\FacilityCrudTable.jsx
SIZE: 23286 bytes
================================================================================
     1: // src/components/facilities/FacilityCrudTable.jsx
     2: import { useEffect, useMemo, useRef, useState } from "react";
     3: import useDebouncedValue from "../../hooks/useDebouncedValue";
     4: import Modal from "../ui/Modal";
     5: import {
     6:   listFacilitiesPage,
     7:   createFacility,
     8:   patchFacility,
     9:   deleteFacility,
    10: } from "../../api/facilities";
    11: import { toast } from "react-toastify";
    12: import { listOrgsPage } from "../../api/org";
    13: import { FACILITY_TYPES } from "../../data/facilityTypes";
    14: import s from "./FacilityCrudTable.module.scss";
    15: 
    16: /* -------------------------- Validation helpers -------------------------- */
    17: function validateByRules(schema, { name, orgId, attributes }) {
    18:   const errors = { name: null, orgId: null, attr: {} };
    19: 
    20:   if (!name || !name.trim()) errors.name = "Nomi majburiy";
    21:   if (orgId == null) errors.orgId = "Tashkilot tanlanishi shart";
    22: 
    23:   for (const f of schema.fields || []) {
    24:     const v = attributes?.[f.key];
    25:     const r = f.rules || {};
    26:     if (r.required && (v === null || v === undefined || v === "")) {
    27:       errors.attr[f.key] = "Majburiy maydon";
    28:       continue;
    29:     }
    30:     if (v !== null && v !== undefined && v !== "") {
    31:       if (f.type === "number") {
    32:         const n = Number(v);
    33:         if (!Number.isFinite(n)) {
    34:           errors.attr[f.key] = "Raqam kiritilishi kerak";
    35:           continue;
    36:         }
    37:         if (r.integer && !Number.isInteger(n)) {
    38:           errors.attr[f.key] = "Butun son bo‘lishi kerak";
    39:           continue;
    40:         }
    41:         if (typeof r.min === "number" && n < r.min) {
    42:           errors.attr[f.key] = `Qiymat ${r.min} dan kichik bo‘lmasin`;
    43:           continue;
    44:         }
    45:         if (typeof r.max === "number" && n > r.max) {
    46:           errors.attr[f.key] = `Qiymat ${r.max} dan katta bo‘lmasin`;
    47:           continue;
    48:         }
    49:       } else if (f.type === "text") {
    50:         const sv = String(v);
    51:         if (typeof r.maxLength === "number" && sv.length > r.maxLength) {
    52:           errors.attr[f.key] = `Maksimal ${r.maxLength} ta belgi`;
    53:           continue;
    54:         }
    55:       }
    56:     }
    57:   }
    58:   return errors;
    59: }
    60: function hasErrors(err) {
    61:   if (!err) return false;
    62:   if (err.name || err.orgId) return true;
    63:   return Object.values(err.attr || {}).some(Boolean);
    64: }
    65: 
    66: /* ------------------------------ Utilities ------------------------------ */
    67: function toNumberOrNull(v) {
    68:   if (v === "" || v == null) return null;
    69:   const n = Number(v);
    70:   return Number.isFinite(n) ? n : null;
    71: }
    72: function normalizeNumbers(obj) {
    73:   const out = {};
    74:   for (const [k, v] of Object.entries(obj || {})) {
    75:     if (v === "" || v == null) {
    76:       out[k] = null;
    77:       continue;
    78:     }
    79:     const n = Number(v);
    80:     out[k] = Number.isFinite(n) && String(v).trim() !== "" ? n : v;
    81:   }
    82:   return out;
    83: }
    84: function coord(v) {
    85:   return typeof v === "number" ? v.toFixed(6) : v ?? "—";
    86: }
    87: 
    88: /* ------------------------- Lightweight org fetch ------------------------ */
    89: /** Backend: GET /api/orgs => PageResponse with { content: [{id,name,...}] } */
    90: async function fetchOrgOptions() {
    91:   try {
    92:     const data = await listOrgsPage({
    93:       page: 0,
    94:       size: 1000,
    95:       sort: ["name,asc"],
    96:     });
    97:     const items = Array.isArray(data?.content) ? data.content : [];
    98:     return items.map((x) => ({
    99:       value: x.id ?? x?.orgId ?? x?.key,
   100:       label: x.name ?? x?.title ?? `#${x.id}`,
   101:     }));
   102:   } catch {
   103:     return [];
   104:   }
   105: }
   106: 
   107: /* ============================ Main component ============================ */
   108: export default function FacilityCrudTable({ type, title }) {
   109:   const schema = useMemo(() => {
   110:     return (
   111:       FACILITY_TYPES[type] || {
   112:         label: FACILITY_TYPES?.[type]?.label || String(type),
   113:         fields: [],
   114:       }
   115:     );
   116:   }, [type]);
   117: 
   118:   // Filters
   119:   const [orgId, setOrgId] = useState(null);
   120:   const [statusFilter, setStatusFilter] = useState("ALL"); // ALL | ACTIVE | INACTIVE
   121:   const [search, setSearch] = useState("");
   122: 
   123:   // Server-side pagination
   124:   const [rows, setRows] = useState([]);
   125:   const [pageIdx, setPageIdx] = useState(0);
   126:   const [pageSize, setPageSize] = useState(20);
   127:   const [total, setTotal] = useState(0);
   128:   const [loading, setLoading] = useState(false);
   129: 
   130:   // Orgs
   131:   const [orgOptions, setOrgOptions] = useState([]);
   132:   useEffect(() => {
   133:     let alive = true;
   134:     fetchOrgOptions().then((opts) => alive && setOrgOptions(opts));
   135:     return () => (alive = false);
   136:   }, []);
   137: 
   138:   const debouncedSearch = useDebouncedValue(search, 400);
   139: 
   140:   // Load rows
   141:   useEffect(() => {
   142:     let alive = true;
   143:     (async () => {
   144:       setLoading(true);
   145:       try {
   146:         const pageRes = await listFacilitiesPage({
   147:           type,
   148:           orgId,
   149:           status: statusFilter !== "ALL" ? statusFilter : undefined,
   150:           q: debouncedSearch || undefined,
   151:           page: pageIdx,
   152:           size: pageSize,
   153:           sort: "createdAt,desc",
   154:         });
   155:         if (!alive) return;
   156:         setRows(Array.isArray(pageRes?.content) ? pageRes.content : []);
   157:         setTotal(pageRes?.totalElements ?? 0);
   158:       } finally {
   159:         if (alive) setLoading(false);
   160:       }
   161:     })();
   162:     return () => (alive = false);
   163:   }, [type, orgId, statusFilter, debouncedSearch, pageIdx, pageSize]);
   164: 
   165:   // Reset page when filters change
   166:   useEffect(() => {
   167:     setPageIdx(0);
   168:   }, [type, orgId, statusFilter, debouncedSearch]);
   169: 
   170:   /* --------------------- Derived: attr columns & labels --------------------- */
   171:   const attrKeysOrdered = useMemo(() => {
   172:     const schemaKeys = (schema.fields || []).map((f) => f.key);
   173:     const present = new Set();
   174:     for (const r of rows) {
   175:       const a = r?.attributes;
   176:       if (a && typeof a === "object")
   177:         Object.keys(a).forEach((k) => present.add(k));
   178:     }
   179:     const extras = [...present].filter((k) => !schemaKeys.includes(k)).sort();
   180:     return [...schemaKeys, ...extras];
   181:   }, [rows, schema.fields]);
   182: 
   183:   const labelByKey = useMemo(() => {
   184:     const m = {};
   185:     for (const f of schema.fields || []) m[f.key] = f.label;
   186:     return m;
   187:   }, [schema.fields]);
   188: 
   189:   const suffixByKey = useMemo(() => {
   190:     const m = {};
   191:     for (const f of schema.fields || []) m[f.key] = f.suffix || null;
   192:     return m;
   193:   }, [schema.fields]);
   194: 
   195:   /* --------------------------- Create / Edit modals --------------------------- */
   196:   const [openCreate, setOpenCreate] = useState(false);
   197:   const [openEdit, setOpenEdit] = useState(false);
   198:   const [editing, setEditing] = useState(null); // current row
   199: 
   200:   // Shared form state
   201:   const [formName, setFormName] = useState("");
   202:   const [formOrgId, setFormOrgId] = useState(null);
   203:   const [formStatus, setFormStatus] = useState("ACTIVE");
   204:   const [formAttr, setFormAttr] = useState({});
   205:   const [formErrors, setFormErrors] = useState({
   206:     name: null,
   207:     orgId: null,
   208:     attr: {},
   209:   });
   210:   const [saving, setSaving] = useState(false);
   211: 
   212:   // Focus control
   213:   const nameInputRef = useRef(null);
   214: 
   215:   useEffect(() => {
   216:     setFormErrors(
   217:       validateByRules(schema, {
   218:         name: formName,
   219:         orgId: formOrgId,
   220:         attributes: formAttr,
   221:       })
   222:     );
   223:   }, [schema, formName, formOrgId, formAttr]);
   224: 
   225:   const resetForm = () => {
   226:     setFormErrors({ name: null, orgId: null, attr: {} });
   227:     setFormName("");
   228:     setFormOrgId(null);
   229:     setFormStatus("ACTIVE");
   230:     const init = {};
   231:     for (const f of schema.fields || []) init[f.key] = null;
   232:     setFormAttr(init);
   233:   };
   234: 
   235:   // Open create
   236:   const onOpenCreate = () => {
   237:     resetForm();
   238:     if (orgId != null) setFormOrgId(orgId);
   239:     setOpenCreate(true);
   240:   };
   241: 
   242:   // Open edit
   243:   const onOpenEdit = (row) => {
   244:     resetForm();
   245:     setEditing(row);
   246:     setFormName(row?.name ?? "");
   247:     setFormOrgId(row?.orgId ?? null);
   248:     setFormStatus(row?.status ?? "ACTIVE");
   249:     const init = {};
   250:     for (const f of schema.fields || [])
   251:       init[f.key] = row?.attributes?.[f.key] ?? null;
   252:     setFormAttr(init);
   253:     setOpenEdit(true);
   254:   };
   255: 
   256:   // Submit create
   257:   const submitCreate = async () => {
   258:     const errs = validateByRules(schema, {
   259:       name: formName,
   260:       orgId: formOrgId,
   261:       attributes: formAttr,
   262:     });
   263:     setFormErrors(errs);
   264:     if (hasErrors(errs)) return;
   265: 
   266:     setSaving(true);
   267:     try {
   268:       const payload = {
   269:         name: formName.trim(),
   270:         type,
   271:         status: formStatus,
   272:         orgId: formOrgId,
   273:         attributes: normalizeNumbers(formAttr),
   274:         lat: null,
   275:         lng: null,
   276:         geometry: null,
   277:       };
   278:       // Optimistic: vaqtinchalik ID
   279:       const tempId = "temp-" + Date.now();
   280:       const optimisticRow = {
   281:         id: tempId,
   282:         orgId: formOrgId,
   283:         orgName: orgOptions.find((o) => o.value === formOrgId)?.label || null,
   284:         name: payload.name,
   285:         type,
   286:         status: formStatus,
   287:         attributes: payload.attributes,
   288:         lat: null,
   289:         lng: null,
   290:         geometry: null,
   291:         __optimistic: true,
   292:       };
   293:       setRows((r) => [optimisticRow, ...r]);
   294:       setTotal((t) => t + 1);
   295:       setOpenCreate(false);
   296:       // Server
   297:       const created = await createFacility(payload);
   298:       setRows((r) =>
   299:         r.map((row) => (row.id === tempId ? { ...created } : row))
   300:       );
   301:       toast.success("Obyekt yaratildi");
   302:     } finally {
   303:       setSaving(false);
   304:     }
   305:   };
   306: 
   307:   // Submit edit
   308:   const submitEdit = async () => {
   309:     const errs = validateByRules(schema, {
   310:       name: formName,
   311:       orgId: formOrgId,
   312:       attributes: formAttr,
   313:     });
   314:     setFormErrors(errs);
   315:     if (hasErrors(errs)) return;
   316: 
   317:     setSaving(true);
   318:     try {
   319:       const patch = {
   320:         name: formName.trim(),
   321:         status: formStatus,
   322:         orgId: formOrgId,
   323:         attributes: normalizeNumbers(formAttr),
   324:       };
   325:       const prev = rows.find((r) => r.id === editing.id);
   326:       setRows((r) =>
   327:         r.map((row) => (row.id === editing.id ? { ...row, ...patch } : row))
   328:       );
   329:       setOpenEdit(false);
   330:       await patchFacility(editing.id, patch);
   331:       toast.success("O‘zgartirildi");
   332:     } finally {
   333:       setSaving(false);
   334:     }
   335:   };
   336: 
   337:   const onDelete = async (row) => {
   338:     if (!window.confirm(`O‘chirishni tasdiqlaysizmi?\n“${row?.name}”`)) return;
   339:     const prevRows = rows;
   340:     setRows((r) => r.filter((x) => x.id !== row.id));
   341:     setTotal((t) => Math.max(0, t - 1));
   342:     try {
   343:       await deleteFacility(row.id);
   344:       toast.success("O‘chirildi");
   345:     } catch (e) {
   346:       // Rollback
   347:       setRows(prevRows);
   348:       setTotal(prevRows.length);
   349:       toast.error("O‘chirishda xatolik");
   350:     }
   351:   };
   352: 
   353:   /* ------------------------------- Rendering ------------------------------- */
   354:   // Nomi, Tashkilot, Status, Lat, Lng, ...Atributlar..., Amallar
   355:   const baseCols = 5; // name/org/status/lat/lng
   356:   const colSpan = baseCols + attrKeysOrdered.length + 1; // + actions
   357: 
   358:   return (
   359:     <div className={s.wrapper}>
   360:       {/* Header */}
   361:       <div className={s.header}>
   362:         <div className={s.headerLeft}>
   363:           <h2 className={s.title}>
   364:             {title || schema.label} <span className={s.typePill}>{type}</span>
   365:           </h2>
   366:           <div className={s.filters}>
   367:             {/* Org select */}
   368:             <div className={s.fItem}>
   369:               <label className={s.lbl}>Tashkilot</label>
   370:               <select
   371:                 className={s.selectLike}
   372:                 value={orgId ?? ""}
   373:                 onChange={(e) =>
   374:                   setOrgId(e.target.value ? Number(e.target.value) : null)
   375:                 }
   376:               >
   377:                 <option value="">— Barchasi —</option>
   378:                 {orgOptions.map((o) => (
   379:                   <option key={o.value} value={o.value}>
   380:                     {o.label}
   381:                   </option>
   382:                 ))}
   383:               </select>
   384:             </div>
   385: 
   386:             {/* Holat */}
   387:             <div className={s.fItem}>
   388:               <label className={s.lbl}>Holat</label>
   389:               <select
   390:                 className={s.selectLike}
   391:                 value={statusFilter}
   392:                 onChange={(e) => setStatusFilter(e.target.value)}
   393:               >
   394:                 <option value="ALL">ALL</option>
   395:                 <option value="ACTIVE">ACTIVE</option>
   396:                 <option value="INACTIVE">INACTIVE</option>
   397:               </select>
   398:             </div>
   399: 
   400:             {/* Search */}
   401:             <div className={s.fItem + " " + s.grow}>
   402:               <label className={s.lbl}>Qidiruv</label>
   403:               <input
   404:                 className={s.inputLike}
   405:                 placeholder="Nomi bo‘yicha..."
   406:                 value={search}
   407:                 onChange={(e) => setSearch(e.target.value)}
   408:               />
   409:             </div>
   410:           </div>
   411:         </div>
   412: 
   413:         <div className={s.headerRight}>
   414:           <button className={s.btnPrimary} onClick={onOpenCreate}>
   415:             + Yangi
   416:           </button>
   417:         </div>
   418:       </div>
   419: 
   420:       {/* Table */}
   421:       <div className={s.tableWrap}>
   422:         <table className={s.table}>
   423:           <thead>
   424:             <tr>
   425:               <th>Nomi</th>
   426:               <th>Tashkilot</th>
   427:               <th>Holat</th>
   428:               <th>Geografik kenglik</th>
   429:               <th>Geografik uzunlik</th>
   430:               {attrKeysOrdered.map((k) => (
   431:                 <th key={k}>
   432:                   {labelByKey[k] || k}
   433:                   {suffixByKey[k] ? ` (${suffixByKey[k]})` : ""}
   434:                 </th>
   435:               ))}
   436:               <th style={{ width: 140, textAlign: "right" }}>Amallar</th>
   437:             </tr>
   438:           </thead>
   439:           <tbody>
   440:             {loading ? (
   441:               <tr>
   442:                 <td colSpan={colSpan} className={s.centerMuted}>
   443:                   Yuklanmoqda...
   444:                 </td>
   445:               </tr>
   446:             ) : rows.length === 0 ? (
   447:               <tr>
   448:                 <td colSpan={colSpan} className={s.centerMuted}>
   449:                   Ma’lumot topilmadi
   450:                 </td>
   451:               </tr>
   452:             ) : (
   453:               rows.map((r) => {
   454:                 const active = r.status === "ACTIVE";
   455:                 const a = r.attributes || {};
   456:                 return (
   457:                   <tr key={r.id}>
   458:                     <td>{r.name}</td>
   459:                     <td>{r.orgName || (r.orgId ? `#${r.orgId}` : "—")}</td>
   460:                     <td>
   461:                       <span className={active ? s.badgeGreen : s.badgeGray}>
   462:                         {r.status}
   463:                       </span>
   464:                     </td>
   465:                     <td style={{ whiteSpace: "nowrap" }}>{coord(r.lat)}</td>
   466:                     <td style={{ whiteSpace: "nowrap" }}>{coord(r.lng)}</td>
   467: 
   468:                     {attrKeysOrdered.map((k) => (
   469:                       <td key={k}>
   470:                         {a?.[k] === null ||
   471:                         a?.[k] === undefined ||
   472:                         a?.[k] === ""
   473:                           ? "—"
   474:                           : a[k]}
   475:                       </td>
   476:                     ))}
   477: 
   478:                     <td style={{ textAlign: "right" }}>
   479:                       <button className={s.btn} onClick={() => onOpenEdit(r)}>
   480:                         Tahrirlash
   481:                       </button>
   482:                       <button
   483:                         className={s.btnDanger}
   484:                         onClick={() => onDelete(r)}
   485:                       >
   486:                         O‘chirish
   487:                       </button>
   488:                     </td>
   489:                   </tr>
   490:                 );
   491:               })
   492:             )}
   493:           </tbody>
   494:         </table>
   495:       </div>
   496: 
   497:       {/* Pagination */}
   498:       <div className={s.pager}>
   499:         <div className={s.pagerInfo}>
   500:           {total > 0 ? (
   501:             <>
   502:               <b>{pageIdx * pageSize + 1}</b>–
   503:               <b>{Math.min((pageIdx + 1) * pageSize, total)}</b> / {total}
   504:             </>
   505:           ) : (
   506:             "0 / 0"
   507:           )}
   508:         </div>
   509:         <div className={s.pagerCtrls}>
   510:           <button
   511:             className={s.btn}
   512:             disabled={pageIdx === 0}
   513:             onClick={() => setPageIdx((p) => Math.max(0, p - 1))}
   514:           >
   515:             ‹ Oldingi
   516:           </button>
   517:           <button
   518:             className={s.btn}
   519:             disabled={(pageIdx + 1) * pageSize >= total}
   520:             onClick={() => setPageIdx((p) => p + 1)}
   521:           >
   522:             Keyingi ›
   523:           </button>
   524:           <select
   525:             className={s.pageSize}
   526:             value={pageSize}
   527:             onChange={(e) => {
   528:               setPageIdx(0);
   529:               setPageSize(Number(e.target.value));
   530:             }}
   531:           >
   532:             <option value={10}>10</option>
   533:             <option value={20}>20</option>
   534:             <option value={50}>50</option>
   535:             <option value={100}>100</option>
   536:           </select>
   537:         </div>
   538:       </div>
   539: 
   540:       {/* Create modal */}
   541:       <Modal
   542:         open={openCreate}
   543:         onClose={() => !saving && setOpenCreate(false)}
   544:         title={`Yangi obyekt – ${schema.label}`}
   545:         initialFocusRef={nameInputRef}
   546:         preventCloseOnBackdrop={saving}
   547:         disableEscapeClose={saving}
   548:       >
   549:         <form
   550:           onSubmit={(e) => {
   551:             e.preventDefault();
   552:             submitCreate();
   553:           }}
   554:         >
   555:           <FormFields
   556:             schema={schema}
   557:             errors={formErrors}
   558:             formName={formName}
   559:             setFormName={setFormName}
   560:             formStatus={formStatus}
   561:             setFormStatus={setFormStatus}
   562:             formOrgId={formOrgId}
   563:             setFormOrgId={setFormOrgId}
   564:             orgOptions={orgOptions}
   565:             formAttr={formAttr}
   566:             setFormAttr={setFormAttr}
   567:             nameRef={nameInputRef}
   568:           />
   569:           <div className={s.modalFooter}>
   570:             <button
   571:               className={s.btn}
   572:               onClick={() => setOpenCreate(false)}
   573:               type="button"
   574:             >
   575:               Bekor qilish
   576:             </button>
   577:             <button
   578:               className={s.btnPrimary}
   579:               type="submit"
   580:               disabled={
   581:                 !formName.trim() ||
   582:                 formOrgId == null ||
   583:                 hasErrors(formErrors) ||
   584:                 saving
   585:               }
   586:             >
   587:               {saving ? "Saqlanmoqda..." : "Saqlash"}
   588:             </button>
   589:           </div>
   590:         </form>
   591:       </Modal>
   592: 
   593:       {/* Edit modal */}
   594:       <Modal
   595:         open={openEdit}
   596:         onClose={() => !saving && setOpenEdit(false)}
   597:         title={`Tahrirlash – ${schema.label}`}
   598:         initialFocusRef={nameInputRef}
   599:         preventCloseOnBackdrop={saving}
   600:         disableEscapeClose={saving}
   601:       >
   602:         <form
   603:           onSubmit={(e) => {
   604:             e.preventDefault();
   605:             submitEdit();
   606:           }}
   607:         >
   608:           <FormFields
   609:             schema={schema}
   610:             errors={formErrors}
   611:             formName={formName}
   612:             setFormName={setFormName}
   613:             formStatus={formStatus}
   614:             setFormStatus={setFormStatus}
   615:             formOrgId={formOrgId}
   616:             setFormOrgId={setFormOrgId}
   617:             orgOptions={orgOptions}
   618:             formAttr={formAttr}
   619:             setFormAttr={setFormAttr}
   620:             nameRef={nameInputRef}
   621:           />
   622:           <div className={s.modalFooter}>
   623:             <button
   624:               className={s.btn}
   625:               onClick={() => setOpenEdit(false)}
   626:               type="button"
   627:             >
   628:               Bekor qilish
   629:             </button>
   630:             <button
   631:               className={s.btnPrimary}
   632:               type="submit"
   633:               disabled={
   634:                 !formName.trim() ||
   635:                 formOrgId == null ||
   636:                 hasErrors(formErrors) ||
   637:                 saving
   638:               }
   639:             >
   640:               {saving ? "Saqlanmoqda..." : "Saqlash"}
   641:             </button>
   642:           </div>
   643:         </form>
   644:       </Modal>
   645:     </div>
   646:   );
   647: }
   648: 
   649: /* ---------------------------- Sub components ---------------------------- */
   650: function FormFields({
   651:   schema,
   652:   errors,
   653:   formName,
   654:   setFormName,
   655:   formStatus,
   656:   setFormStatus,
   657:   formOrgId,
   658:   setFormOrgId,
   659:   orgOptions = [],
   660:   formAttr,
   661:   setFormAttr,
   662:   nameRef,
   663: }) {
   664:   const onAttr = (k, v) => setFormAttr((p) => ({ ...p, [k]: v }));
   665: 
   666:   return (
   667:     <div className={s.formGrid}>
   668:       {/* Name */}
   669:       <div className={s.formRow}>
   670:         <label className={s.lbl}>Nomi</label>
   671:         <input
   672:           ref={nameRef}
   673:           className={s.inputLike}
   674:           value={formName}
   675:           onChange={(e) => setFormName(e.target.value)}
   676:           placeholder={schema?.label || "Nomi"}
   677:         />
   678:         {errors?.name && <div className={s.err}>{errors.name}</div>}
   679:       </div>
   680: 
   681:       {/* Status */}
   682:       <div className={s.formRow}>
   683:         <label className={s.lbl}>Status</label>
   684:         <select
   685:           className={s.selectLike}
   686:           value={formStatus}
   687:           onChange={(e) => setFormStatus(e.target.value)}
   688:         >
   689:           <option value="ACTIVE">ACTIVE</option>
   690:           <option value="INACTIVE">INACTIVE</option>
   691:         </select>
   692:       </div>
   693: 
   694:       {/* Organization */}
   695:       <div className={s.formRow}>
   696:         <label className={s.lbl}>Tashkilot</label>
   697:         <select
   698:           className={s.selectLike}
   699:           value={formOrgId ?? ""}
   700:           onChange={(e) =>
   701:             setFormOrgId(e.target.value ? Number(e.target.value) : null)
   702:           }
   703:         >
   704:           <option value="">— Tanlang —</option>
   705:           {orgOptions.map((o) => (
   706:             <option key={o.value} value={o.value}>
   707:               {o.label}
   708:             </option>
   709:           ))}
   710:         </select>
   711:         {errors?.orgId && <div className={s.err}>{errors.orgId}</div>}
   712:       </div>
   713: 
   714:       {/* Dynamic attributes */}
   715:       {schema?.fields?.length ? (
   716:         <div className={s.attrsGrid}>
   717:           {schema.fields.map((f) => (
   718:             <div key={f.key} className={s.formRow}>
   719:               <label className={s.lbl}>
   720:                 {f.label}
   721:                 {f.rules?.required ? " *" : ""}
   722:                 {f.suffix ? (
   723:                   <span className={s.muted}> ({f.suffix})</span>
   724:                 ) : null}
   725:               </label>
   726:               {f.type === "text" ? (
   727:                 <input
   728:                   className={s.inputLike}
   729:                   value={formAttr[f.key] ?? ""}
   730:                   onChange={(e) => onAttr(f.key, e.target.value)}
   731:                 />
   732:               ) : (
   733:                 <input
   734:                   className={s.inputLike}
   735:                   type="number"
   736:                   value={formAttr[f.key] ?? ""}
   737:                   onChange={(e) =>
   738:                     onAttr(f.key, toNumberOrNull(e.target.value))
   739:                   }
   740:                 />
   741:               )}
   742:               {errors?.attr?.[f.key] && (
   743:                 <div className={s.err}>{errors.attr[f.key]}</div>
   744:               )}
   745:             </div>
   746:           ))}
   747:         </div>
   748:       ) : null}
   749:     </div>
   750:   );
   751: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\facilities\FacilityCrudTable.module.scss
SIZE: 7709 bytes
================================================================================
     1: /* ===== FacilityCrudTable.module.scss ===== */
     2: 
     3: /* Component-scoped tokens (global CSS variables bilan ishlaydi) */
     4: .wrapper,
     5: .root {
     6:   --fc-bg: var(--card);
     7:   --fc-fg: var(--text);
     8:   --fc-muted: var(--muted);
     9:   --fc-border: var(--border);
    10: 
    11:   --fc-row-alt: color-mix(in srgb, var(--text) 3%, var(--card));
    12:   --fc-hover: color-mix(in srgb, var(--brand) 6%, var(--card));
    13: 
    14:   --fc-accent: var(--brand);
    15:   --fc-accent-2: var(--brand-2);
    16:   --fc-ring: color-mix(in srgb, var(--brand) 24%, transparent);
    17: 
    18:   --fc-danger: var(--danger-text);
    19:   --fc-danger-bg: var(--danger-bg);
    20:   --fc-danger-br: var(--danger-border);
    21: 
    22:   --fc-shadow: var(--shadow-sm);
    23: 
    24:   background: var(--fc-bg);
    25:   color: var(--fc-fg);
    26:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
    27:   border-radius: 16px;
    28:   box-shadow: var(--fc-shadow);
    29:   padding: 16px;
    30: 
    31:   * {
    32:     box-sizing: border-box;
    33:   }
    34: }
    35: 
    36: /* ===== Header / Toolbar ===== */
    37: .header,
    38: .toolbar {
    39:   display: grid;
    40:   grid-template-columns: 1fr auto;
    41:   gap: 12px;
    42:   align-items: center;
    43:   margin-bottom: 12px;
    44: }
    45: .headerLeft,
    46: .titleWrap {
    47:   display: inline-flex;
    48:   align-items: center;
    49:   gap: 10px;
    50:   color: var(--fc-fg);
    51: }
    52: .title {
    53:   margin: 0;
    54:   font-size: 18px;
    55:   font-weight: 700;
    56:   letter-spacing: 0.2px;
    57: }
    58: .typePill,
    59: .count {
    60:   display: inline-block;
    61:   font-size: 12px;
    62:   line-height: 1;
    63:   padding: 4px 10px;
    64:   border-radius: 999px;
    65:   color: var(--fc-fg);
    66:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
    67:   background: color-mix(in srgb, var(--fc-accent) 12%, transparent);
    68: }
    69: 
    70: .filters,
    71: .controls {
    72:   display: flex;
    73:   gap: 8px;
    74:   align-items: center;
    75:   justify-content: flex-end;
    76:   flex-wrap: wrap;
    77: }
    78: .fItem {
    79:   min-width: 180px;
    80: }
    81: .grow {
    82:   flex: 1 1 auto;
    83: }
    84: 
    85: .lbl {
    86:   font-size: 12.5px;
    87:   color: var(--fc-muted);
    88:   display: block;
    89:   margin-bottom: 6px;
    90: }
    91: 
    92: /* Search (agar kerak bo‘lsa) */
    93: .search {
    94:   position: relative;
    95:   min-width: 260px;
    96: }
    97: .searchInput,
    98: .inputLike {
    99:   width: 100%;
   100:   height: 40px;
   101:   padding: 0 14px;
   102:   border-radius: 12px;
   103:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   104:   background: transparent;
   105:   color: var(--fc-fg);
   106:   outline: none;
   107:   transition: box-shadow 0.15s, border-color 0.15s, background 0.15s;
   108: }
   109: .searchInput::placeholder {
   110:   color: var(--fc-muted);
   111: }
   112: .searchIcon {
   113:   position: absolute;
   114:   left: 10px;
   115:   top: 50%;
   116:   transform: translateY(-50%);
   117:   opacity: 0.65;
   118:   font-size: 14px;
   119:   pointer-events: none;
   120: }
   121: .clearBtn {
   122:   position: absolute;
   123:   right: 6px;
   124:   top: 50%;
   125:   transform: translateY(-50%);
   126:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   127:   border-radius: 10px;
   128:   width: 26px;
   129:   height: 26px;
   130:   background: transparent;
   131:   color: var(--fc-fg);
   132:   cursor: pointer;
   133:   transition: background 0.15s, border-color 0.15s;
   134: }
   135: .clearBtn:hover {
   136:   background: var(--fc-hover);
   137: }
   138: .searchInput:focus,
   139: .inputLike:focus {
   140:   box-shadow: 0 0 0 4px var(--fc-ring);
   141:   border-color: transparent;
   142:   background: color-mix(in srgb, var(--fc-accent) 6%, transparent);
   143: }
   144: 
   145: /* Selects */
   146: .select,
   147: .selectLike {
   148:   height: 40px;
   149:   padding: 0 12px;
   150:   border-radius: 12px;
   151:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   152:   background: transparent;
   153:   color: var(--fc-fg);
   154:   outline: none;
   155:   transition: box-shadow 0.15s, border-color 0.15s;
   156: }
   157: .select:focus,
   158: .selectLike:focus {
   159:   box-shadow: 0 0 0 4px var(--fc-ring);
   160:   border-color: transparent;
   161: }
   162: 
   163: /* Buttons */
   164: .btn {
   165:   height: 40px;
   166:   padding: 0 14px;
   167:   border-radius: 12px;
   168:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   169:   background: transparent;
   170:   color: var(--fc-fg);
   171:   cursor: pointer;
   172:   transition: transform 0.03s, box-shadow 0.15s, background 0.15s,
   173:     border-color 0.15s;
   174: }
   175: .btn:hover {
   176:   background: var(--fc-hover);
   177: }
   178: .btn:active {
   179:   transform: translateY(1px);
   180: }
   181: .btnPrimary {
   182:   background: linear-gradient(135deg, var(--fc-accent), var(--fc-accent-2));
   183:   border-color: transparent;
   184:   color: #fff;
   185:   font-weight: 600;
   186:   box-shadow: 0 6px 18px color-mix(in srgb, var(--fc-accent) 35%, transparent);
   187: }
   188: .btnDanger {
   189:   background: var(--fc-danger-bg);
   190:   border-color: var(--fc-danger-br);
   191:   color: var(--fc-danger);
   192: }
   193: 
   194: /* ===== Table ===== */
   195: .tableWrap {
   196:   overflow-x: auto;
   197:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   198:   border-radius: 14px;
   199:   background-color: var(--fc-bg);
   200:   box-shadow: var(--fc-shadow);
   201: }
   202: .table {
   203:   width: 100%;
   204:   border-collapse: separate;
   205:   border-spacing: 0;
   206:   color: var(--fc-fg);
   207:   font-size: 14px;
   208:   background-color: var(--fc-bg);
   209: }
   210: .table thead th {
   211:   position: sticky;
   212:   top: 0;
   213:   background-color: var(--fc-bg);
   214:   text-align: left;
   215:   font-weight: 700;
   216:   padding: 12px;
   217:   border-bottom: 1px solid var(--fc-border);
   218:   white-space: nowrap;
   219: }
   220: .table tbody td {
   221:   padding: 12px;
   222:   border-bottom: 1px solid var(--fc-border);
   223:   vertical-align: middle;
   224:   background-color: var(--fc-bg);
   225: }
   226: .table tbody tr:nth-child(2n) td {
   227:   background-color: var(--fc-row-alt);
   228: }
   229: .table tbody tr:hover td {
   230:   background-color: var(--fc-hover);
   231: }
   232: 
   233: .centerMuted {
   234:   text-align: center;
   235:   color: var(--fc-muted);
   236: }
   237: 
   238: /* Status badges */
   239: .badgeGreen,
   240: .badgeGray,
   241: .status {
   242:   display: inline-flex;
   243:   align-items: center;
   244:   gap: 6px;
   245:   font-size: 12px;
   246:   padding: 4px 10px;
   247:   border-radius: 999px;
   248:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   249: }
   250: .badgeGreen {
   251:   color: var(--fc-accent);
   252:   border-color: color-mix(in srgb, var(--fc-accent) 35%, transparent);
   253: }
   254: .badgeGray {
   255:   color: var(--fc-muted);
   256: }
   257: .dot {
   258:   width: 8px;
   259:   height: 8px;
   260:   border-radius: 999px;
   261:   background: var(--fc-muted);
   262: }
   263: .active {
   264:   color: var(--fc-accent);
   265:   border-color: color-mix(in srgb, var(--fc-accent) 35%, transparent);
   266: }
   267: .active .dot {
   268:   background: var(--fc-accent);
   269: }
   270: 
   271: /* ===== Form (Modal ichida) ===== */
   272: .formGrid,
   273: .form {
   274:   display: grid;
   275:   gap: 14px;
   276: }
   277: .formRow,
   278: .field {
   279:   display: grid;
   280:   gap: 6px;
   281: }
   282: .attrsGrid,
   283: .grid3 {
   284:   display: grid;
   285:   gap: 10px;
   286:   grid-template-columns: repeat(3, minmax(0, 1fr));
   287: }
   288: 
   289: .modalFooter {
   290:   margin-top: 12px;
   291:   display: flex;
   292:   justify-content: flex-end;
   293:   gap: 8px;
   294: }
   295: 
   296: /* Errors */
   297: .err {
   298:   color: #d92d20;
   299:   font-size: 12px;
   300:   margin-top: 4px;
   301: }
   302: 
   303: /* ===== Pagination ===== */
   304: .pager {
   305:   margin-top: 12px;
   306:   display: flex;
   307:   align-items: center;
   308:   justify-content: space-between;
   309: }
   310: .pagerInfo {
   311:   font-size: 13px;
   312:   color: var(--fc-muted, #475467);
   313: }
   314: .pagerCtrls {
   315:   display: flex;
   316:   gap: 8px;
   317:   align-items: center;
   318: }
   319: .pagerCtrls .btn {
   320:   padding: 6px 10px;
   321:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   322:   border-radius: 8px;
   323:   background: var(--fc-bg);
   324: }
   325: .pageSize {
   326:   padding: 6px 8px;
   327:   border: 1px solid var(--fc-border, var(--md-border, #e5e7eb));
   328:   border-radius: 8px;
   329:   background: transparent;
   330:   color: var(--fc-fg);
   331: }
   332: 
   333: /* ---- Modal content enhancements ---- */
   334: .modalFooter {
   335:   position: sticky;
   336:   bottom: 0;
   337:   padding: 10px;
   338:   margin-top: 12px;
   339:   background: linear-gradient(
   340:     to top,
   341:     var(--fc-bg),
   342:     color-mix(in srgb, var(--fc-bg) 85%, transparent)
   343:   );
   344:   border-top: 1px solid var(--fc-border);
   345:   display: flex;
   346:   justify-content: flex-end;
   347:   gap: 8px;
   348:   z-index: 1;
   349: }
   350: .muted {
   351:   color: var(--fc-muted);
   352: }
   353: 
   354: /* Responsive attributes grid (forma) */
   355: .attrsGrid {
   356:   display: grid;
   357:   gap: 10px;
   358:   grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
   359: }
   360: @media (max-width: 640px) {
   361:   .attrsGrid {
   362:     grid-template-columns: 1fr;
   363:   }
   364: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\facilities\FacilityForm.jsx
SIZE: 14010 bytes
================================================================================
     1: import { useEffect, useMemo, useState } from "react";
     2: import OrgUnitSelect from "../../pages/admin/OrgUnitSelect";
     3: import MapPickerModal from "../map/MapPickerModal";
     4: import { getOrgUnit, locateOrg } from "../../api/org";
     5: import { toast } from "react-toastify";
     6: 
     7: const TYPE_OPTIONS = [
     8:   { value: "GREENHOUSE", label: "Issiqxona" },
     9:   { value: "POULTRY_MEAT", label: "Tovuqxona (go'sht)" },
    10:   { value: "POULTRY_EGG", label: "Tovuqxona (tuxum)" },
    11:   { value: "COWSHED", label: "Molxona" },
    12:   { value: "TURKEY", label: "Kurkaxona" },
    13:   { value: "SHEEPFOLD", label: "Qo‘yxona" },
    14:   { value: "WORKSHOP_SAUSAGE", label: "Ishlab chiqarish sexi (kolbasa)" },
    15:   { value: "WORKSHOP_COOKIE", label: "Ishlab chiqarish sexi (pechenye)" },
    16:   { value: "AUX_LAND", label: "Yordamchi xo‘jalik yeri" },
    17:   { value: "BORDER_LAND", label: "Chegara oldi yeri" },
    18:   { value: "FISHPOND", label: "Baliqchilik ko‘li" },
    19: ];
    20: 
    21: const STATUS_OPTIONS = [
    22:   { value: "ACTIVE", label: "Active" },
    23:   { value: "INACTIVE", label: "Inactive" },
    24:   { value: "UNDER_MAINTENANCE", label: "Maintenance" },
    25: ];
    26: 
    27: /** type bo‘yicha atributlar */
    28: const ATTR_SCHEMAS = {
    29:   GREENHOUSE: [
    30:     {
    31:       key: "totalAreaHa",
    32:       label: "Umumiy yer maydoni (gektar)",
    33:       type: "number",
    34:     },
    35:     { key: "heatingType", label: "Isitish tizimi turi", type: "text" },
    36:     {
    37:       key: "expectedYield",
    38:       label: "Olinadigan hosildorlik miqdori",
    39:       type: "number",
    40:     },
    41:     {
    42:       key: "expectedRevenue",
    43:       label: "Olinadigan daromad miqdori",
    44:       type: "number",
    45:     },
    46:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
    47:   ],
    48:   POULTRY: [
    49:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
    50:     { key: "capacity", label: "Umumiy sig‘imi (son)", type: "int" },
    51:     { key: "current", label: "Hozirda mavjud (son)", type: "int" },
    52:     {
    53:       key: "productAmount",
    54:       label: "Olinadigan mahsulot (kg / dona)",
    55:       type: "number",
    56:     },
    57:     { key: "productUnit", label: "Mahsulot birligi (kg | pcs)", type: "text" },
    58:     { key: "expectedRevenue", label: "Olinadigan daromad", type: "number" },
    59:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
    60:   ],
    61:   COWSHED: [
    62:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
    63:     { key: "capacity", label: "Umumiy sig‘imi (son)", type: "int" },
    64:     { key: "current", label: "Hozirda mavjud (son)", type: "int" },
    65:     { key: "productAmount", label: "Olinadigan mahsulot (kg)", type: "number" },
    66:     { key: "expectedRevenue", label: "Olinadigan daromad", type: "number" },
    67:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
    68:   ],
    69:   TURKEY: [
    70:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
    71:     { key: "capacity", label: "Umumiy sig‘imi (son)", type: "int" },
    72:     { key: "current", label: "Hozirda mavjud (son)", type: "int" },
    73:     { key: "productAmount", label: "Olinadigan mahsulot (kg)", type: "number" },
    74:     { key: "expectedRevenue", label: "Olinadigan daromad", type: "number" },
    75:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
    76:   ],
    77:   SHEEPFOLD: [
    78:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
    79:     { key: "capacity", label: "Umumiy sig‘imi (son)", type: "int" },
    80:     { key: "current", label: "Hozirda mavjud (son)", type: "int" },
    81:     { key: "productAmount", label: "Olinadigan mahsulot (kg)", type: "number" },
    82:     { key: "expectedRevenue", label: "Olinadigan daromad", type: "number" },
    83:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
    84:   ],
    85:   WORKSHOP: [
    86:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
    87:     { key: "productAmount", label: "Olinadigan mahsulot (kg)", type: "number" },
    88:     { key: "expectedRevenue", label: "Olinadigan daromad", type: "number" },
    89:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
    90:   ],
    91:   AUX_LAND: [
    92:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
    93:     { key: "expectedYield", label: "Olinadigan hosil miqdori", type: "number" },
    94:     {
    95:       key: "expectedRevenue",
    96:       label: "Olinadigan daromad miqdori",
    97:       type: "number",
    98:     },
    99:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
   100:     { key: "tenant", label: "Ijarachi", type: "text" },
   101:     { key: "govDecision", label: "Hukumat qarori", type: "text" },
   102:   ],
   103:   BORDER_LAND: [
   104:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
   105:     { key: "expectedYield", label: "Olinadigan hosil miqdori", type: "number" },
   106:     {
   107:       key: "expectedRevenue",
   108:       label: "Olinadigan daromad miqdori",
   109:       type: "number",
   110:     },
   111:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
   112:     { key: "tenant", label: "Ijarachi", type: "text" },
   113:     { key: "govDecision", label: "Hukumat qarori", type: "text" },
   114:   ],
   115:   FISHPOND: [
   116:     { key: "areaM2", label: "Umumiy yer maydoni (m²)", type: "number" },
   117:     {
   118:       key: "productAmount",
   119:       label: "Olinadigan mahsulot miqdori (kg)",
   120:       type: "number",
   121:     },
   122:     {
   123:       key: "expectedRevenue",
   124:       label: "Olinadigan daromad miqdori",
   125:       type: "number",
   126:     },
   127:     { key: "netProfit", label: "Olingan sof foyda", type: "number" },
   128:     { key: "tenant", label: "Ijarachi", type: "text" },
   129:     { key: "govDecision", label: "Hukumat qarori", type: "text" },
   130:   ],
   131: };
   132: 
   133: function parseVal(raw, t) {
   134:   if (raw === "" || raw === null || raw === undefined) return null;
   135:   if (t === "int")
   136:     return Number.isFinite(Number(raw)) ? parseInt(raw, 10) : null;
   137:   if (t === "number") return Number.isFinite(Number(raw)) ? Number(raw) : null;
   138:   return String(raw);
   139: }
   140: 
   141: export default function FacilityForm({ initial, onSubmit, onCancel }) {
   142:   const [orgId, setOrgId] = useState(initial?.orgId ?? null);
   143:   const [orgObj, setOrgObj] = useState(null); // {id,name,code,parentId}
   144:   const [name, setName] = useState(initial?.name ?? "");
   145:   const [type, setType] = useState(initial?.type ?? "GREENHOUSE");
   146:   const [status, setStatus] = useState(initial?.status ?? "ACTIVE");
   147:   const [lat, setLat] = useState(initial?.lat ?? "");
   148:   const [lng, setLng] = useState(initial?.lng ?? "");
   149:   const [zoom, setZoom] = useState(initial?.zoom ?? "");
   150:   const [attributes, setAttributes] = useState(() => ({
   151:     ...(initial?.attributes || {}),
   152:   }));
   153: 
   154:   // MapPickerModal holati
   155:   const [pickerOpen, setPickerOpen] = useState(false);
   156:   const [pickerInit, setPickerInit] = useState(null); // {lat,lng,zoom} — modalga boshlang‘ich markaz
   157: 
   158:   const schema = useMemo(() => ATTR_SCHEMAS[type] || [], [type]);
   159: 
   160:   useEffect(() => {
   161:     setAttributes((prev) => ({ ...prev })); // schema almashganda eski qiymatlar saqlansin
   162:   }, [type]);
   163: 
   164:   const handleAttrChange = (k, v, t) =>
   165:     setAttributes((prev) => ({ ...prev, [k]: parseVal(v, t) }));
   166: 
   167:   const canSave =
   168:     orgId != null &&
   169:     name.trim().length > 0 &&
   170:     String(lat).length > 0 &&
   171:     String(lng).length > 0;
   172: 
   173:   async function openPicker() {
   174:     if (!orgId) {
   175:       toast.info("Avval tashkilotni tanlang.");
   176:       return;
   177:     }
   178:     // 1) Agar formaning o‘zida lat/lng bor bo‘lsa — shu markazdan ochamiz
   179:     if (lat !== "" && lng !== "") {
   180:       setPickerInit({
   181:         lat: Number(lat),
   182:         lng: Number(lng),
   183:         zoom: Number(zoom || 14),
   184:       });
   185:       setPickerOpen(true);
   186:       return;
   187:     }
   188:     // 2) Org koordinatasi bo‘lsa — undan foydalanamiz
   189:     try {
   190:       const org = await getOrgUnit(orgId).catch(() => null); // OrgDto {lat,lng,zoom,...}
   191:       if (org?.lat != null && org?.lng != null) {
   192:         setPickerInit({ lat: org.lat, lng: org.lng, zoom: org.zoom ?? 14 });
   193:         setPickerOpen(true);
   194:         return;
   195:       }
   196:     } catch {}
   197:     // 3) locate orqali viewport kelgan bo‘lsa — markazini hisoblab beramiz
   198:     try {
   199:       if (orgObj?.code) {
   200:         const loc = await locateOrg(orgObj.code).catch(() => null);
   201:         const vp = loc?.viewport;
   202:         if (
   203:           vp?.minLat != null &&
   204:           vp?.maxLat != null &&
   205:           vp?.minLng != null &&
   206:           vp?.maxLng != null
   207:         ) {
   208:           const cLat = (vp.minLat + vp.maxLat) / 2;
   209:           const cLng = (vp.minLng + vp.maxLng) / 2;
   210:           setPickerInit({ lat: cLat, lng: cLng, zoom: vp.zoom ?? 12 });
   211:           setPickerOpen(true);
   212:           return;
   213:         }
   214:       }
   215:     } catch {}
   216:     // 4) Fallback: default markaz
   217:     setPickerInit(null);
   218:     setPickerOpen(true);
   219:   }
   220: 
   221:   const submit = (e) => {
   222:     e.preventDefault();
   223:     if (!canSave) {
   224:       toast.warn("Tashkilot bo‘limi va koordinata (lat/lng) majburiy.");
   225:       return;
   226:     }
   227:     const payload = {
   228:       orgId: orgId ? Number(orgId) : null,
   229:       name: name?.trim(),
   230:       type,
   231:       status,
   232:       lat: lat === "" ? null : Number(lat),
   233:       lng: lng === "" ? null : Number(lng),
   234:       zoom: zoom === "" ? null : Number(zoom),
   235:       attributes,
   236:       geometry: initial?.geometry ?? null,
   237:     };
   238:     onSubmit(payload);
   239:   };
   240: 
   241:   return (
   242:     <>
   243:       <form onSubmit={submit} className="facility-form-inner">
   244:         <div className="form-grid">
   245:           {/* Org tanlash */}
   246:           <div className="field">
   247:             <label>Tashkilot bo‘limi *</label>
   248:             <OrgUnitSelect
   249:               value={orgId}
   250:               onChange={(opt) => {
   251:                 setOrgId(opt?.id ?? null);
   252:                 setOrgObj(opt || null);
   253:               }}
   254:               placeholder="Tashkilotni qidiring..."
   255:               allowClear
   256:             />
   257:             {!orgId && (
   258:               <div className="hint" style={{ color: "#fb7185" }}>
   259:                 Majburiy maydon
   260:               </div>
   261:             )}
   262:           </div>
   263: 
   264:           {/* Nomi */}
   265:           <div className="field">
   266:             <label>Nomi *</label>
   267:             <input
   268:               value={name}
   269:               onChange={(e) => setName(e.target.value)}
   270:               placeholder="Obyekt nomi"
   271:             />
   272:           </div>
   273: 
   274:           {/* Type / Status / Zoom */}
   275:           <div className="grid3">
   276:             <div className="field">
   277:               <label>Turi</label>
   278:               <select value={type} onChange={(e) => setType(e.target.value)}>
   279:                 {TYPE_OPTIONS.map((o) => (
   280:                   <option key={o.value} value={o.value}>
   281:                     {o.label}
   282:                   </option>
   283:                 ))}
   284:               </select>
   285:             </div>
   286:             <div className="field">
   287:               <label>Status</label>
   288:               <select
   289:                 value={status}
   290:                 onChange={(e) => setStatus(e.target.value)}
   291:               >
   292:                 {STATUS_OPTIONS.map((o) => (
   293:                   <option key={o.value} value={o.value}>
   294:                     {o.label}
   295:                   </option>
   296:                 ))}
   297:               </select>
   298:             </div>
   299:             <div className="field">
   300:               <label>Zoom (ixtiyoriy)</label>
   301:               <input
   302:                 type="number"
   303:                 value={zoom ?? ""}
   304:                 onChange={(e) => setZoom(e.target.value)}
   305:               />
   306:             </div>
   307:           </div>
   308: 
   309:           {/* Koordinata + MapPicker */}
   310:           <div className="grid3">
   311:             <div className="field">
   312:               <label>Lat *</label>
   313:               <input
   314:                 type="number"
   315:                 value={lat ?? ""}
   316:                 onChange={(e) => setLat(e.target.value)}
   317:               />
   318:             </div>
   319:             <div className="field">
   320:               <label>Lng *</label>
   321:               <input
   322:                 type="number"
   323:                 value={lng ?? ""}
   324:                 onChange={(e) => setLng(e.target.value)}
   325:               />
   326:             </div>
   327:             <div className="field">
   328:               <label>&nbsp;</label>
   329:               <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
   330:                 <button type="button" className="btn" onClick={openPicker}>
   331:                   Xaritadan tanlash
   332:                 </button>
   333:                 <div className="hint">
   334:                   Koordinata bo‘lmasa obyekt xaritada ko‘rinmaydi.
   335:                 </div>
   336:               </div>
   337:             </div>
   338:           </div>
   339: 
   340:           {/* Atributlar */}
   341:           <div className="field">
   342:             <label>Ma’lumotlar (type bo‘yicha)</label>
   343:             <div className="grid3">
   344:               {schema.map((f) => (
   345:                 <div className="field" key={f.key}>
   346:                   <label>{f.label}</label>
   347:                   <input
   348:                     type={f.type === "text" ? "text" : "number"}
   349:                     value={attributes?.[f.key] ?? ""}
   350:                     onChange={(e) =>
   351:                       handleAttrChange(f.key, e.target.value, f.type)
   352:                     }
   353:                   />
   354:                 </div>
   355:               ))}
   356:             </div>
   357:           </div>
   358:         </div>
   359: 
   360:         <div className="modal-actions">
   361:           <button type="button" className="btn" onClick={onCancel}>
   362:             Bekor qilish
   363:           </button>
   364:           <button type="submit" className="btn primary" disabled={!canSave}>
   365:             Saqlash
   366:           </button>
   367:         </div>
   368:       </form>
   369: 
   370:       {/* BOR MapPickerModal’dan foydalanamiz */}
   371:       <MapPickerModal
   372:         open={pickerOpen}
   373:         onClose={() => setPickerOpen(false)}
   374:         title="Joylashuvni tanlang"
   375:         value={
   376:           pickerInit ||
   377:           (lat && lng
   378:             ? { lat: Number(lat), lng: Number(lng), zoom: Number(zoom || 14) }
   379:             : undefined)
   380:         }
   381:         onSave={({ lat: la, lng: ln, zoom: zm }) => {
   382:           setLat(la);
   383:           setLng(ln);
   384:           if (zm != null) setZoom(zm);
   385:         }}
   386:         // Appingizda dark tema bo‘lsa xohlasangiz: dark={true}
   387:       />
   388:     </>
   389:   );
   390: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\layout\AppShell.jsx
SIZE: 1061 bytes
================================================================================
     1: // src/components/layout/AppShell.jsx
     2: import HeaderBar from "./HeaderBar";
     3: import { Outlet } from "react-router-dom";
     4: import { useEffect } from "react";
     5: import { toast } from "react-toastify";
     6: 
     7: export default function AppShell({ admin = false }) {
     8:   // Sessiya tugashidan oldin ogohlantirish (sessionManager dispatch qiladi)
     9:   useEffect(() => {
    10:     const handler = (e) => {
    11:       const ms = e?.detail?.inMs || 60000;
    12:       const sec = Math.round(ms / 1000);
    13:       toast.warn(
    14:         `Sessiya ${sec} soniyadan so'ng tugaydi. Faollashtirish uchun sahifada harakat qiling.`
    15:       );
    16:     };
    17:     window.addEventListener("session:expiring", handler);
    18:     return () => window.removeEventListener("session:expiring", handler);
    19:   }, []);
    20:   // admin flag’ini data-attribut sifatida bersak, ichki komponentlarda CSS orqali tugmalarni yashirishimiz mumkin
    21:   return (
    22:     <div className="appshell" data-admin={admin ? "true" : "false"}>
    23:       <HeaderBar />
    24:       <main className="app-main">
    25:         <Outlet />
    26:       </main>
    27:     </div>
    28:   );
    29: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\layout\HeaderBar.jsx
SIZE: 1555 bytes
================================================================================
     1: // src/components/shell/HeaderBar.jsx
     2: import { LuMoon, LuSun, LuMenu } from "react-icons/lu";
     3: import { useNavigate } from "react-router-dom";
     4: import { useAuth } from "../../hooks/useAuth";
     5: import styles from "./HeaderBar.module.scss";
     6: import appLogo from "../../assets/zamin-logo.png";
     7: 
     8: export default function HeaderBar({ dark, onToggleTheme, onHamburger }) {
     9:   const nav = useNavigate();
    10:   const { username, role } = useAuth();
    11: 
    12:   // E'TIBOR: bu yerda tokenni O'CHIRMAYMIZ
    13:   const onLogout = () => {
    14:     nav("/login", { replace: true }); // “Hisob boshqaruvi” ekraniga
    15:   };
    16: 
    17:   return (
    18:     <header className={styles.header} data-theme={dark ? "dark" : "light"}>
    19:       <button className={styles.iconBtn} onClick={onHamburger}>
    20:         <LuMenu size={18} />
    21:       </button>
    22: 
    23:       <div
    24:         className={styles.brand}
    25:         onClick={() => nav("/dashboard")}
    26:         role="button"
    27:         tabIndex={0}
    28:       >
    29:         <img className={styles.brandLogoSm} src={appLogo} alt="Zamin" />
    30:         <span>Zamin</span>
    31:       </div>
    32: 
    33:       <div className={styles.grow} />
    34: 
    35:       <button className={styles.iconBtn} onClick={onToggleTheme}>
    36:         {dark ? <LuSun size={18} /> : <LuMoon size={18} />}
    37:       </button>
    38: 
    39:       <div className={styles.userbox}>
    40:         <span className={styles.role}>{role || "USER"}</span>
    41:         <span className={styles.username}>{username}</span>
    42:         <button className={styles.logoutBtn} onClick={onLogout}>
    43:           Chiqish
    44:         </button>
    45:       </div>
    46:     </header>
    47:   );
    48: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\layout\HeaderBar.module.scss
SIZE: 2424 bytes
================================================================================
     1: /* Scoped HeaderBar — dark/light toggle bilan to'liq mos */
     2: 
     3: .header {
     4:   /* LIGHT tokens */
     5:   --hb-bg: #ffffff;
     6:   --hb-fg: #0f172a;
     7:   --hb-border: #e5e7eb;
     8: 
     9:   --btn-bg: #ffffff;
    10:   --btn-fg: var(--hb-fg);
    11:   --btn-border: var(--hb-border);
    12: 
    13:   --chip-bg: #ecfdf5;
    14:   --chip-fg: #065f46;
    15:   --chip-border: #a7f3d0;
    16: 
    17:   height: 60px;
    18:   display: flex;
    19:   align-items: center;
    20:   gap: 10px;
    21:   padding: 0 12px;
    22:   border-bottom: 1px solid var(--hb-border);
    23:   background: var(--hb-bg);
    24:   color: var(--hb-fg);
    25:   position: sticky;
    26:   top: 0;
    27:   z-index: 10;
    28: }
    29: 
    30: /* DARK override */
    31: :where(.dark, [data-theme="dark"], .theme-dark) .header,
    32: .header[data-theme="dark"] {
    33:   --hb-bg: #0f172a;
    34:   --hb-fg: #e6eef9;
    35:   --hb-border: #1f2937;
    36: 
    37:   --btn-bg: #141c2b;
    38:   --btn-fg: var(--hb-fg);
    39:   --btn-border: #253045;
    40: 
    41:   --chip-bg: #0b2b22;
    42:   --chip-fg: #a7f3d0;
    43:   --chip-border: #134e4a;
    44: }
    45: 
    46: /* Controls */
    47: .iconBtn {
    48:   border: 1px solid var(--btn-border);
    49:   background: var(--btn-bg);
    50:   color: var(--btn-fg);
    51:   border-radius: 10px;
    52:   padding: 6px 10px;
    53:   cursor: pointer;
    54:   transition: background 0.15s ease, border-color 0.15s ease,
    55:     transform 0.03s ease-in-out;
    56: }
    57: .iconBtn:hover {
    58:   filter: brightness(0.98);
    59: }
    60: .iconBtn:active {
    61:   transform: translateY(1px);
    62: }
    63: 
    64: /* Brand (logo + text) */
    65: .brand {
    66:   display: flex;
    67:   align-items: center;
    68:   gap: 8px;
    69:   font-weight: 800;
    70:   letter-spacing: 0.2px;
    71:   color: var(--hb-fg);
    72:   user-select: none;
    73: }
    74: .brandLogoSm {
    75:   width: 22px;
    76:   height: 22px;
    77:   object-fit: contain;
    78:   filter: drop-shadow(0 0 10px rgba(34, 197, 94, 0.45));
    79: }
    80: .header[data-theme="dark"] .brandLogoSm {
    81:   filter: drop-shadow(0 0 14px rgba(34, 197, 94, 0.6));
    82: }
    83: 
    84: .grow {
    85:   flex: 1 1 auto;
    86: }
    87: 
    88: .userbox {
    89:   display: flex;
    90:   align-items: center;
    91:   gap: 10px;
    92: }
    93: .role {
    94:   font-size: 12px;
    95:   padding: 2px 8px;
    96:   border-radius: 999px;
    97:   background: var(--chip-bg);
    98:   color: var(--chip-fg);
    99:   border: 1px solid var(--chip-border);
   100: }
   101: .username {
   102:   opacity: 0.8;
   103: }
   104: 
   105: .logoutBtn {
   106:   border: 1px solid var(--btn-border);
   107:   background: var(--btn-bg);
   108:   color: var(--btn-fg);
   109:   border-radius: 10px;
   110:   padding: 6px 10px;
   111:   cursor: pointer;
   112:   transition: background 0.15s ease, border-color 0.15s ease,
   113:     transform 0.03s ease-in-out;
   114: }
   115: .logoutBtn:hover {
   116:   filter: brightness(0.98);
   117: }
   118: .logoutBtn:active {
   119:   transform: translateY(1px);
   120: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\CinematicIntro.jsx
SIZE: 11353 bytes
================================================================================
     1: import { useEffect, useRef, useCallback } from "react";
     2: import { useMap } from "react-leaflet";
     3: import L from "leaflet";
     4: 
     5: /**
     6:  * Yengil intro parvoz (low/medium/high), by default — "auto".
     7:  * Intro tugaguncha interaksiyani muzlatadi va istasa tile’larni dim qiladi.
     8:  * onStart/onDone — MapView’da og‘ir qatlamlarni kechiktirish uchun.
     9:  */
    10: export default function CinematicIntro({
    11:   enabled = true,
    12:   target, // { lat, lng, zoom }
    13:   delayMs = 350,
    14: 
    15:   quality = "auto", // "auto" | "low" | "medium" | "high"
    16:   drawPath = false, // faqat high’da ishlatiladi, default o‘chiq
    17:   showOverlay = false, // default o‘chiq — eng yengil
    18:   freezeInteractions = true,
    19:   tilesDim = false, // default o‘chiq — eng yengil
    20: 
    21:   // davomiyliklar (ms)
    22:   midDurationMs = 900,
    23:   finalDurationMs = 900,
    24: 
    25:   // whenReady kutilsa ham fallback
    26:   maxWaitReadyMs = 500,
    27: 
    28:   onStart,
    29:   onDone,
    30: }) {
    31:   const map = useMap();
    32: 
    33:   const didRunRef = useRef(false);
    34:   const overlayRef = useRef(null);
    35:   const groupRef = useRef(null);
    36:   const rafRef = useRef(null);
    37:   const timersRef = useRef([]);
    38:   const doneCalledRef = useRef(false);
    39: 
    40:   const isValid = (t) =>
    41:     t &&
    42:     Number.isFinite(t.lat) &&
    43:     Number.isFinite(t.lng) &&
    44:     Number.isFinite(t.zoom);
    45: 
    46:   const callDoneOnce = useCallback(() => {
    47:     if (doneCalledRef.current) return;
    48:     doneCalledRef.current = true;
    49:     try {
    50:       onDone?.();
    51:     } catch {}
    52:   }, [onDone]);
    53: 
    54:   const clearTimer = (id) => {
    55:     try {
    56:       clearTimeout(id);
    57:     } catch {}
    58:   };
    59: 
    60:   const cleanup = useCallback(() => {
    61:     try {
    62:       if (rafRef.current) cancelAnimationFrame(rafRef.current);
    63:       timersRef.current.forEach(clearTimer);
    64:       timersRef.current = [];
    65:       try {
    66:         groupRef.current?.remove();
    67:       } catch {}
    68:       groupRef.current = null;
    69:       if (overlayRef.current) {
    70:         try {
    71:           overlayRef.current.remove();
    72:         } catch {}
    73:         overlayRef.current = null;
    74:       }
    75:       if (freezeInteractions) unfreeze();
    76:       if (tilesDim) setTilesOpacity(1);
    77:     } finally {
    78:       callDoneOnce();
    79:     }
    80:   }, [freezeInteractions, tilesDim, unfreeze, callDoneOnce, setTilesOpacity]);
    81: 
    82:   const ensureGroup = useCallback(() => {
    83:     if (!groupRef.current) groupRef.current = L.layerGroup().addTo(map);
    84:     return groupRef.current;
    85:   }, [map]);
    86: 
    87:   const addOverlay = useCallback(() => {
    88:     if (!showOverlay) return;
    89:     const el = document.createElement("div");
    90:     Object.assign(el.style, {
    91:       position: "absolute",
    92:       inset: 0,
    93:       pointerEvents: "none",
    94:       background:
    95:         "radial-gradient(ellipse at center, rgba(0,0,0,0.26) 0%, rgba(0,0,0,0.42) 60%, rgba(0,0,0,0.52) 100%)",
    96:       opacity: "0",
    97:       transition: "opacity .35s ease",
    98:       zIndex: 500,
    99:     });
   100:     map.getContainer().appendChild(el);
   101:     requestAnimationFrame(() => (el.style.opacity = "1"));
   102:     overlayRef.current = el;
   103:   }, [showOverlay, map]);
   104: 
   105:   const fadeOutOverlay = useCallback(() => {
   106:     if (!overlayRef.current) return;
   107:     overlayRef.current.style.opacity = "0";
   108:     timersRef.current.push(
   109:       setTimeout(() => {
   110:         try {
   111:           overlayRef.current?.remove();
   112:         } catch {}
   113:         overlayRef.current = null;
   114:       }, 350)
   115:     );
   116:   }, []);
   117: 
   118:   const setTilesOpacity = useCallback(
   119:     (op) => {
   120:       map.eachLayer((l) => {
   121:         if (l instanceof L.TileLayer && typeof l.setOpacity === "function") {
   122:           l.setOpacity(op);
   123:         }
   124:       });
   125:     },
   126:     [map]
   127:   );
   128: 
   129:   const freeze = useCallback(() => {
   130:     try {
   131:       map.dragging.disable();
   132:       map.scrollWheelZoom.disable();
   133:       map.doubleClickZoom.disable();
   134:       map.boxZoom.disable();
   135:       map.touchZoom.disable();
   136:       map.keyboard.disable();
   137:     } catch {}
   138:   }, [map]);
   139:   const unfreeze = useCallback(() => {
   140:     try {
   141:       map.dragging.enable();
   142:       map.scrollWheelZoom.enable();
   143:       map.doubleClickZoom.enable();
   144:       map.boxZoom.enable();
   145:       map.touchZoom.enable();
   146:       map.keyboard.enable();
   147:     } catch {}
   148:   }, [map]);
   149: 
   150:   const autoQuality = useCallback(() => {
   151:     if (quality !== "auto") return quality;
   152:     // Reduce Motion → low
   153:     if (
   154:       typeof window !== "undefined" &&
   155:       window.matchMedia &&
   156:       window.matchMedia("(prefers-reduced-motion: reduce)").matches
   157:     ) {
   158:       return "low";
   159:     }
   160:     const dm = navigator.deviceMemory || 4;
   161:     const hc = navigator.hardwareConcurrency || 4;
   162:     const pr = window.devicePixelRatio || 1;
   163:     // Kuchsiz / yuqori dpi bo‘lsa — low; aks holda medium
   164:     if (dm <= 4 || hc <= 4 || pr > 2.5) return "low";
   165:     return "medium";
   166:   }, [quality]);
   167: 
   168:   const animateDot = useCallback(
   169:     (polyline, duration = 800) => {
   170:       if (!polyline) return;
   171:       const group = ensureGroup();
   172:       const path = polyline.getLatLngs();
   173:       if (!path?.length) return;
   174:       const dot = L.circleMarker(path[0], {
   175:         radius: 3.5,
   176:         color: "#60A5FA",
   177:         weight: 2,
   178:         fillColor: "#fff",
   179:         fillOpacity: 0.9,
   180:       }).addTo(group);
   181: 
   182:       const t0 = performance.now();
   183:       const step = (now) => {
   184:         const p = Math.min(1, (now - t0) / duration);
   185:         const idx = Math.floor(p * (path.length - 1));
   186:         dot.setLatLng(path[idx]);
   187:         if (p < 1) rafRef.current = requestAnimationFrame(step);
   188:         else
   189:           timersRef.current.push(
   190:             setTimeout(() => {
   191:               try {
   192:                 dot.remove();
   193:               } catch {}
   194:             }, 120)
   195:           );
   196:       };
   197:       rafRef.current = requestAnimationFrame(step);
   198:     },
   199:     [ensureGroup]
   200:   );
   201: 
   202:   const ripple = useCallback(
   203:     (latlng) => {
   204:       const group = ensureGroup();
   205:       const c = L.circle(latlng, {
   206:         radius: 40,
   207:         color: "#4F46E5",
   208:         weight: 2,
   209:         fillColor: "#6366F1",
   210:         fillOpacity: 0.22,
   211:       }).addTo(group);
   212:       const t0 = performance.now();
   213:       const dur = 600;
   214:       const grow = (now) => {
   215:         const p = Math.min(1, (now - t0) / dur);
   216:         c.setRadius(40 + p * 600);
   217:         c.setStyle({ opacity: 1 - p, fillOpacity: 0.22 * (1 - p) });
   218:         if (p < 1) rafRef.current = requestAnimationFrame(grow);
   219:       };
   220:       rafRef.current = requestAnimationFrame(grow);
   221:       timersRef.current.push(
   222:         setTimeout(() => {
   223:           try {
   224:             c.remove();
   225:           } catch {}
   226:         }, dur + 50)
   227:       );
   228:     },
   229:     [ensureGroup]
   230:   );
   231: 
   232:   // NOTE: Yon funksiyalar (freeze, unfreeze, fadeOutOverlay va h.k.) komponent scope ichida yaratiladi.
   233:   // Animatsiya faqat bir marta ishlaydi — deps to'liq ro'yxatini qo'shgan holda ham rerun guard (didRunRef) buni to'xtatadi.
   234:   useEffect(() => {
   235:     if (!enabled || didRunRef.current) return;
   236:     if (!isValid(target)) return;
   237: 
   238:     let cancelled = false;
   239:     const mode = autoQuality(); // low / medium / high
   240: 
   241:     const start = () => {
   242:       if (cancelled) return;
   243:       didRunRef.current = true;
   244:       try {
   245:         onStart?.();
   246:       } catch {}
   247: 
   248:       if (freezeInteractions) freeze();
   249:       if (tilesDim) setTilesOpacity(0.6);
   250:       if (showOverlay && mode !== "low") addOverlay();
   251: 
   252:       const midZoom = Math.max(5, Math.min(target.zoom - 4, 8));
   253: 
   254:       // LOW — faqat yakuniy qisqa flyTo (yoki reduce motion bo‘lsa setView)
   255:       if (mode === "low") {
   256:         const tid = setTimeout(() => {
   257:           try {
   258:             const reduce =
   259:               typeof window !== "undefined" &&
   260:               window.matchMedia &&
   261:               window.matchMedia("(prefers-reduced-motion: reduce)").matches;
   262:             if (reduce) map.setView([target.lat, target.lng], target.zoom);
   263:             else
   264:               map.flyTo([target.lat, target.lng], target.zoom, {
   265:                 duration: Math.max(0.7, finalDurationMs / 1200),
   266:                 easeLinearity: 0.25,
   267:               });
   268:           } finally {
   269:             timersRef.current.push(
   270:               setTimeout(() => {
   271:                 fadeOutOverlay();
   272:                 if (tilesDim) setTilesOpacity(1);
   273:                 if (freezeInteractions) unfreeze();
   274:                 cleanup();
   275:               }, 600)
   276:             );
   277:           }
   278:         }, Math.max(0, delayMs));
   279:         timersRef.current.push(tid);
   280:         return;
   281:       }
   282: 
   283:       // MEDIUM/HIGH — 2 bosqich
   284:       const midTid = setTimeout(() => {
   285:         try {
   286:           map.flyTo([target.lat, target.lng], midZoom, {
   287:             duration: Math.max(0.6, midDurationMs / 1000),
   288:             easeLinearity: 0.25,
   289:           });
   290:         } catch {
   291:           map.setView([target.lat, target.lng], midZoom);
   292:         }
   293:       }, Math.max(0, delayMs));
   294:       timersRef.current.push(midTid);
   295: 
   296:       // HIGH — yo‘l chizish (yengil)
   297:       let poly = null;
   298:       if (mode === "high" && drawPath) {
   299:         const from = map.getCenter();
   300:         const steps = 60;
   301:         const pts = [];
   302:         for (let i = 0; i <= steps; i++) {
   303:           const t = i / steps;
   304:           pts.push([
   305:             from.lat + (target.lat - from.lat) * t,
   306:             from.lng + (target.lng - from.lng) * t,
   307:           ]);
   308:         }
   309:         poly = L.polyline(pts, {
   310:           color: "#93C5FD",
   311:           weight: 2,
   312:           dashArray: "6 6",
   313:           opacity: 0.85,
   314:         }).addTo(ensureGroup());
   315:         animateDot(poly, 900);
   316:       }
   317: 
   318:       const runFinal = () => {
   319:         try {
   320:           map.flyTo([target.lat, target.lng], target.zoom, {
   321:             duration: Math.max(0.7, finalDurationMs / 1000),
   322:             easeLinearity: 0.2,
   323:           });
   324:         } catch {
   325:           map.setView([target.lat, target.lng], target.zoom);
   326:         }
   327: 
   328:         const onEnd = () => {
   329:           map.off("moveend", onEnd);
   330:           if (mode === "high") ripple([target.lat, target.lng]);
   331:           if (poly)
   332:             try {
   333:               poly.remove();
   334:             } catch {}
   335:           fadeOutOverlay();
   336:           timersRef.current.push(
   337:             setTimeout(() => {
   338:               if (tilesDim) setTilesOpacity(1);
   339:               if (freezeInteractions) unfreeze();
   340:               cleanup();
   341:             }, 600)
   342:           );
   343:         };
   344:         map.once("moveend", onEnd);
   345:         // moveend kelmasa ham
   346:         timersRef.current.push(
   347:           setTimeout(onEnd, Math.max(1100, finalDurationMs + 250))
   348:         );
   349:       };
   350: 
   351:       const onMidEnd = () => {
   352:         map.off("moveend", onMidEnd);
   353:         runFinal();
   354:       };
   355:       map.on("moveend", onMidEnd);
   356:       timersRef.current.push(
   357:         setTimeout(runFinal, delayMs + midDurationMs + 220)
   358:       );
   359:     };
   360: 
   361:     const readyFallback = setTimeout(start, maxWaitReadyMs);
   362:     map.whenReady(start);
   363:     timersRef.current.push(readyFallback);
   364: 
   365:     return () => {
   366:       cancelled = true;
   367:       cleanup();
   368:     };
   369:   }, [
   370:     enabled,
   371:     target,
   372:     delayMs,
   373:     quality,
   374:     drawPath,
   375:     showOverlay,
   376:     freezeInteractions,
   377:     tilesDim,
   378:     midDurationMs,
   379:     finalDurationMs,
   380:     maxWaitReadyMs,
   381:     onStart,
   382:     onDone,
   383:     map,
   384:     autoQuality,
   385:     addOverlay,
   386:     animateDot,
   387:     cleanup,
   388:     ensureGroup,
   389:     fadeOutOverlay,
   390:     freeze,
   391:     ripple,
   392:     setTilesOpacity,
   393:     unfreeze,
   394:   ]);
   395: 
   396:   return null;
   397: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\CodeJumpBox.jsx
SIZE: 3536 bytes
================================================================================
     1: // src/components/map/CodeJumpBox.jsx
     2: import React, { useState, useMemo, useCallback } from "react";
     3: import { getOrgByCode } from "../../api/org";
     4: 
     5: /**
     6:  * Kichik suzuvchi input: org `code` bo'yicha topadi.
     7:  * Muvaffaqiyatli bo'lsa:
     8:  *  - onJump(org, pathIds, target) ni chaqiradi (target = {lat, lng, zoom})
     9:  *  - inputni tozalaydi
    10:  */
    11: export default function CodeJumpBox({ orgTree, onJump }) {
    12:   const [value, setValue] = useState("");
    13:   const [busy, setBusy] = useState(false);
    14:   const [error, setError] = useState("");
    15: 
    16:   const idToParent = useMemo(() => {
    17:     const map = new Map();
    18:     const walk = (node, parentId = null) => {
    19:       if (!node) return;
    20:       const id = node.key ?? node.id;
    21:       if (id != null)
    22:         map.set(String(id), parentId == null ? null : String(parentId));
    23:       (node.children || []).forEach((ch) => walk(ch, id));
    24:     };
    25:     (orgTree || []).forEach((n) => walk(n, null));
    26:     return map; // id -> parentId | null
    27:   }, [orgTree]);
    28: 
    29:   const pathToRoot = useCallback(
    30:     (id) => {
    31:       const ids = [];
    32:       let cur = id != null ? String(id) : null;
    33:       let guard = 0;
    34:       while (cur != null && guard < 1000) {
    35:         ids.push(Number(cur)); // [self, parent, root]
    36:         cur = idToParent.get(String(cur)) ?? null;
    37:         guard++;
    38:       }
    39:       return ids;
    40:     },
    41:     [idToParent]
    42:   );
    43: 
    44:   const handleKeyDown = async (e) => {
    45:     if (e.key !== "Enter") return;
    46:     const code = value.trim();
    47:     if (!code) return;
    48:     setBusy(true);
    49:     setError("");
    50:     try {
    51:       const org = await getOrgByCode(code);
    52:       if (!org) {
    53:         setError("Topilmadi");
    54:         setBusy(false);
    55:         return;
    56:       }
    57:       const target = {
    58:         lat: org.lat ?? 41.311081,
    59:         lng: org.lng ?? 69.240562,
    60:         zoom: org.zoom ?? 12,
    61:       };
    62:       const pathIds = pathToRoot(org.id); // self + filial + root
    63:       onJump?.(org, pathIds, target);
    64:       setValue("");
    65:     } catch {
    66:       setError("Kod bo‘yicha org topilmadi");
    67:     } finally {
    68:       setBusy(false);
    69:     }
    70:   };
    71: 
    72:   return (
    73:     <div className="code-jump">
    74:       <input
    75:         type="text"
    76:         inputMode="numeric"
    77:         pattern="[0-9]*"
    78:         placeholder="Bo‘lim kodi..."
    79:         title="Bo‘lim kodi"
    80:         value={value}
    81:         onChange={(e) => setValue(e.target.value)}
    82:         onKeyDown={handleKeyDown}
    83:         disabled={busy}
    84:       />
    85:       {error ? <div className="err">{error}</div> : null}
    86:       <style>{`
    87:         .code-jump {
    88:           position: absolute;
    89:           bottom: 50px;
    90:           left: 12px;
    91:           z-index: 1000;
    92:           background: rgba(255,255,255,0.9);
    93:           padding: 6px 8px;
    94:           border-radius: 8px;
    95:           box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    96:           display: flex;
    97:           flex-direction: column;
    98:           gap: 4px;
    99:         }
   100:         .code-jump input {
   101:           width: 220px;
   102:           height: 40px;
   103:           border: 1px solid #d0d7de;
   104:           border-radius: 6px;
   105:           padding: 0 10px;
   106:           outline: none;
   107:           font-size: 16px;
   108:         }
   109:         .code-jump input:disabled { opacity: .6; }
   110:         .code-jump .err { color: #b42318; font-size: 12px; }
   111:         @media (prefers-color-scheme: dark) {
   112:           .code-jump { background: rgba(28,28,30,0.9); }
   113:           .code-jump input { background: #1c1c1e; color: #f2f2f7; border-color: #3a3a3c; }
   114:           .code-jump .err { color: #ff453a; }
   115:         }
   116:       `}</style>
   117:     </div>
   118:   );
   119: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\CreateFacilityDrawer.jsx
SIZE: 13960 bytes
================================================================================
     1: // src/components/map/CreateFacilityDrawer.jsx
     2: import { useEffect, useMemo, useState, useCallback } from "react";
     3: import { debugError } from "../../utils/debug";
     4: import Modal from "../ui/Modal";
     5: import { createFacility } from "../../api/facilities";
     6: import { centroidOfGeometry, areaOfGeometryM2 } from "../../utils/geo";
     7: import { listOrgsPage } from "../../api/org";
     8: import { toast } from "react-toastify";
     9: import * as FT from "../../data/facilityTypes";
    10: const FACILITY_TYPES = FT.FACILITY_TYPES;
    11: 
    12: /* -------------------------- Validation helpers -------------------------- */
    13: function validateByRules(schema, { name, attributes }) {
    14:   const errors = { name: null, attr: {} };
    15:   if (!name || !name.trim()) errors.name = "Nomi majburiy";
    16:   for (const f of schema.fields || []) {
    17:     const v = attributes?.[f.key];
    18:     const r = f.rules || {};
    19:     if (r.required && (v === null || v === undefined || v === "")) {
    20:       errors.attr[f.key] = "Majburiy maydon";
    21:       continue;
    22:     }
    23:     if (v !== null && v !== undefined && v !== "") {
    24:       if (f.type === "number") {
    25:         const n = Number(v);
    26:         if (!Number.isFinite(n)) {
    27:           errors.attr[f.key] = "Raqam kiritilishi kerak";
    28:           continue;
    29:         }
    30:         if (r.integer && !Number.isInteger(n)) {
    31:           errors.attr[f.key] = "Butun son bo‘lishi kerak";
    32:           continue;
    33:         }
    34:         if (typeof r.min === "number" && n < r.min) {
    35:           errors.attr[f.key] = `Qiymat ${r.min} dan kichik bo‘lmasin`;
    36:           continue;
    37:         }
    38:         if (typeof r.max === "number" && n > r.max) {
    39:           errors.attr[f.key] = `Qiymat ${r.max} dan katta bo‘lmasin`;
    40:           continue;
    41:         }
    42:       } else if (f.type === "text") {
    43:         const sv = String(v);
    44:         if (typeof r.maxLength === "number" && sv.length > r.maxLength) {
    45:           errors.attr[f.key] = `Maksimal ${r.maxLength} ta belgi`;
    46:           continue;
    47:         }
    48:       }
    49:     }
    50:   }
    51:   return errors;
    52: }
    53: function hasErrors(err) {
    54:   if (!err) return false;
    55:   if (err.name) return true;
    56:   return Object.values(err.attr || {}).some(Boolean);
    57: }
    58: 
    59: /* ------------------------------ Utilities ------------------------------ */
    60: function toNumberOrNull(v) {
    61:   if (v === "" || v == null) return null;
    62:   const n = Number(v);
    63:   return Number.isFinite(n) ? n : null;
    64: }
    65: function normalizeNumbers(obj) {
    66:   const out = {};
    67:   for (const [k, v] of Object.entries(obj || {})) {
    68:     if (v === "" || v == null) {
    69:       out[k] = null;
    70:       continue;
    71:     }
    72:     const n = Number(v);
    73:     out[k] = Number.isFinite(n) && String(v).trim() !== "" ? n : v;
    74:   }
    75:   return out;
    76: }
    77: 
    78: /* ------------------------------- Component ------------------------------ */
    79: /**
    80:  * Props:
    81:  *  - open: boolean
    82:  *  - onClose: () => void
    83:  *  - onSaved: () => void
    84:  *  - geometry: GeoJSON Geometry (marker/polygon/rectangle)
    85:  *  - center: {lat, lng} | null  (marker yoki chizilgan shakl markazi)
    86:  *  - selectedOrgId: number | null (chapdagi tree’dan tanlangan org)
    87:  */
    88: export default function CreateFacilityDrawer({
    89:   open,
    90:   onClose,
    91:   onSaved,
    92:   geometry,
    93:   center,
    94:   selectedOrgId,
    95: }) {
    96:   // type tanlovi
    97:   const typeKeys = Object.keys(FACILITY_TYPES || {});
    98:   const [type, setType] = useState(typeKeys[0] || "OTHER");
    99:   useEffect(() => {
   100:     if (open && !FACILITY_TYPES?.[type]) {
   101:       setType(typeKeys[0] || "OTHER");
   102:     }
   103:   }, [open]); // eslint-disable-line
   104: 
   105:   // Schema ni memo qilamiz — shunda object identifikatori barqaror bo'ladi
   106:   const schema = useMemo(() => {
   107:     if (FACILITY_TYPES && FACILITY_TYPES[type]) return FACILITY_TYPES[type];
   108:     return {
   109:       label: FT.getFacilityTypeLabel
   110:         ? FT.getFacilityTypeLabel(type)
   111:         : String(type),
   112:       fields: [],
   113:     };
   114:   }, [type]);
   115: 
   116:   // form states
   117:   const [name, setName] = useState("");
   118:   const [status, setStatus] = useState("ACTIVE");
   119:   const [orgId, setOrgId] = useState(selectedOrgId ?? null);
   120:   const [attr, setAttr] = useState({});
   121:   const [saving, setSaving] = useState(false);
   122:   const [errors, setErrors] = useState({ name: null, attr: {} });
   123: 
   124:   // org options
   125:   const [orgOptions, setOrgOptions] = useState([]);
   126:   useEffect(() => {
   127:     let alive = true;
   128:     (async () => {
   129:       try {
   130:         const data = await listOrgsPage({
   131:           page: 0,
   132:           size: 1000,
   133:           sort: ["name,asc"],
   134:         });
   135:         const items = Array.isArray(data?.content) ? data.content : [];
   136:         const opts = items.map((x) => ({ value: x.id, label: x.name }));
   137:         if (alive) setOrgOptions(opts);
   138:       } catch {}
   139:     })();
   140:     return () => {
   141:       alive = false;
   142:     };
   143:   }, []);
   144: 
   145:   // Formani reset qilish (open yoki type o'zgarganda qayta tuzamiz)
   146:   const rebuildAttr = useCallback(() => {
   147:     const init = {};
   148:     for (const f of schema.fields || []) init[f.key] = null;
   149:     setAttr(init);
   150:   }, [schema]);
   151: 
   152:   useEffect(() => {
   153:     if (!open) return; // faqat ochilganda
   154:     setName("");
   155:     setStatus("ACTIVE");
   156:     setOrgId(selectedOrgId ?? null);
   157:     rebuildAttr();
   158:   }, [open, selectedOrgId, rebuildAttr]);
   159: 
   160:   // Type o'zgarganda (ochiq bo'lsa) attribute formani yangilaymiz
   161:   useEffect(() => {
   162:     if (!open) return;
   163:     rebuildAttr();
   164:   }, [type, open, rebuildAttr]);
   165: 
   166:   // validation live
   167:   useEffect(() => {
   168:     setErrors(validateByRules(schema, { name, attributes: attr }));
   169:   }, [schema, name, attr]);
   170: 
   171:   const onAttr = (k, v) => setAttr((p) => ({ ...p, [k]: v }));
   172: 
   173:   // center fallback from geometry
   174:   const centerLL = useMemo(() => {
   175:     if (center?.lat && center?.lng) return center;
   176:     try {
   177:       const c = centroidOfGeometry(geometry); // { lat, lng } yoki null
   178:       if (c && Number.isFinite(c.lat) && Number.isFinite(c.lng))
   179:         return { lat: c.lat, lng: c.lng };
   180:     } catch {}
   181:     return { lat: null, lng: null };
   182:   }, [center, geometry]);
   183: 
   184:   /* ---------- YANGI: maydon (m² va ga) avtomatik hisoblash ---------- */
   185:   const calcAreaM2 = useMemo(() => {
   186:     try {
   187:       const a = areaOfGeometryM2(geometry);
   188:       return Number.isFinite(a) ? a : null;
   189:     } catch {
   190:       return null;
   191:     }
   192:   }, [geometry]);
   193:   const calcAreaHa = useMemo(
   194:     () => (calcAreaM2 != null ? calcAreaM2 / 10000 : null),
   195:     [calcAreaM2]
   196:   );
   197: 
   198:   // Schema’da mos maydon maydoni bo‘lsa — avtomatik to‘ldiramiz.
   199:   // - 'areaM2' mavjud bo‘lsa → m² bilan
   200:   // - 'totalAreaHa' mavjud bo‘lsa → ga bilan
   201:   useEffect(() => {
   202:     if (!open) return;
   203:     if (calcAreaM2 == null) return;
   204:     const fields = schema?.fields || [];
   205: 
   206:     const hasAreaM2 = fields.some((f) => f.key === "areaM2");
   207:     const hasAreaHa = fields.some((f) => f.key === "totalAreaHa");
   208: 
   209:     if (!hasAreaM2 && !hasAreaHa) return;
   210: 
   211:     setAttr((prev) => {
   212:       const next = { ...prev };
   213:       let changed = false;
   214: 
   215:       if (hasAreaM2 && (prev.areaM2 == null || prev.areaM2 === "")) {
   216:         next.areaM2 = Math.round(calcAreaM2); // butun m² (yaqinlashtirilgan)
   217:         changed = true;
   218:       }
   219:       if (hasAreaHa && (prev.totalAreaHa == null || prev.totalAreaHa === "")) {
   220:         const ha = calcAreaM2 / 10000;
   221:         // 4 ta kasr joyi bilan (yetarlicha aniq)
   222:         next.totalAreaHa = Number(ha.toFixed(4));
   223:         changed = true;
   224:       }
   225: 
   226:       return changed ? next : prev;
   227:     });
   228:   }, [open, calcAreaM2, schema, type]);
   229: 
   230:   const canSave =
   231:     open && name.trim() && orgId != null && !hasErrors(errors) && geometry;
   232: 
   233:   const onSubmit = async (e) => {
   234:     e?.preventDefault?.();
   235:     if (!canSave) return;
   236:     setSaving(true);
   237:     try {
   238:       await createFacility({
   239:         name: name.trim(),
   240:         type,
   241:         status,
   242:         orgId,
   243:         attributes: normalizeNumbers(attr),
   244:         lat: centerLL.lat,
   245:         lng: centerLL.lng,
   246:         geometry,
   247:       });
   248:       onSaved?.();
   249:       onClose?.();
   250:     } catch (err) {
   251:       debugError("CreateFacilityDrawer createFacility failed", err);
   252:       toast.error("Saqlashda xatolik yuz berdi");
   253:     } finally {
   254:       setSaving(false);
   255:     }
   256:   };
   257: 
   258:   // Format helpers (faqat ko‘rsatish uchun)
   259:   const fmtM2 =
   260:     calcAreaM2 != null ? Math.round(calcAreaM2).toLocaleString() : "—";
   261:   const fmtHa =
   262:     calcAreaHa != null ? Number(calcAreaHa.toFixed(4)).toLocaleString() : "—";
   263: 
   264:   return (
   265:     <Modal
   266:       open={open}
   267:       onClose={() => !saving && onClose?.()}
   268:       title="Yangi obyekt qo‘shish"
   269:       size="xl"
   270:       preventCloseOnBackdrop={saving}
   271:       disableEscapeClose={saving}
   272:     >
   273:       <form
   274:         onSubmit={onSubmit}
   275:         className="form-grid"
   276:         style={{ display: "grid", gap: 12 }}
   277:       >
   278:         {/* Type */}
   279:         <div style={{ display: "grid", gap: 6 }}>
   280:           <label className="lbl">Turi</label>
   281:           <select
   282:             className="selectLike"
   283:             value={type}
   284:             onChange={(e) => setType(e.target.value)}
   285:           >
   286:             {typeKeys.map((k) => (
   287:               <option key={k} value={k}>
   288:                 {FT.getFacilityTypeLabel ? FT.getFacilityTypeLabel(k) : k}
   289:               </option>
   290:             ))}
   291:           </select>
   292:         </div>
   293: 
   294:         {/* Name */}
   295:         <div style={{ display: "grid", gap: 6 }}>
   296:           <label className="lbl">Nomi</label>
   297:           <input
   298:             className="inputLike"
   299:             value={name}
   300:             onChange={(e) => setName(e.target.value)}
   301:             placeholder={schema?.label || "Nomi"}
   302:             autoFocus
   303:           />
   304:           {errors?.name && <div className="err">{errors.name}</div>}
   305:         </div>
   306: 
   307:         {/* Status */}
   308:         <div style={{ display: "grid", gap: 6 }}>
   309:           <label className="lbl">Status</label>
   310:           <select
   311:             className="selectLike"
   312:             value={status}
   313:             onChange={(e) => setStatus(e.target.value)}
   314:           >
   315:             <option value="ACTIVE">ACTIVE</option>
   316:             <option value="INACTIVE">INACTIVE</option>
   317:           </select>
   318:         </div>
   319: 
   320:         {/* Organization */}
   321:         <div style={{ display: "grid", gap: 6 }}>
   322:           <label className="lbl">Tashkilot</label>
   323:           <select
   324:             className="selectLike"
   325:             value={orgId ?? ""}
   326:             onChange={(e) =>
   327:               setOrgId(e.target.value ? Number(e.target.value) : null)
   328:             }
   329:           >
   330:             <option value="">— Tanlang —</option>
   331:             {orgOptions.map((o) => (
   332:               <option key={o.value} value={o.value}>
   333:                 {o.label}
   334:               </option>
   335:             ))}
   336:           </select>
   337:         </div>
   338: 
   339:         {/* Dynamic attributes */}
   340:         {schema?.fields?.length ? (
   341:           <div className="attrsGrid">
   342:             {schema.fields.map((f) => (
   343:               <div key={f.key} style={{ display: "grid", gap: 6 }}>
   344:                 <label className="lbl">
   345:                   {f.label}
   346:                   {f.rules?.required ? " *" : ""}
   347:                   {f.suffix ? (
   348:                     <span className="muted"> ({f.suffix})</span>
   349:                   ) : null}
   350:                 </label>
   351:                 {f.type === "text" ? (
   352:                   <input
   353:                     className="inputLike"
   354:                     value={attr[f.key] ?? ""}
   355:                     onChange={(e) => onAttr(f.key, e.target.value)}
   356:                   />
   357:                 ) : (
   358:                   <input
   359:                     className="inputLike"
   360:                     type="number"
   361:                     value={attr[f.key] ?? ""}
   362:                     onChange={(e) =>
   363:                       onAttr(f.key, toNumberOrNull(e.target.value))
   364:                     }
   365:                   />
   366:                 )}
   367:                 {errors?.attr?.[f.key] && (
   368:                   <div className="err">{errors.attr[f.key]}</div>
   369:                 )}
   370:               </div>
   371:             ))}
   372:           </div>
   373:         ) : null}
   374: 
   375:         {/* YANGI: Hisoblangan maydon preview (readonly) */}
   376:         <div style={{ display: "grid", gap: 6 }}>
   377:           <label className="lbl">Hisoblangan maydon (readonly)</label>
   378:           <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
   379:             <input
   380:               className="inputLike"
   381:               readOnly
   382:               value={fmtM2}
   383:               placeholder="m²"
   384:               title="m²"
   385:             />
   386:             <input
   387:               className="inputLike"
   388:               readOnly
   389:               value={fmtHa}
   390:               placeholder="ga"
   391:               title="ga"
   392:             />
   393:           </div>
   394:           <div className="muted" style={{ fontSize: 12 }}>
   395:             Poligon/to‘rtburchak geometriyasi chizilganda avtomatik hisoblanadi.
   396:           </div>
   397:         </div>
   398: 
   399:         {/* Lat/Lng preview (read-only) */}
   400:         <div style={{ display: "grid", gap: 6 }}>
   401:           <label className="lbl">Markaz (readonly)</label>
   402:           <div style={{ display: "flex", gap: 12, alignItems: "center" }}>
   403:             <input
   404:               className="inputLike"
   405:               readOnly
   406:               value={centerLL.lat ?? ""}
   407:               placeholder="lat"
   408:             />
   409:             <input
   410:               className="inputLike"
   411:               readOnly
   412:               value={centerLL.lng ?? ""}
   413:               placeholder="lng"
   414:             />
   415:           </div>
   416:         </div>
   417: 
   418:         {/* Footer */}
   419:         <div className="modalFooter">
   420:           <button
   421:             className="btn"
   422:             type="button"
   423:             onClick={() => onClose?.()}
   424:             disabled={saving}
   425:           >
   426:             Bekor qilish
   427:           </button>
   428:           <button
   429:             className="btnPrimary"
   430:             type="submit"
   431:             disabled={!canSave || saving}
   432:           >
   433:             {saving ? "Saqlanmoqda..." : "Saqlash"}
   434:           </button>
   435:         </div>
   436:       </form>
   437:     </Modal>
   438:   );
   439: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilitiesLayer.jsx
SIZE: 7896 bytes
================================================================================
     1: // src/components/map/FacilitiesLayer.jsx
     2: import { useCallback, useMemo, useRef } from "react";
     3: import { GeoJSON, Marker, Pane, Popup } from "react-leaflet";
     4: import { badgeIconFor, typeColor } from "./mapIcons"; // removed unused iconFor
     5: 
     6: /** GeoJSON centroid helpers */
     7: function centroidOfGeometry(geometry) {
     8:   if (!geometry || !geometry.type) return null;
     9:   if (geometry.type === "Point") {
    10:     const [lng, lat] = geometry.coordinates || [];
    11:     return Number.isFinite(lat) && Number.isFinite(lng) ? { lat, lng } : null;
    12:   }
    13:   if (geometry.type === "Polygon")
    14:     return centroidOfPolygon(geometry.coordinates);
    15:   if (geometry.type === "MultiPolygon") {
    16:     let best = null,
    17:       bestArea = -Infinity;
    18:     for (const poly of geometry.coordinates || []) {
    19:       const c = centroidOfPolygon(poly);
    20:       if (c && c.area > bestArea) {
    21:         bestArea = c.area;
    22:         best = { lat: c.lat, lng: c.lng };
    23:       }
    24:     }
    25:     return best;
    26:   }
    27:   return null;
    28: }
    29: function centroidOfPolygon(rings) {
    30:   if (!rings || !rings[0] || rings[0].length < 3) return null;
    31:   const outer = rings[0];
    32:   let area = 0,
    33:     cx = 0,
    34:     cy = 0;
    35:   for (let i = 0, j = outer.length - 1; i < outer.length; j = i++) {
    36:     const [x1, y1] = outer[j],
    37:       [x2, y2] = outer[i];
    38:     const f = x1 * y2 - x2 * y1;
    39:     area += f;
    40:     cx += (x1 + x2) * f;
    41:     cy += (y1 + y2) * f;
    42:   }
    43:   if (area === 0) {
    44:     let minX = Infinity,
    45:       minY = Infinity,
    46:       maxX = -Infinity,
    47:       maxY = -Infinity;
    48:     for (const [x, y] of outer) {
    49:       if (x < minX) minX = x;
    50:       if (y < minY) minY = y;
    51:       if (x > maxX) maxX = x;
    52:       if (y > maxY) maxY = y;
    53:     }
    54:     return { lat: (minY + maxY) / 2, lng: (minX + maxX) / 2, area: 0 };
    55:   }
    56:   area *= 0.5;
    57:   cx /= 6 * area;
    58:   cy /= 6 * area;
    59:   return { lat: cy, lng: cx, area: Math.abs(area) };
    60: }
    61: 
    62: export default function FacilitiesLayer({
    63:   facilities = [],
    64:   showPolys = true,
    65:   onFlyTo, // ({lat,lng,zoom,ts})
    66:   onEditClick, // (facility)
    67:   onDeleteClick, // (facility)
    68: }) {
    69:   const geoJsonRef = useRef(null);
    70: 
    71:   const fc = useMemo(() => {
    72:     const features = facilities
    73:       .filter((f) => f.geometry && f.geometry.type)
    74:       .map((f) => ({
    75:         type: "Feature",
    76:         geometry: f.geometry,
    77:         properties: {
    78:           id: f.id,
    79:           name: f.name,
    80:           type: f.type,
    81:           status: f.status,
    82:           lat: f.lat,
    83:           lng: f.lng,
    84:           zoom: f.zoom,
    85:         },
    86:       }));
    87:     return { type: "FeatureCollection", features };
    88:   }, [facilities]);
    89: 
    90:   const polyStyle = useCallback((feature) => {
    91:     const col = typeColor(feature?.properties?.type);
    92:     return {
    93:       color: col,
    94:       weight: 2,
    95:       fillColor: col,
    96:       fillOpacity: 0.15,
    97:       dashArray: "3",
    98:     };
    99:   }, []);
   100: 
   101:   const onEachFeature = useCallback(
   102:     (feature, layer) => {
   103:       const p = feature.properties || {};
   104:       layer.bindPopup(`
   105:       <div style="min-width:200px">
   106:         <div style="font-weight:700">${p.name ?? "Facility"}</div>
   107:         <div style="font-size:12px;opacity:.8">${p.type ?? ""} • ${
   108:         p.status ?? ""
   109:       }</div>
   110:       </div>
   111:     `);
   112:       layer.on("mouseover", () => {
   113:         layer.setStyle({ weight: 3, fillOpacity: 0.25 });
   114:         layer.bringToFront();
   115:       });
   116:       layer.on("mouseout", () => {
   117:         if (geoJsonRef.current) geoJsonRef.current.resetStyle(layer);
   118:       });
   119:       layer.on("click", () => {
   120:         const c = layer.getBounds ? layer.getBounds().getCenter() : null;
   121:         if (c && onFlyTo)
   122:           onFlyTo({
   123:             lat: c.lat,
   124:             lng: c.lng,
   125:             zoom: p.zoom ?? 16,
   126:             ts: Date.now(),
   127:           });
   128:       });
   129:     },
   130:     [onFlyTo]
   131:   );
   132: 
   133:   const centroidMarkers = useMemo(
   134:     () =>
   135:       facilities
   136:         .filter(
   137:           (f) => f.geometry && f.geometry.type && f.geometry.type !== "Point"
   138:         )
   139:         .map((f) => {
   140:           const c =
   141:             centroidOfGeometry(f.geometry) ||
   142:             (Number.isFinite(f.lat) && Number.isFinite(f.lng)
   143:               ? { lat: f.lat, lng: f.lng }
   144:               : null);
   145:           if (!c) return null;
   146:           return (
   147:             <Marker
   148:               key={`fc-${f.id}`}
   149:               position={[c.lat, c.lng]}
   150:               icon={badgeIconFor(f.type, 28)}
   151:               pane="facilities-centroids"
   152:             >
   153:               <Popup>
   154:                 <div style={{ minWidth: 220 }}>
   155:                   <div style={{ fontWeight: 700 }}>{f.name}</div>
   156:                   <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 8 }}>
   157:                     {f.type} • {f.status}
   158:                   </div>
   159:                   <div style={{ display: "flex", gap: 8 }}>
   160:                     <button onClick={() => onEditClick?.(f)} style={btnStyle}>
   161:                       Edit
   162:                     </button>
   163:                     <button
   164:                       onClick={() => onDeleteClick?.(f)}
   165:                       style={{ ...btnStyle, background: "#fff0f0" }}
   166:                     >
   167:                       Delete
   168:                     </button>
   169:                   </div>
   170:                 </div>
   171:               </Popup>
   172:             </Marker>
   173:           );
   174:         })
   175:         .filter(Boolean),
   176:     [facilities, onEditClick, onDeleteClick]
   177:   );
   178: 
   179:   const pointMarkers = useMemo(
   180:     () =>
   181:       facilities
   182:         .map((f) => {
   183:           const hasPoly = !!(
   184:             f.geometry &&
   185:             f.geometry.type &&
   186:             f.geometry.type !== "Point"
   187:           );
   188:           if (hasPoly) return null;
   189:           const lat = Number.isFinite(f.lat)
   190:             ? f.lat
   191:             : f.geometry?.type === "Point"
   192:             ? f.geometry.coordinates[1]
   193:             : null;
   194:           const lng = Number.isFinite(f.lng)
   195:             ? f.lng
   196:             : f.geometry?.type === "Point"
   197:             ? f.geometry.coordinates[0]
   198:             : null;
   199:           if (!Number.isFinite(lat) || !Number.isFinite(lng)) return null;
   200:           return (
   201:             <Marker
   202:               key={`f-${f.id}`}
   203:               position={[lat, lng]}
   204:               icon={badgeIconFor(f.type, 28)}
   205:               pane="facilities-markers"
   206:             >
   207:               <Popup>
   208:                 <div style={{ minWidth: 220 }}>
   209:                   <div style={{ fontWeight: 700 }}>{f.name}</div>
   210:                   <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 8 }}>
   211:                     {f.type} • {f.status}
   212:                   </div>
   213:                   <div style={{ display: "flex", gap: 8 }}>
   214:                     <button onClick={() => onEditClick?.(f)} style={btnStyle}>
   215:                       Edit
   216:                     </button>
   217:                     <button
   218:                       onClick={() => onDeleteClick?.(f)}
   219:                       style={{ ...btnStyle, background: "#fff0f0" }}
   220:                     >
   221:                       Delete
   222:                     </button>
   223:                   </div>
   224:                 </div>
   225:               </Popup>
   226:             </Marker>
   227:           );
   228:         })
   229:         .filter(Boolean),
   230:     [facilities, onEditClick, onDeleteClick]
   231:   );
   232: 
   233:   return (
   234:     <>
   235:       <Pane name="facilities-polys" style={{ zIndex: 410 }} />
   236:       <Pane name="facilities-centroids" style={{ zIndex: 420 }} />
   237:       <Pane name="facilities-markers" style={{ zIndex: 430 }} />
   238: 
   239:       {showPolys && fc.features.length > 0 && (
   240:         <GeoJSON
   241:           data={fc}
   242:           style={polyStyle}
   243:           onEachFeature={onEachFeature}
   244:           pane="facilities-polys"
   245:           ref={geoJsonRef}
   246:         />
   247:       )}
   248:       {showPolys && centroidMarkers}
   249:       {pointMarkers}
   250:     </>
   251:   );
   252: }
   253: 
   254: const btnStyle = {
   255:   padding: "6px 10px",
   256:   border: "1px solid #e3e6eb",
   257:   borderRadius: 6,
   258:   cursor: "pointer",
   259:   background: "#fff",
   260: };


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityDetailsModal.jsx
SIZE: 4938 bytes
================================================================================
     1: // src/components/map/FacilityDetailsModal.jsx
     2: import { useEffect, useState } from "react";
     3: import { debugError } from "../../utils/debug";
     4: import { FACILITY_TYPES } from "./CreateFacilityDrawer";
     5: import { patchFacility, deleteFacility } from "../../api/facilities";
     6: import Modal from "../ui/Modal"; // Portal orqali
     7: import { toast } from "react-toastify";
     8: 
     9: export default function FacilityDetailsModal({
    10:   open,
    11:   onClose,
    12:   facility,
    13:   onSaved,
    14:   dark, // ⬅️ YANGI: dark flag (App/MapView’dan keladi)
    15: }) {
    16:   const [name, setName] = useState("");
    17:   const [status, setStatus] = useState("ACTIVE");
    18:   const [type, setType] = useState("GREENHOUSE");
    19:   const [details, setDetails] = useState({});
    20: 
    21:   useEffect(() => {
    22:     if (!facility) return;
    23:     setName(facility.name || "");
    24:     setStatus(facility.status || "ACTIVE");
    25:     setType(facility.type || "GREENHOUSE");
    26: 
    27:     const schema = FACILITY_TYPES[facility.type]?.fields || [];
    28:     const schemaKeys = new Set(schema.map((f) => f.key));
    29:     const base = {};
    30:     for (const f of schema) base[f.key] = "";
    31:     const incoming = facility.details || {};
    32:     const merged = { ...base };
    33:     for (const [k, v] of Object.entries(incoming)) {
    34:       if (schemaKeys.has(k)) merged[k] = v ?? "";
    35:     }
    36:     setDetails(merged);
    37:   }, [facility]);
    38: 
    39:   const onChangeDetail = (k, v) => setDetails((d) => ({ ...d, [k]: v }));
    40: 
    41:   if (!open || !facility) return null;
    42: 
    43:   const doSave = async () => {
    44:     try {
    45:       await patchFacility(facility.id, {
    46:         name: name.trim(),
    47:         status,
    48:         attributes: normalizeNumbers(details),
    49:       });
    50:       onClose?.();
    51:       onSaved?.();
    52:     } catch (e) {
    53:       debugError("FacilityDetails save failed", e);
    54:       toast.error(e?.data?.message || "Saqlashda xatolik");
    55:     }
    56:   };
    57: 
    58:   const doDelete = async () => {
    59:     if (!window.confirm(`O‘chirishni tasdiqlaysizmi?\n${facility.name}`))
    60:       return; // TODO: custom modal later
    61:     try {
    62:       await deleteFacility(facility.id);
    63:       onClose?.();
    64:       onSaved?.();
    65:     } catch (e) {
    66:       debugError("FacilityDetails delete failed", e);
    67:       toast.error(e?.data?.message || "O‘chirishda xatolik");
    68:     }
    69:   };
    70: 
    71:   return (
    72:     <Modal
    73:       open={open}
    74:       onClose={onClose}
    75:       title="Obyekt ma’lumotlari"
    76:       size="lg"
    77:       dark={dark} // ⬅️ MUHIM: modalga dark ni uzatyapmiz
    78:     >
    79:       <div className="form-grid">
    80:         <div className="field">
    81:           <label>Nom</label>
    82:           <input value={name} onChange={(e) => setName(e.target.value)} />
    83:         </div>
    84: 
    85:         <div className="grid3">
    86:           <div className="field">
    87:             <label>Tur</label>
    88:             <input value={FACILITY_TYPES[type]?.label || type} readOnly />
    89:           </div>
    90:           <div className="field">
    91:             <label>Status</label>
    92:             <select value={status} onChange={(e) => setStatus(e.target.value)}>
    93:               <option value="ACTIVE">ACTIVE</option>
    94:               <option value="INACTIVE">INACTIVE</option>
    95:               <option value="UNDER_MAINTENANCE">UNDER_MAINTENANCE</option>
    96:             </select>
    97:           </div>
    98:           <div className="field">
    99:             <label>Org ID</label>
   100:             <input value={facility.orgId ?? "—"} readOnly />
   101:           </div>
   102:         </div>
   103: 
   104:         <hr style={{ opacity: 0.3 }} />
   105: 
   106:         <div style={{ fontWeight: 700 }}>
   107:           {FACILITY_TYPES[type]?.label} — maxsus maydonlar
   108:         </div>
   109:         {(FACILITY_TYPES[type]?.fields || []).map((f) => (
   110:           <div key={f.key} className="field">
   111:             <label>
   112:               {f.label}
   113:               {f.suffix ? ` (${f.suffix})` : ""}
   114:             </label>
   115:             {f.type === "text" ? (
   116:               <input
   117:                 value={details[f.key] ?? ""}
   118:                 onChange={(e) => onChangeDetail(f.key, e.target.value)}
   119:               />
   120:             ) : (
   121:               <input
   122:                 type="number"
   123:                 value={details[f.key] ?? ""}
   124:                 onChange={(e) => onChangeDetail(f.key, e.target.value)}
   125:               />
   126:             )}
   127:           </div>
   128:         ))}
   129: 
   130:         <div className="modal-actions">
   131:           <button className="btn danger" onClick={doDelete}>
   132:             O‘chirish
   133:           </button>
   134:           <div style={{ flex: 1 }} />
   135:           <button className="btn" onClick={onClose}>
   136:             Bekor
   137:           </button>
   138:           <button className="btn primary" onClick={doSave}>
   139:             Saqlash
   140:           </button>
   141:         </div>
   142:       </div>
   143:     </Modal>
   144:   );
   145: }
   146: 
   147: function normalizeNumbers(obj) {
   148:   const out = {};
   149:   for (const [k, v] of Object.entries(obj || {})) {
   150:     if (v === "" || v == null) {
   151:       out[k] = null;
   152:       continue;
   153:     }
   154:     const n = Number(v);
   155:     out[k] = Number.isFinite(n) && String(v).trim() !== "" ? n : v;
   156:   }
   157:   return out;
   158: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityEditModal.jsx
SIZE: 10629 bytes
================================================================================
     1: import { useEffect, useMemo, useState } from "react";
     2: import { debugError } from "../../utils/debug";
     3: import Modal from "../ui/Modal"; // Agar fayl `map/modals/` ichida bo'lsa: `../../ui/Modal` qilib qo'ying.
     4: import { patchFacility } from "../../api/facilities";
     5: import styles from "./FacilityEditModal.module.scss";
     6: import { FACILITY_TYPES } from "../../data/facilityTypes";
     7: import { toast } from "react-toastify";
     8: import { areaOfGeometryM2 } from "../../utils/geo";
     9: 
    10: export default function FacilityEditModal({
    11:   open,
    12:   onClose,
    13:   facility,
    14:   onSaved,
    15:   dark,
    16: }) {
    17:   const [name, setName] = useState("");
    18:   const [status, setStatus] = useState("ACTIVE");
    19:   const [type, setType] = useState("GREENHOUSE");
    20:   const [attrs, setAttrs] = useState({});
    21:   const canSave = name.trim().length > 0;
    22: 
    23:   // Schema (tanlangan turga mos maydonlar)
    24:   const schemaFields = useMemo(
    25:     () => FACILITY_TYPES[type]?.fields || [],
    26:     [type]
    27:   );
    28: 
    29:   // Modal ochilganda boshlang'ich qiymatlar
    30:   useEffect(() => {
    31:     if (!facility) return;
    32:     setName(facility.name || "");
    33:     setStatus(facility.status || "ACTIVE");
    34:     setType(facility.type || "GREENHOUSE");
    35: 
    36:     const schema = FACILITY_TYPES[facility.type]?.fields || [];
    37:     const base = {};
    38:     schema.forEach((f) => (base[f.key] = ""));
    39:     const incoming = facility.attributes || facility.details || {};
    40:     const merged = { ...base };
    41:     for (const [k, v] of Object.entries(incoming)) {
    42:       if (k in base) merged[k] = v ?? "";
    43:     }
    44:     setAttrs(merged);
    45:   }, [facility]);
    46: 
    47:   const typeLabel = FACILITY_TYPES[type]?.label || type;
    48:   const orgLabel =
    49:     facility?.orgName ||
    50:     facility?.org?.name ||
    51:     (facility?.orgId != null ? `Org #${facility.orgId}` : "—");
    52: 
    53:   const onChangeAttr = (k, v) => setAttrs((s) => ({ ...s, [k]: v }));
    54: 
    55:   /* ---------------------------------
    56:    *  MAYDONNI HISOBLASH (m² / ga)
    57:    * ---------------------------------*/
    58:   const calcAreaM2 = useMemo(() => {
    59:     try {
    60:       if (!facility?.geometry) return null;
    61:       const a = areaOfGeometryM2(facility.geometry);
    62:       return Number.isFinite(a) ? a : null;
    63:     } catch {
    64:       return null;
    65:     }
    66:   }, [facility?.geometry]);
    67: 
    68:   const calcAreaHa = useMemo(
    69:     () => (calcAreaM2 != null ? calcAreaM2 / 10000 : null),
    70:     [calcAreaM2]
    71:   );
    72: 
    73:   const hasAreaM2Field = useMemo(
    74:     () => schemaFields.some((f) => f.key === "areaM2"),
    75:     [schemaFields]
    76:   );
    77:   const hasAreaHaField = useMemo(
    78:     () => schemaFields.some((f) => f.key === "totalAreaHa"),
    79:     [schemaFields]
    80:   );
    81: 
    82:   // Modal ochilganda/form qayta tiklanganda — bo'sh bo'lsa avtomatik to'ldirish
    83:   useEffect(() => {
    84:     if (!open) return;
    85:     if (calcAreaM2 == null) return;
    86:     if (!hasAreaM2Field && !hasAreaHaField) return;
    87: 
    88:     setAttrs((prev) => {
    89:       const next = { ...prev };
    90:       let changed = false;
    91: 
    92:       if (hasAreaM2Field && (prev.areaM2 == null || prev.areaM2 === "")) {
    93:         next.areaM2 = Math.round(calcAreaM2);
    94:         changed = true;
    95:       }
    96:       if (
    97:         hasAreaHaField &&
    98:         (prev.totalAreaHa == null || prev.totalAreaHa === "")
    99:       ) {
   100:         next.totalAreaHa = Number((calcAreaM2 / 10000).toFixed(4));
   101:         changed = true;
   102:       }
   103:       return changed ? next : prev;
   104:     });
   105:   }, [open, calcAreaM2, hasAreaM2Field, hasAreaHaField]);
   106: 
   107:   // Xaritada geometriya tahrirlash rejimini ishga tushirish
   108:   const startGeometryEdit = () => {
   109:     if (!facility) return;
   110:     try {
   111:       window.dispatchEvent(
   112:         new CustomEvent("facility:edit-geometry", {
   113:           detail: {
   114:             facilityId: facility.id,
   115:             geometry: facility.geometry || null,
   116:           },
   117:         })
   118:       );
   119:       onClose?.(); // modalni yopamiz
   120:     } catch (e) {
   121:       debugError("FacilityEdit geometry edit dispatch failed", e);
   122:       toast.error("Geometriya tahrirlashni ishga tushirib bo‘lmadi.");
   123:     }
   124:   };
   125: 
   126:   // “Qayta hisoblash” — geometriya yo‘q/Point bo‘lsa edit rejimiga taklif
   127:   const recalcArea = () => {
   128:     if (calcAreaM2 == null) {
   129:       const go = window.confirm(
   130:         "Geometriya mavjud emas yoki poligon emas. Geometriyani chizish/tahrirlash rejimiga o‘tasizmi?"
   131:       );
   132:       if (go) startGeometryEdit();
   133:       return;
   134:     }
   135:     // mavjud bo‘lsa — formadagi maydon qiymatlarini yangilaymiz
   136:     setAttrs((prev) => {
   137:       const next = { ...prev };
   138:       if (hasAreaM2Field) next.areaM2 = Math.round(calcAreaM2);
   139:       if (hasAreaHaField)
   140:         next.totalAreaHa = Number((calcAreaM2 / 10000).toFixed(4));
   141:       return next;
   142:     });
   143:   };
   144: 
   145:   // Formatlangan preview
   146:   const fmtM2 =
   147:     calcAreaM2 != null ? Math.round(calcAreaM2).toLocaleString() : "—";
   148:   const fmtHa =
   149:     calcAreaHa != null ? Number(calcAreaHa.toFixed(4)).toLocaleString() : "—";
   150: 
   151:   const onSave = async () => {
   152:     if (!canSave || !facility) return;
   153:     try {
   154:       await patchFacility(facility.id, {
   155:         name: name.trim(),
   156:         status,
   157:         attributes: normalizeNumbers(attrs),
   158:       });
   159:       onClose?.();
   160:       onSaved?.();
   161:     } catch (e) {
   162:       debugError("FacilityEdit save failed", e);
   163:       toast.error(e?.data?.message || "Saqlashda xatolik");
   164:     }
   165:   };
   166: 
   167:   const headerRight = (
   168:     <button
   169:       className={`btn primary ${styles.saveBtn}`}
   170:       onClick={onSave}
   171:       disabled={!canSave}
   172:     >
   173:       Saqlash
   174:     </button>
   175:   );
   176: 
   177:   if (!open || !facility) return null;
   178: 
   179:   return (
   180:     <Modal
   181:       open={open}
   182:       onClose={onClose}
   183:       title="Obyektni tahrirlash"
   184:       size="lg"
   185:       headerRight={headerRight}
   186:       dark={dark}
   187:     >
   188:       <div className={styles.wrapper}>
   189:         {/* Summary */}
   190:         <section className={styles.summary}>
   191:           <div className={styles.avatar}>{typeEmoji(type)}</div>
   192: 
   193:           <div className={styles.head}>
   194:             <label className={styles.label}>Nom *</label>
   195:             <input
   196:               className={styles.nameInput}
   197:               value={name}
   198:               onChange={(e) => setName(e.target.value)}
   199:               placeholder="Masalan: Issiqxona #1"
   200:               autoFocus
   201:             />
   202: 
   203:             <div className={styles.metaRow}>
   204:               <div className={styles.metaItem}>
   205:                 <span className={styles.k}>Tur</span>
   206:                 <span className={styles.v}>{typeLabel}</span>
   207:               </div>
   208: 
   209:               <div className={styles.metaItem}>
   210:                 <span className={styles.k}>Status</span>
   211:                 <select
   212:                   className={styles.select}
   213:                   value={status}
   214:                   onChange={(e) => setStatus(e.target.value)}
   215:                 >
   216:                   <option value="ACTIVE">ACTIVE</option>
   217:                   <option value="INACTIVE">INACTIVE</option>
   218:                   <option value="UNDER_MAINTENANCE">UNDER_MAINTENANCE</option>
   219:                 </select>
   220:               </div>
   221: 
   222:               <div className={styles.metaItem}>
   223:                 <span className={styles.k}>Bo‘lim</span>
   224:                 <span className={styles.pill}>{orgLabel}</span>
   225:               </div>
   226:             </div>
   227:           </div>
   228:         </section>
   229: 
   230:         {/* Details */}
   231:         <section className={styles.section}>
   232:           <div className={styles.sectionTitle}>Maxsus maydonlar</div>
   233: 
   234:           {/* Hisoblangan maydon preview + Recalc + Edit geom */}
   235:           <div
   236:             style={{
   237:               display: "flex",
   238:               gap: 10,
   239:               alignItems: "center",
   240:               marginBottom: 10,
   241:               flexWrap: "wrap",
   242:             }}
   243:           >
   244:             <span className={styles.label}>
   245:               Hisoblangan maydon:&nbsp;
   246:               <b>{fmtM2}</b>&nbsp;m²&nbsp;(
   247:               <b>{fmtHa}</b>&nbsp;ga)
   248:             </span>
   249:             <button className="btn" type="button" onClick={recalcArea}>
   250:               Qayta hisoblash
   251:             </button>
   252:             <button className="btn" type="button" onClick={startGeometryEdit}>
   253:               Geometriyani tahrirlash/chizish
   254:             </button>
   255:           </div>
   256: 
   257:           <div className={styles.grid}>
   258:             {(FACILITY_TYPES[type]?.fields || []).map((f) => (
   259:               <div key={f.key} className={styles.field}>
   260:                 <label className={styles.label}>
   261:                   {f.label}
   262:                   {f.suffix ? ` (${f.suffix})` : ""}
   263:                 </label>
   264: 
   265:                 {f.type === "text" ? (
   266:                   <input
   267:                     className={styles.input}
   268:                     value={attrs[f.key] ?? ""}
   269:                     onChange={(e) => onChangeAttr(f.key, e.target.value)}
   270:                   />
   271:                 ) : (
   272:                   <div className={styles.inputWrap}>
   273:                     <input
   274:                       className={styles.input}
   275:                       type="number"
   276:                       value={attrs[f.key] ?? ""}
   277:                       onChange={(e) => onChangeAttr(f.key, e.target.value)}
   278:                     />
   279:                     {f.suffix && (
   280:                       <span className={styles.unit}>{f.suffix}</span>
   281:                     )}
   282:                   </div>
   283:                 )}
   284:               </div>
   285:             ))}
   286:           </div>
   287: 
   288:           <div className={styles.hint}>
   289:             * Sonli maydonlar bo‘sh qoldirilsa <b>null</b> sifatida yuboriladi.
   290:           </div>
   291:         </section>
   292: 
   293:         <div className={styles.footer}>
   294:           <button className="btn" onClick={onClose}>
   295:             Bekor
   296:           </button>
   297:           <div style={{ flex: 1 }} />
   298:           <button className="btn primary" onClick={onSave} disabled={!canSave}>
   299:             Saqlash
   300:           </button>
   301:         </div>
   302:       </div>
   303:     </Modal>
   304:   );
   305: }
   306: 
   307: function normalizeNumbers(obj) {
   308:   const out = {};
   309:   for (const [k, v] of Object.entries(obj || {})) {
   310:     if (v === "" || v == null) {
   311:       out[k] = null;
   312:       continue;
   313:     }
   314:     const n = Number(v);
   315:     out[k] = Number.isFinite(n) && String(v).trim() !== "" ? n : v;
   316:   }
   317:   return out;
   318: }
   319: 
   320: function typeEmoji(t) {
   321:   switch (t) {
   322:     case "GREENHOUSE":
   323:       return "🌿";
   324:     case "POULTRY":
   325:       return "🐔";
   326:     case "COWSHED":
   327:       return "🐄";
   328:     case "TURKEY":
   329:       return "🦃";
   330:     case "SHEEPFOLD":
   331:       return "🐑";
   332:     case "WORKSHOP":
   333:       return "🏭";
   334:     case "AUX_LAND":
   335:       return "🌾";
   336:     case "BORDER_LAND":
   337:       return "🧭";
   338:     case "FISHPOND":
   339:       return "🐟";
   340:     default:
   341:       return "🏷️";
   342:   }
   343: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityEditModal.module.scss
SIZE: 2665 bytes
================================================================================
     1: // FacilityEditModal.module.scss
     2: 
     3: /* Modal ichida zamonaviy, dark-aware dizayn.
     4:    Ranglar Modal.scss dagi --md-* tokenlardan olinadi. */
     5: 
     6: .wrapper {
     7:   display: grid;
     8:   gap: 14px;
     9: }
    10: 
    11: .summary {
    12:   display: grid;
    13:   grid-template-columns: auto 1fr;
    14:   gap: 12px;
    15:   padding: 12px;
    16:   background: var(--md-header);
    17:   border: 1px solid var(--md-border);
    18:   border-radius: 12px;
    19: }
    20: 
    21: .avatar {
    22:   width: 44px;
    23:   height: 44px;
    24:   display: grid;
    25:   place-items: center;
    26:   font-size: 22px;
    27:   border-radius: 12px;
    28:   background: var(--md-card);
    29:   border: 1px solid var(--md-border);
    30: }
    31: 
    32: .head {
    33:   display: grid;
    34:   gap: 8px;
    35: }
    36: 
    37: .label {
    38:   font-size: 12px;
    39:   color: var(--md-fg);
    40:   opacity: 0.7;
    41: }
    42: 
    43: .nameInput {
    44:   width: 100%;
    45:   padding: 12px 14px;
    46:   border-radius: 12px;
    47:   border: 1px solid var(--md-border);
    48:   background: var(--md-card);
    49:   color: var(--md-fg);
    50: }
    51: 
    52: .metaRow {
    53:   display: grid;
    54:   grid-template-columns: repeat(3, minmax(0, 1fr));
    55:   gap: 10px;
    56: 
    57:   @media (max-width: 720px) {
    58:     grid-template-columns: 1fr;
    59:   }
    60: }
    61: 
    62: .metaItem {
    63:   display: grid;
    64:   gap: 4px;
    65: }
    66: 
    67: .k {
    68:   font-size: 12px;
    69:   opacity: 0.7;
    70: }
    71: 
    72: .v {
    73:   font-weight: 600;
    74: }
    75: 
    76: .select {
    77:   width: 100%;
    78:   padding: 10px 12px;
    79:   border-radius: 12px;
    80:   border: 1px solid var(--md-border);
    81:   background: var(--md-card);
    82:   color: var(--md-fg);
    83: }
    84: 
    85: .pill {
    86:   display: inline-flex;
    87:   align-items: center;
    88:   gap: 6px;
    89:   padding: 8px 10px;
    90:   border-radius: 999px;
    91:   font-size: 13px;
    92:   background: var(--md-card);
    93:   border: 1px solid var(--md-border);
    94: }
    95: 
    96: .section {
    97:   padding: 12px;
    98:   border: 1px solid var(--md-border);
    99:   border-radius: 12px;
   100:   background: var(--md-card);
   101: }
   102: 
   103: .sectionTitle {
   104:   font-weight: 700;
   105:   margin-bottom: 10px;
   106: }
   107: 
   108: .grid {
   109:   display: grid;
   110:   gap: 10px;
   111:   grid-template-columns: repeat(2, minmax(0, 1fr));
   112: 
   113:   @media (max-width: 900px) {
   114:     grid-template-columns: 1fr;
   115:   }
   116: }
   117: 
   118: .field {
   119:   display: grid;
   120:   gap: 6px;
   121: }
   122: 
   123: .input {
   124:   width: 100%;
   125:   padding: 10px 12px;
   126:   border-radius: 12px;
   127:   border: 1px solid var(--md-border);
   128:   background: var(--md-card);
   129:   color: var(--md-fg);
   130: }
   131: 
   132: .inputWrap {
   133:   position: relative;
   134:   display: grid;
   135: }
   136: 
   137: .unit {
   138:   position: absolute;
   139:   right: 10px;
   140:   top: 50%;
   141:   translate: 0 -50%;
   142:   font-size: 12px;
   143:   opacity: 0.7;
   144:   pointer-events: none;
   145: }
   146: 
   147: .hint {
   148:   margin-top: 6px;
   149:   font-size: 12px;
   150:   opacity: 0.8;
   151: }
   152: 
   153: .footer {
   154:   display: flex;
   155:   align-items: center;
   156:   gap: 8px;
   157:   border-top: 1px solid var(--md-border);
   158:   padding-top: 10px;
   159: }
   160: 
   161: .saveBtn {
   162:   border-radius: 10px;
   163:   padding: 8px 12px;
   164:   font-weight: 600;
   165: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityGalleryPanel.jsx
SIZE: 16671 bytes
================================================================================
     1: import { useCallback, useEffect, useMemo, useRef, useState } from "react";
     2: import styles from "./FacilityGalleryPanel.module.scss";
     3: import {
     4:   listFacilityImages,
     5:   uploadFacilityImage,
     6:   deleteFacilityImage,
     7:   buildImageSrc,
     8: } from "../../api/facilityImages";
     9: import { toast } from "react-toastify";
    10: import { debugError } from "../../utils/debug";
    11: 
    12: export default function FacilityGalleryPanel({
    13:   open,
    14:   facility,
    15:   onClose,
    16:   dark,
    17: }) {
    18:   const [images, setImages] = useState([]); // persisted (server) + temp items
    19:   const [loading, setLoading] = useState(false);
    20:   const [uploadingIds, setUploadingIds] = useState(new Set());
    21:   const [progressMap, setProgressMap] = useState({}); // id -> 0..1
    22:   const [failedMap, setFailedMap] = useState(new Set());
    23:   const [panelWidth, setPanelWidth] = useState(null); // dynamic width px
    24:   const [lightboxIdx, setLightboxIdx] = useState(null);
    25:   const [headerHeight, setHeaderHeight] = useState(60); // default header height
    26:   const inputRef = useRef(null);
    27:   const [isDark, setIsDark] = useState(!!dark);
    28: 
    29:   // Fetch on open/facility change
    30:   useEffect(() => {
    31:     let canceled = false;
    32:     if (!open || !facility?.id) return;
    33:     setLoading(true);
    34:     (async () => {
    35:       try {
    36:         const list = await listFacilityImages(facility.id);
    37:         if (!canceled) setImages(list);
    38:       } catch (e) {
    39:         if (!canceled) debugError("listFacilityImages failed", e);
    40:       } finally {
    41:         if (!canceled) setLoading(false);
    42:       }
    43:     })();
    44:     return () => {
    45:       canceled = true;
    46:     };
    47:   }, [open, facility?.id]);
    48: 
    49:   useEffect(() => {
    50:     if (dark != null) {
    51:       setIsDark(!!dark);
    52:       return;
    53:     }
    54:     const root = document.documentElement;
    55:     const compute = () => setIsDark(root.classList.contains("dark"));
    56:     compute();
    57:     const obs = new MutationObserver(compute);
    58:     obs.observe(root, {
    59:       attributes: true,
    60:       attributeFilter: ["class", "data-theme"],
    61:     });
    62:     return () => obs.disconnect();
    63:   }, [dark]);
    64: 
    65:   const canUpload = !!facility?.id;
    66: 
    67:   const processFiles = useCallback(
    68:     async (filesArr) => {
    69:       const files = Array.from(filesArr || []);
    70:       if (!files.length) return;
    71:       const MAX = 5 * 1024 * 1024; // 5MB
    72:       for (const file of files) {
    73:         if (!file.type.startsWith("image/")) {
    74:           toast.warn(`${file.name}: Tasvir emas (image/*)`);
    75:           continue;
    76:         }
    77:         if (file.size > MAX) {
    78:           toast.warn(`${file.name}: >5MB`);
    79:           continue;
    80:         }
    81:         const tempId = `tmp-${Date.now()}-${Math.random()
    82:           .toString(36)
    83:           .slice(2)}`;
    84:         const objUrl = URL.createObjectURL(file);
    85:         setImages((prev) => [
    86:           {
    87:             id: tempId,
    88:             url: objUrl, // temporary
    89:             originalName: file.name,
    90:             sizeBytes: file.size,
    91:             contentType: file.type,
    92:             createdAt: new Date().toISOString(),
    93:             __temp: true,
    94:           },
    95:           ...prev,
    96:         ]);
    97:         setUploadingIds((s) => new Set([...s, tempId]));
    98:         setProgressMap((pm) => ({ ...pm, [tempId]: 0 }));
    99:         try {
   100:           const dto = await uploadFacilityImage(facility.id, file, {
   101:             onProgress: (p) =>
   102:               setProgressMap((pm) => ({ ...pm, [tempId]: p || 0 })),
   103:           });
   104:           setImages((prev) =>
   105:             prev.map((img) => (img.id === tempId ? dto : img))
   106:           );
   107:         } catch (err) {
   108:           debugError("uploadFacilityImage failed", err);
   109:           setImages((prev) => prev.filter((img) => img.id !== tempId));
   110:           const st = err?.response?.status;
   111:           if (st === 400) toast.error("Noto'g'ri rasm (400)");
   112:           else if (st === 403) toast.error("Ruxsat yo'q (403)");
   113:           else if (st === 404) toast.error("Obyekt topilmadi (404)");
   114:           else if (st === 410) toast.error("Eskirgan endpoint (410)");
   115:           else toast.error("Yuklashda xatolik");
   116:           setFailedMap((fm) => new Set([...fm, tempId]));
   117:         } finally {
   118:           setUploadingIds((s) => {
   119:             const n = new Set(s);
   120:             n.delete(tempId);
   121:             return n;
   122:           });
   123:           setProgressMap((pm) => {
   124:             const { [tempId]: _, ...rest } = pm;
   125:             return rest;
   126:           });
   127:         }
   128:       }
   129:     },
   130:     [facility?.id]
   131:   );
   132: 
   133:   const onPickFiles = async (e) => {
   134:     await processFiles(e.target.files);
   135:     e.target.value = ""; // reset
   136:   };
   137: 
   138:   // Drag & drop
   139:   const dropRef = useRef(null);
   140:   useEffect(() => {
   141:     const el = dropRef.current;
   142:     if (!el) return;
   143:     const prevent = (e) => {
   144:       e.preventDefault();
   145:       e.stopPropagation();
   146:     };
   147:     const onDrop = (e) => {
   148:       prevent(e);
   149:       if (!canUpload) return;
   150:       processFiles(e.dataTransfer.files);
   151:     };
   152:     ["dragenter", "dragover", "dragleave", "drop"].forEach((ev) =>
   153:       el.addEventListener(ev, prevent)
   154:     );
   155:     el.addEventListener("drop", onDrop);
   156:     return () => {
   157:       ["dragenter", "dragover", "dragleave", "drop"].forEach((ev) =>
   158:         el.removeEventListener(ev, prevent)
   159:       );
   160:       el.removeEventListener("drop", onDrop);
   161:     };
   162:   }, [processFiles, canUpload]);
   163: 
   164:   const onDelete = useCallback(
   165:     async (img) => {
   166:       if (!facility?.id || !img?.id) return;
   167:       const ok = window.confirm("Rasmni o'chirishni tasdiqlaysizmi?");
   168:       if (!ok) return;
   169:       // Optimistic remove
   170:       setImages((prev) => prev.filter((x) => x.id !== img.id));
   171:       try {
   172:         if (!img.__temp) await deleteFacilityImage(facility.id, img.id);
   173:       } catch {
   174:         toast.error("O'chirishda xatolik");
   175:         // rollback
   176:         setImages((prev) => [...prev, img]);
   177:       }
   178:     },
   179:     [facility?.id]
   180:   );
   181: 
   182:   const imagesWithSrc = useMemo(
   183:     () =>
   184:       images
   185:         .slice()
   186:         .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
   187:         .map((img) => ({
   188:           ...img,
   189:           __src: img.__temp ? img.url : buildImageSrc(img.url) + `?v=${img.id}`,
   190:         })),
   191:     [images]
   192:   );
   193: 
   194:   const fmtSize = (n) => {
   195:     if (!Number.isFinite(n)) return "";
   196:     if (n < 1024) return `${n} B`;
   197:     if (n < 1024 * 1024) return `${(n / 1024).toFixed(1)} KB`;
   198:     return `${(n / 1024 / 1024).toFixed(2)} MB`;
   199:   };
   200: 
   201:   // Toggle global class for layout adjustments (map controls offset)
   202:   useEffect(() => {
   203:     if (open) document.documentElement.classList.add("gallery-open");
   204:     return () => document.documentElement.classList.remove("gallery-open");
   205:   }, [open]);
   206: 
   207:   // Apply dynamic width var
   208:   useEffect(() => {
   209:     if (open && panelWidth) {
   210:       document.documentElement.style.setProperty(
   211:         "--gallery-width",
   212:         panelWidth + "px"
   213:       );
   214:     } else if (!open) {
   215:       document.documentElement.style.removeProperty("--gallery-width");
   216:     }
   217:   }, [panelWidth, open]);
   218: 
   219:   // Resizer handlers
   220:   const dragStateRef = useRef(null);
   221:   const onResizerMouseDown = (e) => {
   222:     if (e.button !== 0) return;
   223:     const root = e.currentTarget?.closest?.(`.${styles.panelRoot}`);
   224:     const startWidth = panelWidth || root?.offsetWidth || 420;
   225:     dragStateRef.current = { startX: e.clientX, startWidth };
   226:     window.addEventListener("mousemove", onResizerMove);
   227:     window.addEventListener("mouseup", onResizerUp, { once: true });
   228:     e.preventDefault();
   229:   };
   230:   const onResizerMove = (e) => {
   231:     const st = dragStateRef.current;
   232:     if (!st) return;
   233:     const dx = st.startX - e.clientX; // drag left -> wider
   234:     const w = Math.min(Math.max(st.startWidth + dx, 300), 800);
   235:     setPanelWidth(w);
   236:   };
   237:   const onResizerUp = () => {
   238:     dragStateRef.current = null;
   239:     window.removeEventListener("mousemove", onResizerMove);
   240:   };
   241: 
   242:   // Measure header height so panel matches only map visible region
   243:   useEffect(() => {
   244:     if (!open) return; // measure only when needed
   245:     const measure = () => {
   246:       const headerEl = document.querySelector("header");
   247:       if (headerEl) {
   248:         const h = headerEl.getBoundingClientRect().height;
   249:         if (h && Math.abs(h - headerHeight) > 0.5) setHeaderHeight(h);
   250:       }
   251:     };
   252:     measure();
   253:     window.addEventListener("resize", measure);
   254:     return () => window.removeEventListener("resize", measure);
   255:   }, [open, headerHeight]);
   256: 
   257:   // After all hooks declared; safe conditional render
   258:   if (!open) return null;
   259: 
   260:   return (
   261:     <div
   262:       className={styles.panelRoot}
   263:       data-dark={isDark || undefined}
   264:       ref={dropRef}
   265:       tabIndex={-1}
   266:       onKeyDown={(e) => {
   267:         if (e.key === "Escape") onClose?.();
   268:         if (e.key === "ArrowRight" && lightboxIdx != null)
   269:           setLightboxIdx((i) => (i + 1) % imagesWithSrc.length);
   270:         if (e.key === "ArrowLeft" && lightboxIdx != null)
   271:           setLightboxIdx(
   272:             (i) => (i - 1 + imagesWithSrc.length) % imagesWithSrc.length
   273:           );
   274:       }}
   275:       style={{
   276:         ...(panelWidth ? { width: panelWidth } : null),
   277:         top: headerHeight,
   278:         height: `calc(100vh - ${headerHeight}px)`,
   279:       }}
   280:     >
   281:       <div className={styles.resizer} onMouseDown={onResizerMouseDown} />
   282:       <div className={styles.header}>
   283:         <div className={styles.titleBlock}>
   284:           <div className={styles.title}>
   285:             {facility?.name || "Obyekt rasmlari"}
   286:           </div>
   287:           <div className={styles.subtitle}>
   288:             {facility?.type} • ID: {facility?.id}
   289:           </div>
   290:         </div>
   291:         <button
   292:           className={styles.closeBtn}
   293:           onClick={onClose}
   294:           aria-label="Yopish"
   295:         >
   296:           ×
   297:         </button>
   298:       </div>
   299:       {loading && <div className={styles.loadingBar} />}
   300:       <div className={styles.body}>
   301:         <div className={styles.toolbar}>
   302:           <label className={styles.uploadLabel} aria-disabled={!canUpload}>
   303:             📤 Yuklash
   304:             <input
   305:               ref={inputRef}
   306:               type="file"
   307:               accept="image/*"
   308:               multiple
   309:               disabled={!canUpload}
   310:               onChange={onPickFiles}
   311:             />
   312:           </label>
   313:           <div style={{ fontSize: 12, opacity: 0.6 }}>
   314:             Maks: 5MB • JPG/PNG/WebP
   315:           </div>
   316:         </div>
   317:         <div className={styles.grid}>
   318:           {imagesWithSrc.length === 0 && !loading && (
   319:             <div className={styles.empty}>Hozircha rasm yo'q. Yuklang.</div>
   320:           )}
   321:           {imagesWithSrc.map((img, idx) => {
   322:             const uploading = uploadingIds.has(img.id);
   323:             const prog = progressMap[img.id];
   324:             const isError = failedMap.has(img.id);
   325:             return (
   326:               <div
   327:                 key={img.id}
   328:                 className={styles.card}
   329:                 onClick={() => setLightboxIdx(idx)}
   330:               >
   331:                 <div className={styles.thumbWrap}>
   332:                   {uploading && (
   333:                     <span className={styles.progressBadge} title="Yuklanmoqda">
   334:                       {prog != null ? Math.round(prog * 100) + "%" : "UP"}
   335:                     </span>
   336:                   )}
   337:                   {isError && (
   338:                     <span
   339:                       className={styles.errorBadge}
   340:                       title="Yuklashda xatolik. Qayta urinib ko'ring?"
   341:                       onClick={(e) => {
   342:                         e.stopPropagation();
   343:                         // re-pick original? we only have blob URL for temp; skip
   344:                       }}
   345:                     >
   346:                       ERR
   347:                     </span>
   348:                   )}
   349:                   <img
   350:                     className={styles.thumb}
   351:                     src={img.__src}
   352:                     alt={img.originalName || `Image ${idx + 1}`}
   353:                     loading="lazy"
   354:                   />
   355:                   <button
   356:                     className={styles.deleteBtn}
   357:                     title="O'chirish"
   358:                     onClick={(e) => {
   359:                       e.stopPropagation();
   360:                       onDelete(img);
   361:                     }}
   362:                   >
   363:                     🗑
   364:                   </button>
   365:                 </div>
   366:                 <div className={styles.meta}>
   367:                   <div className={styles.name} title={img.originalName}>
   368:                     {img.originalName || `Image ${idx + 1}`}
   369:                   </div>
   370:                   <div className={styles.size}>{fmtSize(img.sizeBytes)}</div>
   371:                 </div>
   372:               </div>
   373:             );
   374:           })}
   375:         </div>
   376:         {/* Footer hint removed as per request */}
   377:       </div>
   378:       {lightboxIdx != null && imagesWithSrc[lightboxIdx] && (
   379:         <Lightbox
   380:           images={imagesWithSrc}
   381:           index={lightboxIdx}
   382:           onClose={() => setLightboxIdx(null)}
   383:           onNavigate={(i) => setLightboxIdx(i)}
   384:         />
   385:       )}
   386:     </div>
   387:   );
   388: }
   389: 
   390: function Lightbox({ images, index, onClose, onNavigate }) {
   391:   const escHandler = useCallback(
   392:     (e) => {
   393:       if (e.key === "Escape") onClose?.();
   394:       if (e.key === "ArrowRight") onNavigate?.((index + 1) % images.length);
   395:       if (e.key === "ArrowLeft")
   396:         onNavigate?.((index - 1 + images.length) % images.length);
   397:     },
   398:     [index, images.length, onClose, onNavigate]
   399:   );
   400:   useEffect(() => {
   401:     window.addEventListener("keydown", escHandler);
   402:     return () => window.removeEventListener("keydown", escHandler);
   403:   }, [escHandler]);
   404: 
   405:   const img = images[index];
   406:   const [zoom, setZoom] = useState(1);
   407:   const [offset, setOffset] = useState({ x: 0, y: 0 });
   408:   const dragRef = useRef(null);
   409: 
   410:   if (!img) return null;
   411: 
   412:   const onWheel = (e) => {
   413:     e.preventDefault();
   414:     const delta = e.deltaY < 0 ? 0.12 : -0.12;
   415:     setZoom((z) => Math.min(8, Math.max(0.2, +(z + delta).toFixed(2))));
   416:   };
   417:   const onMouseDown = (e) => {
   418:     if (e.button !== 0) return;
   419:     dragRef.current = { startX: e.clientX, startY: e.clientY, base: offset };
   420:     window.addEventListener("mousemove", onMouseMove);
   421:     window.addEventListener("mouseup", onMouseUp, { once: true });
   422:   };
   423:   const onMouseMove = (e) => {
   424:     if (!dragRef.current) return;
   425:     const { startX, startY, base } = dragRef.current;
   426:     setOffset({
   427:       x: base.x + (e.clientX - startX),
   428:       y: base.y + (e.clientY - startY),
   429:     });
   430:   };
   431:   const onMouseUp = () => {
   432:     dragRef.current = null;
   433:     window.removeEventListener("mousemove", onMouseMove);
   434:   };
   435:   const resetView = () => {
   436:     setZoom(1);
   437:     setOffset({ x: 0, y: 0 });
   438:   };
   439: 
   440:   return (
   441:     <div className={styles.lightbox} onClick={onClose}>
   442:       <div className={styles.lightboxTop} onClick={(e) => e.stopPropagation()}>
   443:         <div style={{ fontSize: 14, fontWeight: 500 }}>
   444:           {img.originalName || `Image ${index + 1}`}
   445:         </div>
   446:         <div style={{ display: "flex", gap: 8 }}>
   447:           <button
   448:             className={styles.navBtn}
   449:             onClick={() =>
   450:               onNavigate((index - 1 + images.length) % images.length)
   451:             }
   452:             aria-label="Oldingi"
   453:           >
   454:             ‹
   455:           </button>
   456:           <button
   457:             className={styles.navBtn}
   458:             onClick={() => onNavigate((index + 1) % images.length)}
   459:             aria-label="Keyingi"
   460:           >
   461:             ›
   462:           </button>
   463:           <button
   464:             className={styles.navBtn}
   465:             onClick={resetView}
   466:             aria-label="Reset"
   467:             title="Zoom va pozitsiyani tiklash"
   468:           >
   469:             ⟳
   470:           </button>
   471:           <button
   472:             className={styles.navBtn}
   473:             onClick={onClose}
   474:             aria-label="Yopish"
   475:           >
   476:             ×
   477:           </button>
   478:         </div>
   479:       </div>
   480:       <div
   481:         className={styles.lightboxImgWrap}
   482:         onClick={(e) => e.stopPropagation()}
   483:         onWheel={onWheel}
   484:         onMouseDown={onMouseDown}
   485:         style={{ cursor: zoom !== 1 ? "grab" : "default" }}
   486:       >
   487:         <img
   488:           className={styles.lightboxImg}
   489:           src={img.__src}
   490:           alt={img.originalName || `Image ${index + 1}`}
   491:           style={{
   492:             transform: `translate(${offset.x}px, ${offset.y}px) scale(${zoom})`,
   493:             transition: dragRef.current ? "none" : "transform .08s",
   494:             cursor: dragRef.current
   495:               ? "grabbing"
   496:               : zoom !== 1
   497:               ? "grab"
   498:               : "default",
   499:           }}
   500:         />
   501:       </div>
   502:     </div>
   503:   );
   504: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityGalleryPanel.module.scss
SIZE: 7864 bytes
================================================================================
     1: @use "../../styles/_variables.scss" as v;
     2: 
     3: .panelRoot {
     4:   position: fixed;
     5:   top: 0; /* JS overrides when open */
     6:   right: 0;
     7:   bottom: 0;
     8:   height: 100%;
     9:   width: clamp(320px, 34vw, 520px);
    10:   background: var(--gallery-bg, rgba(255, 255, 255, 0.86));
    11:   backdrop-filter: blur(14px) saturate(180%);
    12:   -webkit-backdrop-filter: blur(14px) saturate(180%);
    13:   border-left: 1px solid var(--gallery-border, #e2e8f0);
    14:   display: flex;
    15:   flex-direction: column;
    16:   z-index: 1400; // above Leaflet controls (default ~1000) so toggle button doesn't overlay
    17:   box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.04), 0 4px 28px -6px rgba(0, 0, 0, 0.25);
    18:   animation: slideIn 0.35s cubic-bezier(0.4, 0, 0.2, 1);
    19:   font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, sans-serif;
    20:   color: var(--gallery-fg, #0f172a);
    21: }
    22: 
    23: @keyframes slideIn {
    24:   from {
    25:     transform: translateX(12px);
    26:     opacity: 0;
    27:   }
    28:   to {
    29:     transform: translateX(0);
    30:     opacity: 1;
    31:   }
    32: }
    33: 
    34: html.dark .panelRoot,
    35: .panelRoot[data-dark] {
    36:   --gallery-bg: rgba(15, 23, 42, 0.92);
    37:   --gallery-border: #1e293b;
    38:   --gallery-fg: #e2e8f0;
    39:   --gallery-subtle: #94a3b8;
    40:   --gallery-divider: #1e293b;
    41:   background: #0f172a; /* force solid dark (no white appearance) */
    42:   box-shadow: 0 0 0 1px #1e293b, 0 4px 30px -6px rgba(0, 0, 0, 0.65);
    43: }
    44: 
    45: .header {
    46:   display: flex;
    47:   align-items: center;
    48:   padding: 10px 14px;
    49:   gap: 12px;
    50:   border-bottom: 1px solid var(--gallery-divider, #e2e8f0);
    51:   backdrop-filter: blur(8px);
    52:   -webkit-backdrop-filter: blur(8px);
    53:   background: linear-gradient(
    54:     to bottom,
    55:     rgba(255, 255, 255, 0.65),
    56:     rgba(255, 255, 255, 0)
    57:   );
    58: }
    59: html.dark .header,
    60: .panelRoot[data-dark] .header {
    61:   background: linear-gradient(
    62:     to bottom,
    63:     rgba(15, 23, 42, 0.9),
    64:     rgba(15, 23, 42, 0)
    65:   );
    66: }
    67: 
    68: .titleBlock {
    69:   flex: 1;
    70:   display: flex;
    71:   flex-direction: column;
    72: }
    73: .title {
    74:   font-size: 16px;
    75:   font-weight: 600;
    76:   line-height: 1.3;
    77: }
    78: .subtitle {
    79:   font-size: 12px;
    80:   color: var(--gallery-subtle, #64748b);
    81: }
    82: 
    83: .closeBtn {
    84:   cursor: pointer;
    85:   border: none;
    86:   background: transparent;
    87:   color: inherit;
    88:   padding: 6px;
    89:   border-radius: 8px;
    90:   font-size: 18px;
    91:   line-height: 1;
    92: }
    93: .closeBtn:hover {
    94:   background: rgba(0, 0, 0, 0.06);
    95: }
    96: html.dark .closeBtn:hover,
    97: .panelRoot[data-dark] .closeBtn:hover {
    98:   background: rgba(255, 255, 255, 0.08);
    99: }
   100: 
   101: .body {
   102:   flex: 1;
   103:   overflow: hidden;
   104:   display: flex;
   105:   flex-direction: column;
   106: }
   107: .toolbar {
   108:   padding: 8px 14px;
   109:   display: flex;
   110:   gap: 10px;
   111:   align-items: center;
   112:   border-bottom: 1px solid var(--gallery-divider, #e2e8f0);
   113:   min-height: 48px;
   114: }
   115: 
   116: .uploadLabel {
   117:   position: relative;
   118:   display: inline-flex;
   119:   align-items: center;
   120:   gap: 6px;
   121:   font-size: 13px;
   122:   font-weight: 600;
   123:   padding: 6px 14px;
   124:   background: linear-gradient(135deg, #2563eb, #3b82f6);
   125:   color: #fff;
   126:   border-radius: 9px;
   127:   cursor: pointer;
   128:   box-shadow: 0 2px 6px -2px rgba(0, 0, 0, 0.25);
   129: }
   130: html.dark .uploadLabel,
   131: .panelRoot[data-dark] .uploadLabel {
   132:   box-shadow: 0 2px 6px -2px rgba(0, 0, 0, 0.6);
   133: }
   134: .uploadLabel input {
   135:   position: absolute;
   136:   inset: 0;
   137:   opacity: 0;
   138:   cursor: pointer;
   139: }
   140: .uploadLabel:disabled,
   141: .uploadLabel[aria-disabled="true"] {
   142:   opacity: 0.5;
   143:   cursor: not-allowed;
   144: }
   145: 
   146: .grid {
   147:   flex: 1;
   148:   overflow-y: auto;
   149:   padding: 14px 18px 60px;
   150:   display: grid;
   151:   grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
   152:   gap: 14px;
   153:   align-content: start; /* kam rasm bo'lsa cho'zilib ketmasin */
   154: }
   155: 
   156: .card {
   157:   position: relative;
   158:   border: 1px solid var(--gallery-card-border, #e2e8f0);
   159:   border-radius: 12px;
   160:   background: var(--gallery-card-bg, #fff);
   161:   overflow: hidden;
   162:   display: flex;
   163:   flex-direction: column;
   164:   cursor: pointer;
   165:   transition: border-color 0.15s, transform 0.15s;
   166: }
   167: html.dark .card,
   168: .panelRoot[data-dark] .card {
   169:   --gallery-card-bg: #0f172a;
   170:   --gallery-card-border: #1e293b;
   171: }
   172: .card:hover {
   173:   transform: translateY(-2px);
   174: }
   175: .thumbWrap {
   176:   aspect-ratio: 4 / 3;
   177:   width: 100%;
   178:   position: relative;
   179:   display: flex;
   180:   align-items: center;
   181:   justify-content: center;
   182:   background: #f1f5f9;
   183:   overflow: hidden;
   184: }
   185: html.dark .thumbWrap,
   186: .panelRoot[data-dark] .thumbWrap {
   187:   background: #1e293b;
   188: }
   189: .thumb {
   190:   width: 100%;
   191:   height: 100%;
   192:   object-fit: cover;
   193: }
   194: .meta {
   195:   padding: 6px 8px 8px;
   196:   display: flex;
   197:   flex-direction: column;
   198:   gap: 4px;
   199: }
   200: .name {
   201:   font-size: 12px;
   202:   line-height: 1.2;
   203:   font-weight: 500;
   204:   word-break: break-word;
   205: }
   206: .size {
   207:   font-size: 11px;
   208:   opacity: 0.6;
   209: }
   210: 
   211: .deleteBtn {
   212:   position: absolute;
   213:   top: 4px;
   214:   right: 4px;
   215:   background: rgba(0, 0, 0, 0.55);
   216:   color: #fff;
   217:   border: none;
   218:   width: 26px;
   219:   height: 26px;
   220:   border-radius: 8px;
   221:   display: flex;
   222:   align-items: center;
   223:   justify-content: center;
   224:   cursor: pointer;
   225:   font-size: 15px;
   226: }
   227: .deleteBtn:hover {
   228:   background: rgba(185, 28, 28, 0.9);
   229: }
   230: 
   231: .empty {
   232:   padding: 38px 20px;
   233:   text-align: center;
   234:   opacity: 0.65;
   235:   font-size: 14px;
   236:   border: 2px dashed var(--gallery-border, #e2e8f0);
   237:   border-radius: 14px;
   238: }
   239: html.dark .empty,
   240: .panelRoot[data-dark] .empty {
   241:   border-color: #1e293b;
   242: }
   243: 
   244: .loadingBar {
   245:   height: 4px;
   246:   background: linear-gradient(90deg, #3b82f6, #9333ea);
   247:   animation: load 1s linear infinite;
   248: }
   249: @keyframes load {
   250:   from {
   251:     background-position: 0 0;
   252:   }
   253:   to {
   254:     background-position: 200% 0;
   255:   }
   256: }
   257: 
   258: /* Lightbox */
   259: .lightbox {
   260:   position: fixed;
   261:   inset: 0;
   262:   z-index: 1000;
   263:   background: rgba(15, 23, 42, 0.85);
   264:   display: flex;
   265:   flex-direction: column;
   266: }
   267: .lightboxTop {
   268:   display: flex;
   269:   justify-content: space-between;
   270:   align-items: center;
   271:   padding: 10px 16px;
   272:   color: #f1f5f9;
   273: }
   274: .lightboxImgWrap {
   275:   flex: 1;
   276:   display: flex;
   277:   align-items: center;
   278:   justify-content: center;
   279:   padding: 20px;
   280: }
   281: .lightboxImg {
   282:   max-width: 90%;
   283:   max-height: 90%;
   284:   border-radius: 12px;
   285:   box-shadow: 0 8px 40px -8px rgba(0, 0, 0, 0.6);
   286: }
   287: .navBtn {
   288:   cursor: pointer;
   289:   border: none;
   290:   background: rgba(255, 255, 255, 0.12);
   291:   color: #fff;
   292:   width: 42px;
   293:   height: 42px;
   294:   border-radius: 50%;
   295:   font-size: 20px;
   296:   display: flex;
   297:   align-items: center;
   298:   justify-content: center;
   299: }
   300: .navBtn:hover {
   301:   background: rgba(255, 255, 255, 0.3);
   302: }
   303: 
   304: .progressBadge {
   305:   position: absolute;
   306:   left: 6px;
   307:   top: 6px;
   308:   background: #1d4ed8;
   309:   color: #fff;
   310:   font-size: 11px;
   311:   padding: 2px 6px;
   312:   border-radius: 999px;
   313:   letter-spacing: 0.5px;
   314: }
   315: .errorBadge {
   316:   position: absolute;
   317:   left: 6px;
   318:   top: 6px;
   319:   background: #dc2626;
   320:   color: #fff;
   321:   font-size: 11px;
   322:   padding: 2px 6px;
   323:   border-radius: 999px;
   324: }
   325: 
   326: .footerHint {
   327:   padding: 6px 14px 10px;
   328:   font-size: 11px;
   329:   opacity: 0.55;
   330:   border-top: 1px solid var(--gallery-divider, #e2e8f0);
   331: }
   332: html.dark .footerHint,
   333: .panelRoot[data-dark] .footerHint {
   334:   border-top-color: #1e293b;
   335: }
   336: 
   337: /* Map control offset when gallery open */
   338: html.gallery-open .leaflet-top.leaflet-right {
   339:   right: clamp(320px, 34vw, 520px);
   340: }
   341: 
   342: /* If JS sets --gallery-width we respect it */
   343: html.gallery-open .leaflet-top.leaflet-right {
   344:   right: var(--gallery-width, clamp(320px, 34vw, 520px));
   345: }
   346: 
   347: .resizer {
   348:   position: absolute;
   349:   left: 0;
   350:   top: 0;
   351:   bottom: 0;
   352:   width: 8px;
   353:   cursor: col-resize;
   354:   z-index: 10;
   355:   background: linear-gradient(
   356:     to right,
   357:     rgba(0, 0, 0, 0) 0,
   358:     rgba(0, 0, 0, 0.08) 50%,
   359:     rgba(0, 0, 0, 0) 100%
   360:   );
   361:   opacity: 0;
   362:   transition: opacity 0.2s;
   363: }
   364: .panelRoot:hover .resizer {
   365:   opacity: 1;
   366: }
   367: html.dark .resizer,
   368: .panelRoot[data-dark] .resizer {
   369:   background: linear-gradient(
   370:     to right,
   371:     rgba(255, 255, 255, 0) 0,
   372:     rgba(255, 255, 255, 0.25) 50%,
   373:     rgba(255, 255, 255, 0) 100%
   374:   );
   375: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityGeoLayer.jsx
SIZE: 11568 bytes
================================================================================
     1: // src/components/map/FacilityGeoLayer.jsx
     2: import { useMemo, useCallback, useRef } from "react";
     3: import { GeoJSON, Marker, Popup } from "react-leaflet";
     4: import { typeColor, badgeIconFor } from "./mapIcons";
     5: import { centroidOfGeometry } from "../../utils/geo";
     6: import { areaOfGeometryM2 } from "../../utils/geo";
     7: import { FACILITY_TYPES } from "../../data/facilityTypes";
     8: 
     9: export default function FacilityGeoLayer({
    10:   facilities,
    11:   showPolys = true,
    12:   onFlyTo,
    13:   onOpenEdit, // popupdagi "Tahrirlash" va marker kliklari uchun
    14: }) {
    15:   const geoJsonRef = useRef(null);
    16: 
    17:   const facilityById = useMemo(() => {
    18:     const m = new Map();
    19:     for (const f of facilities || []) m.set(f.id, f);
    20:     return m;
    21:   }, [facilities]);
    22: 
    23:   // LatLng tekshirish
    24:   function isValidLatLng(ll) {
    25:     return (
    26:       ll &&
    27:       Number.isFinite(ll.lat) &&
    28:       Number.isFinite(ll.lng) &&
    29:       ll.lat >= -90 &&
    30:       ll.lat <= 90 &&
    31:       ll.lng >= -180 &&
    32:       ll.lng <= 180
    33:     );
    34:   }
    35: 
    36:   /* ---------- GeoJSON uchun FeatureCollection (faqat polygonlar) ---------- */
    37:   const fc = useMemo(() => {
    38:     const features = (facilities || [])
    39:       .filter(
    40:         (f) => f.geometry && f.geometry.type && f.geometry.type !== "Point"
    41:       )
    42:       .map((f) => ({
    43:         type: "Feature",
    44:         geometry: f.geometry,
    45:         properties: {
    46:           id: f.id,
    47:           name: f.name,
    48:           type: f.type,
    49:           status: f.status,
    50:           zoom: f.zoom,
    51:           color: typeColor(f.type),
    52:         },
    53:       }));
    54:     return { type: "FeatureCollection", features };
    55:   }, [facilities]);
    56: 
    57:   // Eski ishlagan mantiqqa o‘xshash: poligon qatlamini kuchli qayta chizish uchun key
    58:   const geoKey = useMemo(
    59:     () =>
    60:       (fc.features.length
    61:         ? fc.features.map((fe) => fe.properties.id).join("|")
    62:         : "empty") + (showPolys ? "_on" : "_off"),
    63:     [fc, showPolys]
    64:   );
    65: 
    66:   /* ------------------------ Centroid markerlar ro‘yxati ------------------- */
    67:   const centroidBadges = useMemo(() => {
    68:     return (facilities || [])
    69:       .filter(
    70:         (f) => f.geometry && f.geometry.type && f.geometry.type !== "Point"
    71:       )
    72:       .map((f) => {
    73:         const c = centroidOfGeometry(f.geometry); // {lat,lng} | null
    74:         if (!c || !isValidLatLng(c)) return null;
    75: 
    76:         // 🔢 Hisoblangan maydon (m²/ga)
    77:         let areaM2 = null,
    78:           areaHa = null;
    79:         try {
    80:           const a = areaOfGeometryM2(f.geometry);
    81:           if (Number.isFinite(a)) {
    82:             areaM2 = Math.round(a);
    83:             areaHa = a / 10000;
    84:           }
    85:         } catch {}
    86: 
    87:         const typeLabel = FACILITY_TYPES[f.type]?.label || f.type;
    88:         const orgLabel =
    89:           f.orgName ||
    90:           f.org?.name ||
    91:           (f.orgId != null ? `Org #${f.orgId}` : "—");
    92:         const details = f.attributes || f.details || {};
    93: 
    94:         return (
    95:           <Marker
    96:             key={`fc-${f.id}`}
    97:             position={[c.lat, c.lng]}
    98:             icon={badgeIconFor(f.type, 28)}
    99:             pane="facilities-centroids"
   100:             eventHandlers={{
   101:               click: () => onOpenEdit?.(f), // ✅ to‘liq obyekt yuboramiz
   102:               dblclick: () => onFlyTo?.([c.lat, c.lng], 17),
   103:             }}
   104:           >
   105:             <Popup minWidth={260} maxWidth={360} autoPan>
   106:               <div style={{ minWidth: 240 }}>
   107:                 <div style={{ fontWeight: 700, fontSize: 15, marginBottom: 2 }}>
   108:                   {f.name || "Obyekt"}
   109:                 </div>
   110:                 <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 6 }}>
   111:                   {typeLabel} {f.status ? `• ${f.status}` : ""} <br />
   112:                   <span style={{ opacity: 0.9 }}>Bo‘lim:</span> {orgLabel}
   113:                 </div>
   114: 
   115:                 {/* 🔢 Hisoblangan maydon badge */}
   116:                 {areaM2 != null && (
   117:                   <div
   118:                     style={{
   119:                       display: "inline-flex",
   120:                       alignItems: "center",
   121:                       gap: 8,
   122:                       padding: "4px 8px",
   123:                       border: "1px solid #e5e7eb",
   124:                       borderRadius: 999,
   125:                       background: "#f8fafc",
   126:                       fontSize: 12,
   127:                       marginBottom: 8,
   128:                     }}
   129:                   >
   130:                     <strong>Maydon:</strong>
   131:                     <span>
   132:                       {areaM2.toLocaleString()} m²{" "}
   133:                       <span style={{ opacity: 0.7 }}>
   134:                         ({Number(areaHa.toFixed(4)).toLocaleString()} ga)
   135:                       </span>
   136:                     </span>
   137:                   </div>
   138:                 )}
   139: 
   140:                 {/* maydonlar (eski popup tarkibi bilan mos) */}
   141:                 <div style={{ display: "grid", gap: 6 }}>
   142:                   {(FACILITY_TYPES[f.type]?.fields || []).map((fld) => {
   143:                     const val = details[fld.key];
   144:                     if (
   145:                       val === null ||
   146:                       val === undefined ||
   147:                       String(val).trim?.() === ""
   148:                     )
   149:                       return null;
   150:                     return (
   151:                       <div
   152:                         key={fld.key}
   153:                         style={{
   154:                           display: "grid",
   155:                           gridTemplateColumns: "1fr auto",
   156:                           gap: 10,
   157:                           fontSize: 13,
   158:                         }}
   159:                       >
   160:                         <div style={{ color: "#64748b" }}>
   161:                           {fld.label}
   162:                           {fld.suffix ? ` (${fld.suffix})` : ""}
   163:                         </div>
   164:                         <div style={{ fontWeight: 600 }}>{String(val)}</div>
   165:                       </div>
   166:                     );
   167:                   })}
   168:                 </div>
   169:                 <div style={{ marginTop: 8, display: "flex", gap: 8 }}>
   170:                   <button
   171:                     className="pp-edit-react"
   172:                     onClick={() => onOpenEdit?.(f)} // ✅ obyekt
   173:                     style={{
   174:                       padding: "6px 10px",
   175:                       borderRadius: 8,
   176:                       border: "1px solid #e5e7eb",
   177:                       background: "#fff",
   178:                       cursor: "pointer",
   179:                     }}
   180:                   >
   181:                     Tahrirlash
   182:                   </button>
   183:                   <button
   184:                     className="pp-zoom-react"
   185:                     onClick={() => onFlyTo?.([c.lat, c.lng], 17)}
   186:                     style={{
   187:                       padding: "6px 10px",
   188:                       borderRadius: 8,
   189:                       border: "1px solid #e5e7eb",
   190:                       background: "#fff",
   191:                       cursor: "pointer",
   192:                     }}
   193:                   >
   194:                     Zoom
   195:                   </button>
   196:                 </div>
   197:               </div>
   198:             </Popup>
   199:           </Marker>
   200:         );
   201:       })
   202:       .filter(Boolean);
   203:   }, [facilities, onFlyTo, onOpenEdit]);
   204: 
   205:   /* ---------------------------- GeoJSON style ---------------------------- */
   206:   const style = useCallback((feature) => {
   207:     const col =
   208:       feature?.properties?.color || typeColor(feature?.properties?.type);
   209:     return {
   210:       color: col,
   211:       weight: 2, // eski qiymat
   212:       fillOpacity: 0.15, // eski qiymat
   213:       fillColor: col,
   214:       dashArray: "3", // eski qiymat
   215:     };
   216:   }, []);
   217: 
   218:   /* ----------------------- GeoJSON per-feature callback ------------------- */
   219:   const onEach = useCallback(
   220:     (feature, layer) => {
   221:       const id = feature?.properties?.id;
   222:       const f = id != null ? facilityById.get(id) : null;
   223:       if (!f) return;
   224: 
   225:       const typeLabel = FACILITY_TYPES[f.type]?.label || f.type;
   226:       const orgLabel =
   227:         f.orgName || f.org?.name || (f.orgId != null ? `Org #${f.orgId}` : "—");
   228:       const details = f.attributes || f.details || {};
   229: 
   230:       // 🔢 Hisoblangan maydon (m²/ga)
   231:       let areaBlock = "";
   232:       try {
   233:         const a = areaOfGeometryM2(f.geometry);
   234:         if (Number.isFinite(a)) {
   235:           const m2 = Math.round(a).toLocaleString();
   236:           const ha = Number((a / 10000).toFixed(4)).toLocaleString();
   237:           areaBlock = `
   238:             <div style="display:inline-flex;align-items:center;gap:8px;padding:4px 8px;border:1px solid #e5e7eb;border-radius:999px;background:#f8fafc;font-size:12px;margin:6px 0 8px;">
   239:               <strong>Maydon:</strong>
   240:               <span>${m2} m² <span style="opacity:.7">(${ha} ga)</span></span>
   241:             </div>
   242:           `;
   243:         }
   244:       } catch {}
   245: 
   246:       const rows = (FACILITY_TYPES[f.type]?.fields || [])
   247:         .map((fld) => {
   248:           const val = details[fld.key];
   249:           if (val === null || val === undefined || String(val).trim?.() === "")
   250:             return "";
   251:           const suffix = fld.suffix ? ` (${fld.suffix})` : "";
   252:           return `
   253:             <div style="display:grid;grid-template-columns:1fr auto;gap:10px;font-size:13px;">
   254:               <div style="color:#64748b">${escapeHtml(fld.label)}${suffix}</div>
   255:               <div style="font-weight:600">${escapeHtml(String(val))}</div>
   256:             </div>`;
   257:         })
   258:         .filter(Boolean)
   259:         .join("");
   260: 
   261:       const html = `
   262:         <div style="min-width:240px">
   263:           <div style="font-weight:700;font-size:15px;margin-bottom:2px">
   264:             ${escapeHtml(f.name || "Obyekt")}
   265:           </div>
   266:           <div style="font-size:12px;opacity:.8;margin-bottom:6px">
   267:             ${escapeHtml(typeLabel)}${
   268:         f.status ? " • " + escapeHtml(f.status) : ""
   269:       }<br/>
   270:             <span style="opacity:.9">Bo‘lim:</span> ${escapeHtml(orgLabel)}
   271:           </div>
   272:           ${areaBlock}
   273:           ${rows}
   274:           <div style="margin-top:8px; display:flex; gap:8px;">
   275:             <button class="pp-edit" data-id="${id}" style="padding:6px 10px;border-radius:8px;border:1px solid #e5e7eb;background:#fff;cursor:pointer">Tahrirlash</button>
   276:             <button class="pp-zoom" data-id="${id}" style="padding:6px 10px;border-radius:8px;border:1px solid #e5e7eb;background:#fff;cursor:pointer">Zoom</button>
   277:           </div>
   278:         </div>
   279:       `;
   280: 
   281:       layer.bindPopup(html);
   282:       try {
   283:         layer.bringToFront();
   284:       } catch {}
   285: 
   286:       layer.on("popupopen", (e) => {
   287:         const el = e.popup?._contentNode;
   288:         if (!el) return;
   289:         const btnEdit = el.querySelector(".pp-edit");
   290:         const btnZoom = el.querySelector(".pp-zoom");
   291:         if (btnEdit) btnEdit.addEventListener("click", () => onOpenEdit?.(f)); // ✅ obyekt
   292:         if (btnZoom) {
   293:           const c = centroidOfGeometry(f.geometry);
   294:           if (c && isValidLatLng(c) && onFlyTo) onFlyTo([c.lat, c.lng], 17);
   295:         }
   296:       });
   297:     },
   298:     [facilityById, onFlyTo, onOpenEdit]
   299:   );
   300: 
   301:   return (
   302:     <>
   303:       {showPolys && fc.features.length > 0 && (
   304:         <GeoJSON
   305:           key={geoKey}
   306:           data={fc}
   307:           style={style}
   308:           onEachFeature={onEach}
   309:           pane="facilities-polys" // eski Pane nomi
   310:           ref={geoJsonRef}
   311:         />
   312:       )}
   313:       {showPolys && centroidBadges}
   314:     </>
   315:   );
   316: }
   317: 
   318: function escapeHtml(s) {
   319:   return String(s)
   320:     .replaceAll("&", "&amp;")
   321:     .replaceAll("<", "&lt;")
   322:     .replaceAll(">", "&gt;")
   323:     .replaceAll('"', "&quot;");
   324: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityMarkers.jsx
SIZE: 4861 bytes
================================================================================
     1: // src/components/map/FacilityMarkers.jsx
     2: import { Marker, Popup } from "react-leaflet";
     3: import { centroidOfGeometry } from "../../utils/geo";
     4: import { badgeIconFor } from "./mapIcons";
     5: import { FACILITY_TYPES } from "../../data/facilityTypes";
     6: import { useEffect, useState } from "react";
     7: 
     8: export default function FacilityMarkers({
     9:   facilities,
    10:   onOpenEdit,
    11:   onOpenGallery,
    12: }) {
    13:   const [isDark, setIsDark] = useState(false);
    14:   useEffect(() => {
    15:     const root = document.documentElement;
    16:     const compute = () => setIsDark(root.classList.contains("dark"));
    17:     compute();
    18:     const obs = new MutationObserver(compute);
    19:     obs.observe(root, {
    20:       attributes: true,
    21:       attributeFilter: ["class", "data-theme"],
    22:     });
    23:     return () => obs.disconnect();
    24:   }, []);
    25:   if (!Array.isArray(facilities) || facilities.length === 0) return null;
    26: 
    27:   return (
    28:     <>
    29:       {facilities.map((f) => {
    30:         const pos = derivePosition(f);
    31:         if (!pos) return null;
    32: 
    33:         const icon = badgeIconFor(f.type, 28);
    34:         const typeLabel = FACILITY_TYPES[f.type]?.label || f.type;
    35:         const orgLabel =
    36:           f.orgName ||
    37:           f.org?.name ||
    38:           (f.orgId != null ? `Org #${f.orgId}` : "—");
    39:         const details = f.attributes || f.details || {};
    40: 
    41:         return (
    42:           <Marker
    43:             key={`fmk-${f.id}`}
    44:             position={pos}
    45:             icon={icon}
    46:             pane="facilities-markers"
    47:             eventHandlers={{
    48:               dblclick: () => onOpenGallery?.(f),
    49:             }}
    50:           >
    51:             <Popup minWidth={260} maxWidth={360} autoPan>
    52:               <div style={{ minWidth: 240 }}>
    53:                 <div style={{ fontWeight: 700, fontSize: 15, marginBottom: 2 }}>
    54:                   {f.name || "Obyekt"}
    55:                 </div>
    56:                 <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 6 }}>
    57:                   {typeLabel} {f.status ? `• ${f.status}` : ""} <br />
    58:                   <span style={{ opacity: 0.9 }}>Bo‘lim:</span> {orgLabel}
    59:                 </div>
    60: 
    61:                 <div style={{ display: "grid", gap: 6 }}>
    62:                   {(FACILITY_TYPES[f.type]?.fields || []).map((fld) => {
    63:                     const v = valueOrDash(details[fld.key]);
    64:                     if (v === "—") return null;
    65:                     return (
    66:                       <div
    67:                         key={fld.key}
    68:                         style={{
    69:                           display: "grid",
    70:                           gridTemplateColumns: "1fr auto",
    71:                           gap: 10,
    72:                           fontSize: 13,
    73:                         }}
    74:                       >
    75:                         <div style={{ color: "#64748b" }}>
    76:                           {fld.label}
    77:                           {fld.suffix ? ` (${fld.suffix})` : ""}
    78:                         </div>
    79:                         <div style={{ fontWeight: 600 }}>{v}</div>
    80:                       </div>
    81:                     );
    82:                   })}
    83:                 </div>
    84: 
    85:                 {/* Popup pastida tahrirlash tugmasi */}
    86:                 <div style={{ display: "flex", marginTop: 10, gap: 8 }}>
    87:                   <button
    88:                     className="btn"
    89:                     style={{
    90:                       padding: "6px 10px",
    91:                       borderRadius: 10,
    92:                       background: isDark ? "#1e293b" : "#f1f5f9",
    93:                       color: isDark ? "#e2e8f0" : "#0f172a",
    94:                       border: `1px solid ${isDark ? "#334155" : "#cbd5e1"}`,
    95:                       boxShadow: isDark
    96:                         ? "0 2px 6px -2px rgba(0,0,0,.6)"
    97:                         : "0 2px 6px -2px rgba(0,0,0,.15)",
    98:                       fontWeight: 600,
    99:                     }}
   100:                     onClick={() => onOpenGallery?.(f)}
   101:                   >
   102:                     Rasmlar
   103:                   </button>
   104:                   <div style={{ flex: 1 }} />
   105:                   <button
   106:                     className="btn primary"
   107:                     style={{ padding: "6px 10px", borderRadius: 10 }}
   108:                     onClick={() => onOpenEdit?.(f)}
   109:                   >
   110:                     Tahrirlash
   111:                   </button>
   112:                 </div>
   113:               </div>
   114:             </Popup>
   115:           </Marker>
   116:         );
   117:       })}
   118:     </>
   119:   );
   120: }
   121: 
   122: function derivePosition(f) {
   123:   if (f?.centroid?.lat && f?.centroid?.lng)
   124:     return [f.centroid.lat, f.centroid.lng];
   125:   if (f?.geometry) {
   126:     const c = centroidOfGeometry(f.geometry);
   127:     if (c) return [c.lat, c.lng];
   128:   }
   129:   if (Number.isFinite(f?.lat) && Number.isFinite(f?.lng)) return [f.lat, f.lng];
   130:   return null;
   131: }
   132: 
   133: function valueOrDash(v) {
   134:   if (v === null || v === undefined || String(v).trim() === "") return "—";
   135:   return v;
   136: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\FacilityPopupCard.jsx
SIZE: 1139 bytes
================================================================================
     1: // src/components/map/FacilityPopupCard.jsx
     2: export default function FacilityPopupCard({ f, onEdit, onDelete }) {
     3:   return (
     4:     <div style={{ minWidth: 220 }}>
     5:       <div style={{ fontWeight: 700 }}>{f.name}</div>
     6:       <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 8 }}>
     7:         {f.type} • {f.status}
     8:       </div>
     9:       <div style={{ display: "flex", gap: 8 }}>
    10:         <button
    11:           onClick={onEdit}
    12:           style={{
    13:             padding: "6px 10px",
    14:             border: "1px solid #e3e6eb",
    15:             borderRadius: 6,
    16:             cursor: "pointer",
    17:           }}
    18:         >
    19:           Edit
    20:         </button>
    21:         <button
    22:           onClick={onDelete}
    23:           style={{
    24:             padding: "6px 10px",
    25:             border: "1px solid #e3e6eb",
    26:             borderRadius: 6,
    27:             cursor: "pointer",
    28:             background: "#fff0f0",
    29:           }}
    30:         >
    31:           Delete
    32:         </button>
    33:       </div>
    34:       {f.attributes?.notes && (
    35:         <div style={{ marginTop: 10, fontSize: 12 }}>
    36:           {String(f.attributes.notes)}
    37:         </div>
    38:       )}
    39:     </div>
    40:   );
    41: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\leafletDefaultIconPatch.js
SIZE: 595 bytes
================================================================================
     1: // src/components/map/leafletDefaultIconPatch.js
     2: // Vite/prod buildlarda Leaflet default marker rasmlarining yo'llarini to'g'ri o'rnatish
     3: import L from "leaflet";
     4: import marker2x from "leaflet/dist/images/marker-icon-2x.png";
     5: import marker from "leaflet/dist/images/marker-icon.png";
     6: 
     7: // _getIconUrl ni ishlatmaymiz — to'g'ridan-to'g'ri mergeOptions qilamiz
     8: delete L.Icon.Default.prototype._getIconUrl;
     9: 
    10: L.Icon.Default.mergeOptions({
    11:   iconRetinaUrl: marker2x,
    12:   iconUrl: marker,
    13:   // shadowUrl removed
    14: });
    15: 
    16: export default L; // ixtiyoriy: import qilganda tree-shake bo'lmasin


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\MapDraw.jsx
SIZE: 33298 bytes
================================================================================
     1: // src/components/map/MapDraw.jsx
     2: import { useRef, useState, useCallback, useMemo, useEffect } from "react";
     3: import { toast } from "react-toastify";
     4: import {
     5:   MapContainer,
     6:   TileLayer,
     7:   FeatureGroup,
     8:   Marker,
     9:   Popup,
    10:   useMap,
    11:   GeoJSON,
    12:   Pane,
    13: } from "react-leaflet";
    14: import { EditControl } from "react-leaflet-draw";
    15: import L from "leaflet";
    16: import Tree from "rc-tree";
    17: import "rc-tree/assets/index.css";
    18: 
    19: import { getLatestDrawing, saveDrawing } from "../../api/drawings";
    20: import { debugError } from "../../utils/debug";
    21: import {
    22:   fetchFacilities,
    23:   patchFacility,
    24:   deleteFacility,
    25:   createFacility,
    26: } from "../../api/facilities";
    27: import { typeColor, badgeIconFor } from "./mapIcons"; // removed unused iconFor
    28: 
    29: /** FlyTo: yon ta'sirlar useEffect ichida */
    30: function MapFlyer({ target } = {}) {
    31:   const map = useMap();
    32:   useEffect(() => {
    33:     if (!target || typeof target !== "object") return;
    34:     const { lat, lng, zoom = 13, ts } = target;
    35:     if (typeof lat !== "number" || typeof lng !== "number") return;
    36:     if (!ts) return; // ts trigger sifatida
    37:     const curZoom = map.getZoom();
    38:     const midZoom = Math.max(3, curZoom - 3);
    39:     map.flyTo(map.getCenter(), midZoom, {
    40:       duration: 0.6,
    41:       easeLinearity: 0.15,
    42:       animate: true,
    43:     });
    44:     const t = setTimeout(() => {
    45:       map.flyTo([lat, lng], zoom, {
    46:         duration: 1.2,
    47:         easeLinearity: 0.25,
    48:         animate: true,
    49:       });
    50:     }, 650);
    51:     return () => clearTimeout(t);
    52:   }, [map, target]);
    53:   return null;
    54: }
    55: 
    56: /** Viewport watcher: moveend da BBOX ("minLng,minLat,maxLng,maxLat") yangilanadi */
    57: function ViewportWatcher({ onBboxChange }) {
    58:   const map = useMap();
    59: 
    60:   useEffect(() => {
    61:     if (!map || typeof onBboxChange !== "function") return;
    62: 
    63:     const toBBox = (b) =>
    64:       `${b.getWest()},${b.getSouth()},${b.getEast()},${b.getNorth()}`;
    65:     const update = () => onBboxChange(toBBox(map.getBounds()));
    66: 
    67:     // Xarita tayyor bo‘lgach bir marta update qilamiz va keyin moveend ni tinglaymiz
    68:     map.whenReady(() => {
    69:       update();
    70:       map.on("moveend", update);
    71:     });
    72: 
    73:     return () => {
    74:       map.off("moveend", update);
    75:     };
    76:   }, [map, onBboxChange]);
    77: 
    78:   return null;
    79: }
    80: 
    81: /** GeoJSON geometry uchun centroid (Polygon/MultiPolygon/Point) */
    82: function centroidOfGeometry(geometry) {
    83:   if (!geometry || !geometry.type) return null;
    84:   if (geometry.type === "Point") {
    85:     const [lng, lat] = geometry.coordinates || [];
    86:     if (Number.isFinite(lat) && Number.isFinite(lng)) return { lat, lng };
    87:     return null;
    88:   }
    89:   if (geometry.type === "Polygon") {
    90:     return centroidOfPolygon(geometry.coordinates);
    91:   }
    92:   if (geometry.type === "MultiPolygon") {
    93:     // eng katta halqaning centroidini olamiz (1-chi poligon ham bo‘lishi mumkin)
    94:     let best = null;
    95:     let bestArea = -Infinity;
    96:     for (const poly of geometry.coordinates || []) {
    97:       const c = centroidOfPolygon(poly);
    98:       if (c && c.area > bestArea) {
    99:         bestArea = c.area;
   100:         best = { lat: c.lat, lng: c.lng };
   101:       }
   102:     }
   103:     return best;
   104:   }
   105:   return null;
   106: }
   107: function centroidOfPolygon(rings) {
   108:   // rings: [outerRing, [holes...]] — bizga outer yetadi
   109:   if (!rings || !rings[0] || rings[0].length < 3) return null;
   110:   const outer = rings[0]; // [[lng,lat], ...]
   111:   let area = 0,
   112:     cx = 0,
   113:     cy = 0;
   114:   for (let i = 0, j = outer.length - 1; i < outer.length; j = i++) {
   115:     const [x1, y1] = outer[j];
   116:     const [x2, y2] = outer[i];
   117:     const f = x1 * y2 - x2 * y1;
   118:     area += f;
   119:     cx += (x1 + x2) * f;
   120:     cy += (y1 + y2) * f;
   121:   }
   122:   if (area === 0) {
   123:     // degan holda bbox center (fallback)
   124:     let minX = Infinity,
   125:       minY = Infinity,
   126:       maxX = -Infinity,
   127:       maxY = -Infinity;
   128:     for (const [x, y] of outer) {
   129:       if (x < minX) minX = x;
   130:       if (y < minY) minY = y;
   131:       if (x > maxX) maxX = x;
   132:       if (y > maxY) maxY = y;
   133:     }
   134:     const lng = (minX + maxX) / 2;
   135:     const lat = (minY + maxY) / 2;
   136:     return { lat, lng, area: 0 };
   137:   }
   138:   area *= 0.5;
   139:   cx /= 6 * area;
   140:   cy /= 6 * area;
   141:   return { lat: cy, lng: cx, area: Math.abs(area) };
   142: }
   143: 
   144: export default function MapDraw({
   145:   center = [41.3111, 69.2797],
   146:   zoom = 12,
   147:   height = "calc(100vh - 100px)",
   148:   dark = false,
   149:   orgTree = [],
   150:   hideTree = false,
   151: }) {
   152:   const featureGroupRef = useRef(null);
   153: 
   154:   // Draw qatlami
   155:   const [geojson, setGeojson] = useState(null);
   156:   const updateGeoJSON = useCallback(() => {
   157:     const fg = featureGroupRef.current;
   158:     if (!fg) return;
   159:     setGeojson(fg.toGeoJSON());
   160:   }, []);
   161:   const onEdited = useCallback(updateGeoJSON, [updateGeoJSON]);
   162:   const onDeleted = useCallback(updateGeoJSON, [updateGeoJSON]);
   163: 
   164:   // Tree / nav
   165:   const [checkedKeys, setCheckedKeys] = useState([]);
   166:   const [selectedKeys, setSelectedKeys] = useState([]);
   167:   const [navTarget, setNavTarget] = useState(null);
   168: 
   169:   // Search (debounce)
   170:   const [searchInput, setSearchInput] = useState("");
   171:   const [query, setQuery] = useState("");
   172:   useEffect(() => {
   173:     const id = setTimeout(() => setQuery(searchInput.trim()), 300);
   174:     return () => clearTimeout(id);
   175:   }, [searchInput]);
   176:   const onClearSearch = () => setSearchInput("");
   177: 
   178:   // Viewport BBOX
   179:   const [bbox, setBbox] = useState(null);
   180: 
   181:   // Facilities
   182:   const [facilities, setFacilities] = useState([]);
   183:   const [typeFilter, setTypeFilter] = useState({
   184:     GREENHOUSE: true,
   185:     COWSHED: true,
   186:     STABLE: true,
   187:     FISHFARM: true,
   188:     WAREHOUSE: true,
   189:     ORCHARD: true,
   190:     FIELD: true,
   191:     POULTRY: true,
   192:     APIARY: true,
   193:   });
   194:   const enabledTypes = useMemo(
   195:     () =>
   196:       Object.entries(typeFilter)
   197:         .filter(([, v]) => v)
   198:         .map(([k]) => k),
   199:     [typeFilter]
   200:   );
   201:   const [reloadKey, setReloadKey] = useState(0);
   202: 
   203:   // Toggles
   204:   const [showPolys, setShowPolys] = useState(true);
   205:   // GeoJSON panellarini (readonly + import) vaqtincha yashirish uchun toggle
   206:   const [showGeoTools, setShowGeoTools] = useState(false);
   207: 
   208:   // Load latest drawing (ixtiyoriy)
   209:   useEffect(() => {
   210:     (async () => {
   211:       try {
   212:         if (!getLatestDrawing) return;
   213:         const latest = await getLatestDrawing();
   214:         if (!latest?.geojson) return;
   215:         const fg = featureGroupRef.current;
   216:         if (!fg) return;
   217:         fg.clearLayers();
   218:         L.geoJSON(latest.geojson).eachLayer((lyr) => fg.addLayer(lyr));
   219:         setGeojson(latest.geojson);
   220:       } catch (e) {
   221:         debugError("Load latest drawing failed:", e);
   222:       }
   223:     })();
   224:   }, []);
   225: 
   226:   // Flatten org tree
   227:   const flatNodes = useMemo(() => {
   228:     const out = [];
   229:     const walk = (arr) => {
   230:       arr.forEach((n) => {
   231:         out.push({ ...n, key: String(n.key) });
   232:         if (n.children) walk(n.children);
   233:       });
   234:     };
   235:     walk(orgTree);
   236:     return out;
   237:   }, [orgTree]);
   238: 
   239:   const highlight = (text, q) => {
   240:     if (!q) return text;
   241:     const i = text.toLowerCase().indexOf(q.toLowerCase());
   242:     if (i === -1) return text;
   243:     return (
   244:       <span>
   245:         {text.slice(0, i)}
   246:         <mark>{text.slice(i, i + q.length)}</mark>
   247:         {text.slice(i + q.length)}
   248:       </span>
   249:     );
   250:   };
   251: 
   252:   // Filtered tree for search
   253:   const [expandedKeys, setExpandedKeys] = useState(undefined);
   254:   const { filteredTree, visibleKeySet } = useMemo(() => {
   255:     const q = query.toLowerCase();
   256:     if (!q) return { filteredTree: orgTree, visibleKeySet: null };
   257:     const visible = new Set();
   258:     const prune = (nodes) => {
   259:       const res = [];
   260:       for (const n of nodes) {
   261:         const keyStr = String(n.key);
   262:         const titleStr = typeof n.title === "string" ? n.title : "";
   263:         const selfMatch = titleStr.toLowerCase().includes(q);
   264:         const childPruned = n.children ? prune(n.children) : null;
   265:         if (selfMatch || (childPruned && childPruned.length)) {
   266:           visible.add(keyStr);
   267:           res.push({
   268:             ...n,
   269:             children:
   270:               childPruned && childPruned.length ? childPruned : undefined,
   271:           });
   272:         }
   273:       }
   274:       return res;
   275:     };
   276:     return { filteredTree: prune(orgTree), visibleKeySet: visible };
   277:   }, [orgTree, query]);
   278:   useEffect(() => {
   279:     if (visibleKeySet) setExpandedKeys(Array.from(visibleKeySet));
   280:     else setExpandedKeys(undefined);
   281:   }, [visibleKeySet]);
   282: 
   283:   const rcData = useMemo(() => {
   284:     const mapNode = (n) => ({
   285:       key: String(n.key),
   286:       title: typeof n.title === "string" ? highlight(n.title, query) : n.title,
   287:       children: n.children ? n.children.map(mapNode) : undefined,
   288:     });
   289:     return (filteredTree || []).map(mapNode);
   290:   }, [filteredTree, query]);
   291: 
   292:   // Org markers
   293:   const visibleMarkers = useMemo(
   294:     () => flatNodes.filter((n) => n.pos && checkedKeys.includes(String(n.key))),
   295:     [flatNodes, checkedKeys]
   296:   );
   297: 
   298:   const selectedOrgId = useMemo(() => {
   299:     const k = selectedKeys?.[0];
   300:     if (!k) return null;
   301:     const n = flatNodes.find((x) => String(x.key) === String(k));
   302:     return n ? Number(n.key) : null;
   303:   }, [selectedKeys, flatNodes]);
   304: 
   305:   const onTreeCheck = (keys) => setCheckedKeys(keys.map(String));
   306:   const onTreeSelect = (keys) => {
   307:     setSelectedKeys(keys);
   308:     const k = keys?.[0] ? String(keys[0]) : null;
   309:     if (!k) return;
   310:     const n = flatNodes.find((x) => String(x.key) === k);
   311:     if (n?.pos && Array.isArray(n.pos)) {
   312:       setNavTarget({
   313:         lat: n.pos[0],
   314:         lng: n.pos[1],
   315:         zoom: Number.isFinite(n.zoom) ? n.zoom : 13,
   316:         ts: Date.now(),
   317:       });
   318:     }
   319:   };
   320:   const onTreeExpand = (keys) => setExpandedKeys(keys);
   321: 
   322:   // Facilities fetch (BBOX + types + org)
   323:   useEffect(() => {
   324:     let cancelled = false;
   325:     if (!bbox || !selectedOrgId || enabledTypes.length === 0) {
   326:       setFacilities([]);
   327:       return;
   328:     }
   329:     const t = setTimeout(async () => {
   330:       try {
   331:         const data = await fetchFacilities({
   332:           orgId: selectedOrgId,
   333:           types: enabledTypes,
   334:           bbox,
   335:         });
   336:         if (!cancelled) setFacilities(data);
   337:       } catch (e) {
   338:         if (!cancelled) debugError("fetchFacilities failed:", e);
   339:       }
   340:     }, 250);
   341:     return () => {
   342:       cancelled = true;
   343:       clearTimeout(t);
   344:     };
   345:   }, [bbox, selectedOrgId, enabledTypes, reloadKey]);
   346: 
   347:   // GeoJSON (polygons) for facilities
   348:   const geoJsonRef = useRef(null);
   349:   const facilitiesFC = useMemo(() => {
   350:     const features = facilities
   351:       .filter((f) => f.geometry && f.geometry.type)
   352:       .map((f) => ({
   353:         type: "Feature",
   354:         geometry: f.geometry,
   355:         properties: {
   356:           id: f.id,
   357:           name: f.name,
   358:           type: f.type,
   359:           status: f.status,
   360:           lat: f.lat,
   361:           lng: f.lng,
   362:           zoom: f.zoom,
   363:         },
   364:       }));
   365:     return { type: "FeatureCollection", features };
   366:   }, [facilities]);
   367: 
   368:   const polyStyle = useCallback((feature) => {
   369:     const t = feature?.properties?.type;
   370:     const col = typeColor(t);
   371:     return {
   372:       color: col,
   373:       weight: 2,
   374:       fillOpacity: 0.15,
   375:       fillColor: col,
   376:       dashArray: "3",
   377:     };
   378:   }, []);
   379: 
   380:   const onEachFacilityFeature = useCallback((feature, layer) => {
   381:     const props = feature?.properties || {};
   382:     const name = props.name || "Facility";
   383:     const type = props.type || "";
   384:     const status = props.status || "";
   385: 
   386:     // Popup
   387:     layer.bindPopup(`
   388:       <div style="min-width:200px">
   389:         <div style="font-weight:700">${name}</div>
   390:         <div style="font-size:12px;opacity:.8">${type} • ${status}</div>
   391:       </div>
   392:     `);
   393: 
   394:     // Hover highlight
   395:     layer.on("mouseover", () => {
   396:       layer.setStyle({ weight: 3, fillOpacity: 0.25 });
   397:       layer.bringToFront();
   398:     });
   399:     layer.on("mouseout", () => {
   400:       if (geoJsonRef.current) geoJsonRef.current.resetStyle(layer);
   401:     });
   402: 
   403:     // Click → flyTo
   404:     layer.on("click", () => {
   405:       let latlng;
   406:       if (layer.getBounds) latlng = layer.getBounds().getCenter();
   407:       else if (layer.getLatLng) latlng = layer.getLatLng();
   408:       if (latlng) {
   409:         setNavTarget({
   410:           lat: latlng.lat,
   411:           lng: latlng.lng,
   412:           zoom: props.zoom && Number.isFinite(props.zoom) ? props.zoom : 16,
   413:           ts: Date.now(),
   414:         });
   415:       }
   416:     });
   417:   }, []);
   418: 
   419:   // Centroid markers for polygons
   420:   const polygonCentroidMarkers = useMemo(() => {
   421:     return facilities
   422:       .filter(
   423:         (f) => f.geometry && f.geometry.type && f.geometry.type !== "Point"
   424:       )
   425:       .map((f) => {
   426:         const c =
   427:           centroidOfGeometry(f.geometry) ||
   428:           (Number.isFinite(f.lat) && Number.isFinite(f.lng)
   429:             ? { lat: f.lat, lng: f.lng }
   430:             : null);
   431:         if (!c) return null;
   432:         return (
   433:           <Marker
   434:             key={`fc-${f.id}`}
   435:             position={[c.lat, c.lng]}
   436:             icon={badgeIconFor(f.type, 28)}
   437:             pane="facilities-centroids"
   438:           >
   439:             <Popup>
   440:               <div style={{ minWidth: 220 }}>
   441:                 <div style={{ fontWeight: 700 }}>{f.name}</div>
   442:                 <div style={{ fontSize: 12, opacity: 0.8 }}>
   443:                   {f.type} • {f.status}
   444:                 </div>
   445:               </div>
   446:             </Popup>
   447:           </Marker>
   448:         );
   449:       })
   450:       .filter(Boolean);
   451:   }, [facilities]);
   452: 
   453:   // DRAW → create facility drawer
   454:   const [createOpen, setCreateOpen] = useState(false);
   455:   const [draftGeom, setDraftGeom] = useState(null);
   456:   const [draftCenter, setDraftCenter] = useState(null);
   457:   const [form, setForm] = useState({
   458:     orgId: null,
   459:     name: "",
   460:     type: "GREENHOUSE",
   461:     status: "ACTIVE",
   462:     zoom: 15,
   463:     attributes: { notes: "" },
   464:   });
   465:   useEffect(() => {
   466:     setForm((f) => ({ ...f, orgId: selectedOrgId || null }));
   467:   }, [selectedOrgId]);
   468: 
   469:   const onCreated = useCallback(
   470:     (e) => {
   471:       updateGeoJSON();
   472:       const layer = e.layer;
   473:       const type = e.layerType;
   474:       if (!["marker", "polygon", "rectangle"].includes(type)) return;
   475: 
   476:       const gj = layer.toGeoJSON();
   477:       const geometry = gj.geometry;
   478: 
   479:       let lat, lng;
   480:       if (type === "marker") {
   481:         const c = layer.getLatLng();
   482:         lat = c.lat;
   483:         lng = c.lng;
   484:       } else {
   485:         const c = layer.getBounds().getCenter();
   486:         lat = c.lat;
   487:         lng = c.lng;
   488:       }
   489: 
   490:       setDraftGeom(geometry);
   491:       setDraftCenter({ lat, lng });
   492:       setCreateOpen(true);
   493:     },
   494:     [updateGeoJSON]
   495:   );
   496: 
   497:   // GeoJSON import panel
   498:   const geojsonPretty = geojson ? JSON.stringify(geojson, null, 2) : "";
   499:   const importFromTextarea = () => {
   500:     const text = document.getElementById("gj-input")?.value;
   501:     try {
   502:       const parsed = JSON.parse(text);
   503:       const fg = featureGroupRef.current;
   504:       if (!fg) return;
   505:       fg.clearLayers();
   506:       L.geoJSON(parsed).eachLayer((lyr) => fg.addLayer(lyr));
   507:       setGeojson(parsed);
   508:     } catch {
   509:       toast.error("Noto‘g‘ri JSON!");
   510:     }
   511:   };
   512: 
   513:   return (
   514:     <div className="map-wrapper" style={{ position: "relative" }}>
   515:       <MapContainer
   516:         center={center}
   517:         zoom={zoom}
   518:         style={{ height, width: "100%" }}
   519:       >
   520:         <TileLayer
   521:           url={
   522:             dark
   523:               ? "https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png"
   524:               : "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
   525:           }
   526:           attribution="&copy; OSM &copy; Carto"
   527:         />
   528: 
   529:         {/* Panes for z-index priority */}
   530:         <Pane name="facilities-polys" style={{ zIndex: 410 }} />
   531:         <Pane name="facilities-centroids" style={{ zIndex: 420 }} />
   532:         <Pane name="facilities-markers" style={{ zIndex: 430 }} />
   533: 
   534:         <ViewportWatcher onBboxChange={setBbox} />
   535:         <MapFlyer target={navTarget} />
   536: 
   537:         {/* Org markers (checkbox'lar) */}
   538:         {visibleMarkers.map((n) => (
   539:           <Marker key={n.key} position={n.pos}>
   540:             <Popup>{n.title}</Popup>
   541:           </Marker>
   542:         ))}
   543: 
   544:         {/* Facilities — polygons */}
   545:         {showPolys && facilitiesFC.features.length > 0 && (
   546:           <GeoJSON
   547:             key={`${selectedOrgId}|${bbox}|${facilitiesFC.features.length}`} // ⬅️ qo‘shildi
   548:             data={facilitiesFC}
   549:             style={polyStyle}
   550:             onEachFeature={onEachFacilityFeature}
   551:             pane="facilities-polys"
   552:             ref={geoJsonRef}
   553:           />
   554:         )}
   555: 
   556:         {/* Poligon markazidagi badge iconlar */}
   557:         {showPolys && polygonCentroidMarkers}
   558: 
   559:         {/* Facilities — fallback point markers (faqat geometry yo‘q bo‘lsa) */}
   560:         {facilities.map((f) => {
   561:           const hasPoly = !!(
   562:             f.geometry &&
   563:             f.geometry.type &&
   564:             f.geometry.type !== "Point"
   565:           );
   566:           if (hasPoly) return null; // poligon bor — markaz badge bor, dublikat kerak emas
   567:           const lat = Number.isFinite(f.lat)
   568:             ? f.lat
   569:             : f.geometry?.type === "Point"
   570:             ? f.geometry.coordinates[1]
   571:             : null;
   572:           const lng = Number.isFinite(f.lng)
   573:             ? f.lng
   574:             : f.geometry?.type === "Point"
   575:             ? f.geometry.coordinates[0]
   576:             : null;
   577:           if (!Number.isFinite(lat) || !Number.isFinite(lng)) return null;
   578:           return (
   579:             <Marker
   580:               key={`f-${f.id}`}
   581:               position={[lat, lng]}
   582:               icon={badgeIconFor(f.type, 28)} // endi nuqta emas, badge qo‘yamiz
   583:               pane="facilities-markers"
   584:             >
   585:               <Popup>
   586:                 <div style={{ minWidth: 220 }}>
   587:                   <div style={{ fontWeight: 700 }}>{f.name}</div>
   588:                   <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 8 }}>
   589:                     {f.type} • {f.status}
   590:                   </div>
   591: 
   592:                   <div style={{ display: "flex", gap: 8 }}>
   593:                     <button
   594:                       onClick={async () => {
   595:                         const name = prompt("Yangi nom:", f.name);
   596:                         if (name == null) return;
   597:                         const status = prompt(
   598:                           "Status (ACTIVE/INACTIVE/UNDER_MAINTENANCE):",
   599:                           f.status
   600:                         );
   601:                         if (status == null) return;
   602:                         try {
   603:                           await patchFacility(f.id, { name, status });
   604:                           setReloadKey((k) => k + 1);
   605:                         } catch (e) {
   606:                           toast.error("Yangilashda xatolik");
   607:                           debugError(e);
   608:                         }
   609:                       }}
   610:                       style={{
   611:                         padding: "6px 10px",
   612:                         border: "1px solid #e3e6eb",
   613:                         borderRadius: 6,
   614:                         cursor: "pointer",
   615:                       }}
   616:                     >
   617:                       Edit
   618:                     </button>
   619: 
   620:                     <button
   621:                       onClick={async () => {
   622:                         if (!confirm(`O'chirilsinmi: ${f.name}?`)) return;
   623:                         try {
   624:                           await deleteFacility(f.id);
   625:                           setReloadKey((k) => k + 1);
   626:                         } catch (e) {
   627:                           toast.error("O'chirishda xatolik");
   628:                           debugError(e);
   629:                         }
   630:                       }}
   631:                       style={{
   632:                         padding: "6px 10px",
   633:                         border: "1px solid #e3e6eb",
   634:                         borderRadius: 6,
   635:                         cursor: "pointer",
   636:                         background: "#fff0f0",
   637:                       }}
   638:                     >
   639:                       Delete
   640:                     </button>
   641:                   </div>
   642:                 </div>
   643:               </Popup>
   644:             </Marker>
   645:           );
   646:         })}
   647: 
   648:         {/* Draw (chizish) */}
   649:         <FeatureGroup ref={featureGroupRef}>
   650:           <EditControl
   651:             position="topright"
   652:             onCreated={onCreated}
   653:             onEdited={onEdited}
   654:             onDeleted={onDeleted}
   655:             draw={{
   656:               polyline: false,
   657:               polygon: true,
   658:               rectangle: true,
   659:               circle: false,
   660:               circlemarker: false,
   661:               marker: true,
   662:             }}
   663:           />
   664:         </FeatureGroup>
   665:       </MapContainer>
   666: 
   667:       {/* Org tree — overlay (qidiruv + filter + polys toggle) */}
   668:       <div className={`org-tree-card ${hideTree ? "is-hidden" : ""}`}>
   669:         <div className="org-tree-card__header">
   670:           Tashkilot tuzilmasi
   671:           <div className="org-tree-search-wrap">
   672:             <input
   673:               className="org-tree-search"
   674:               type="text"
   675:               placeholder="Qidirish..."
   676:               value={searchInput}
   677:               onChange={(e) => setSearchInput(e.target.value)}
   678:               onKeyDown={(e) => {
   679:                 if (e.key === "Escape") onClearSearch();
   680:                 if (e.key === "Enter") setQuery(searchInput.trim());
   681:               }}
   682:             />
   683:             {searchInput && (
   684:               <button
   685:                 className="org-tree-search__clear"
   686:                 onClick={onClearSearch}
   687:                 aria-label="Qidiruvni tozalash"
   688:               >
   689:                 ×
   690:               </button>
   691:             )}
   692:           </div>
   693:         </div>
   694: 
   695:         <div className="org-tree-card__body">
   696:           {rcData.length ? (
   697:             <Tree
   698:               checkable
   699:               selectable
   700:               treeData={rcData}
   701:               checkedKeys={checkedKeys}
   702:               selectedKeys={selectedKeys}
   703:               expandedKeys={expandedKeys}
   704:               onExpand={onTreeExpand}
   705:               onCheck={onTreeCheck}
   706:               onSelect={onTreeSelect}
   707:               defaultExpandAll={!query}
   708:               autoExpandParent
   709:               virtual={false}
   710:             />
   711:           ) : (
   712:             <div style={{ fontSize: 13, color: "#888" }}>
   713:               Hech narsa topilmadi{query ? `: "${query}"` : ""}
   714:             </div>
   715:           )}
   716:         </div>
   717: 
   718:         <div className="org-tree-card__hint">
   719:           ✔ poligonlar turlarga ko‘ra ranglanadi · markazida ikon ko‘rinadi
   720:           {bbox && (
   721:             <div style={{ marginTop: 4, opacity: 0.8 }}>BBOX: {bbox}</div>
   722:           )}
   723:         </div>
   724: 
   725:         <div
   726:           className="org-tree-card__body"
   727:           style={{ borderTop: "1px solid var(--border,#e9ecf1)" }}
   728:         >
   729:           <div style={{ fontWeight: 700, marginBottom: 6 }}>Obyekt turlari</div>
   730:           <div
   731:             style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 6 }}
   732:           >
   733:             {Object.keys(typeFilter).map((k) => (
   734:               <label
   735:                 key={k}
   736:                 style={{ display: "flex", alignItems: "center", gap: 8 }}
   737:               >
   738:                 <input
   739:                   type="checkbox"
   740:                   checked={typeFilter[k]}
   741:                   onChange={(e) =>
   742:                     setTypeFilter((s) => ({ ...s, [k]: e.target.checked }))
   743:                   }
   744:                 />
   745:                 <span style={{ fontSize: 13 }}>{k}</span>
   746:               </label>
   747:             ))}
   748:           </div>
   749: 
   750:           <div
   751:             style={{
   752:               marginTop: 8,
   753:               display: "flex",
   754:               alignItems: "center",
   755:               gap: 8,
   756:             }}
   757:           >
   758:             <input
   759:               id="show-polys"
   760:               type="checkbox"
   761:               checked={showPolys}
   762:               onChange={(e) => setShowPolys(e.target.checked)}
   763:             />
   764:             <label htmlFor="show-polys" style={{ fontSize: 13 }}>
   765:               Show polygons
   766:             </label>
   767:           </div>
   768: 
   769:           <div style={{ marginTop: 6, fontSize: 12, opacity: 0.8 }}>
   770:             {selectedOrgId ? `Org #${selectedOrgId}` : "Org tanlang"} • Topildi:{" "}
   771:             {facilities.length}
   772:           </div>
   773:         </div>
   774:       </div>
   775: 
   776:       {/* Create Facility Drawer (chizilganda) — avvalgidek */}
   777:       {createOpen && (
   778:         <div className="facility-drawer">
   779:           <div className="facility-drawer__header">
   780:             Yangi obyekt yaratish
   781:             <button className="fd-close" onClick={() => setCreateOpen(false)}>
   782:               ×
   783:             </button>
   784:           </div>
   785: 
   786:           <div className="facility-drawer__body">
   787:             {!selectedOrgId && (
   788:               <div className="fd-alert">
   789:                 Avval tree’dan bo‘limni tanlang (org). Shunda obyekt shu
   790:                 bo‘limga biriktiriladi.
   791:               </div>
   792:             )}
   793: 
   794:             <div className="fd-field">
   795:               <label>Bo‘lim (Org ID)</label>
   796:               <input
   797:                 type="number"
   798:                 value={form.orgId || ""}
   799:                 onChange={(e) =>
   800:                   setForm({
   801:                     ...form,
   802:                     orgId: e.target.value ? Number(e.target.value) : null,
   803:                   })
   804:                 }
   805:                 placeholder="Masalan: 1"
   806:               />
   807:               <div className="fd-hint">
   808:                 Odatda tree tanlovi bilan avtomatik to‘ladi.
   809:               </div>
   810:             </div>
   811: 
   812:             <div className="fd-field">
   813:               <label>Nomi</label>
   814:               <input
   815:                 type="text"
   816:                 value={form.name}
   817:                 onChange={(e) => setForm({ ...form, name: e.target.value })}
   818:                 placeholder="Masalan: Tovuqxona A"
   819:               />
   820:             </div>
   821: 
   822:             <div className="fd-grid">
   823:               <div className="fd-field">
   824:                 <label>Turi</label>
   825:                 <select
   826:                   value={form.type}
   827:                   onChange={(e) => setForm({ ...form, type: e.target.value })}
   828:                 >
   829:                   {[
   830:                     "GREENHOUSE",
   831:                     "COWSHED",
   832:                     "STABLE",
   833:                     "FISHFARM",
   834:                     "WAREHOUSE",
   835:                     "ORCHARD",
   836:                     "FIELD",
   837:                     "POULTRY",
   838:                     "APIARY",
   839:                   ].map((t) => (
   840:                     <option key={t} value={t}>
   841:                       {t}
   842:                     </option>
   843:                   ))}
   844:                 </select>
   845:               </div>
   846: 
   847:               <div className="fd-field">
   848:                 <label>Status</label>
   849:                 <select
   850:                   value={form.status}
   851:                   onChange={(e) => setForm({ ...form, status: e.target.value })}
   852:                 >
   853:                   {["ACTIVE", "INACTIVE", "UNDER_MAINTENANCE"].map((s) => (
   854:                     <option key={s} value={s}>
   855:                       {s}
   856:                     </option>
   857:                   ))}
   858:                 </select>
   859:               </div>
   860: 
   861:               <div className="fd-field">
   862:                 <label>Zoom</label>
   863:                 <input
   864:                   type="number"
   865:                   min="3"
   866:                   max="19"
   867:                   value={form.zoom ?? ""}
   868:                   onChange={(e) =>
   869:                     setForm({
   870:                       ...form,
   871:                       zoom: e.target.value ? Number(e.target.value) : null,
   872:                     })
   873:                   }
   874:                 />
   875:               </div>
   876:             </div>
   877: 
   878:             <div className="fd-field">
   879:               <label>Izoh (attributes.notes)</label>
   880:               <textarea
   881:                 rows={3}
   882:                 value={form.attributes?.notes ?? ""}
   883:                 onChange={(e) =>
   884:                   setForm({
   885:                     ...form,
   886:                     attributes: {
   887:                       ...(form.attributes || {}),
   888:                       notes: e.target.value,
   889:                     },
   890:                   })
   891:                 }
   892:                 placeholder="Qo‘shimcha izoh..."
   893:               />
   894:             </div>
   895: 
   896:             <div className="fd-geom">
   897:               <div>
   898:                 <b>Geometriya:</b> {draftGeom?.type}
   899:               </div>
   900:               {draftCenter && (
   901:                 <div className="fd-hint">
   902:                   Markaz: {draftCenter.lat.toFixed(6)},{" "}
   903:                   {draftCenter.lng.toFixed(6)}
   904:                 </div>
   905:               )}
   906:             </div>
   907:           </div>
   908: 
   909:           <div className="facility-drawer__footer">
   910:             <button
   911:               className="fd-secondary"
   912:               onClick={() => setCreateOpen(false)}
   913:             >
   914:               Bekor qilish
   915:             </button>
   916:             <button
   917:               className="fd-primary"
   918:               onClick={async () => {
   919:                 try {
   920:                   if (!form.orgId) {
   921:                     toast.warn("Org ID tanlang yoki kiriting.");
   922:                     return;
   923:                   }
   924:                   if (!form.name.trim()) {
   925:                     toast.warn("Nomi kerak.");
   926:                     return;
   927:                   }
   928:                   if (!draftGeom) {
   929:                     toast.warn("Geometriya yo‘q (polygon/marker chizing).");
   930:                     return;
   931:                   }
   932: 
   933:                   const payload = {
   934:                     orgId: form.orgId,
   935:                     name: form.name.trim(),
   936:                     type: form.type,
   937:                     status: form.status,
   938:                     lat: draftCenter?.lat ?? null,
   939:                     lng: draftCenter?.lng ?? null,
   940:                     zoom: form.zoom ?? null,
   941:                     attributes: form.attributes || null,
   942:                     geometry: draftGeom,
   943:                   };
   944: 
   945:                   await createFacility(payload);
   946:                   setCreateOpen(false);
   947:                   setDraftGeom(null);
   948:                   setDraftCenter(null);
   949:                   setForm((f) => ({
   950:                     ...f,
   951:                     name: "",
   952:                     attributes: { notes: "" },
   953:                   }));
   954: 
   955:                   const fg = featureGroupRef.current;
   956:                   if (fg) fg.clearLayers();
   957:                   setReloadKey((k) => k + 1);
   958:                   toast.success("Obyekt saqlandi!");
   959:                 } catch (e) {
   960:                   debugError(e);
   961:                   toast.error("Saqlashda xatolik.");
   962:                 }
   963:               }}
   964:             >
   965:               Saqlash
   966:             </button>
   967:           </div>
   968:         </div>
   969:       )}
   970: 
   971:       {/* GeoJSON panel toggle button (pastki chap burchak) */}
   972:       <button
   973:         type="button"
   974:         onClick={() => setShowGeoTools((s) => !s)}
   975:         style={{
   976:           position: "absolute",
   977:           left: 8,
   978:           bottom: showGeoTools ? 230 : 8,
   979:           zIndex: 1000,
   980:           background: "var(--db-card,#fff)",
   981:           border: "1px solid var(--db-border,#d9dde5)",
   982:           padding: "6px 10px",
   983:           borderRadius: 6,
   984:           fontSize: 12,
   985:           cursor: "pointer",
   986:           boxShadow: "0 2px 4px -1px rgba(0,0,0,.08)",
   987:         }}
   988:         title="GeoJSON vositalarini ko'rsat/yashirish"
   989:       >
   990:         {showGeoTools ? "✕ GeoJSON" : "GeoJSON tools"}
   991:       </button>
   992: 
   993:       {/* Pastki panel: GeoJSON import/export + save backend (default: hidden) */}
   994:       {showGeoTools && (
   995:         <div className="panel">
   996:           <div className="panel-col">
   997:             <h4>GeoJSON (readonly)</h4>
   998:             <textarea readOnly value={geojsonPretty} />
   999:           </div>
  1000:           <div className="panel-col">
  1001:             <h4>GeoJSON import</h4>
  1002:             <textarea
  1003:               id="gj-input"
  1004:               placeholder='{"type":"FeatureCollection","features":[...]}'
  1005:             />
  1006:             <div className="panel-actions">
  1007:               <button onClick={importFromTextarea}>Import</button>
  1008:               <a
  1009:                 href={
  1010:                   "data:application/json;charset=utf-8," +
  1011:                   encodeURIComponent(geojsonPretty || "{}")
  1012:                 }
  1013:                 download="drawings.geojson"
  1014:               >
  1015:                 <button disabled={!geojsonPretty}>Download .geojson</button>
  1016:               </a>
  1017:               <button
  1018:                 onClick={async () => {
  1019:                   try {
  1020:                     if (!saveDrawing)
  1021:                       return toast.error("Backend API ulanishi topilmadi.");
  1022:                     const data = geojson || {};
  1023:                     await saveDrawing(data, "map-drawings");
  1024:                     toast.success("Saqlash muvaffaqiyatli!");
  1025:                   } catch (e) {
  1026:                     debugError(e);
  1027:                     toast.error("Saqlashda xatolik");
  1028:                   }
  1029:                 }}
  1030:                 disabled={!geojson}
  1031:               >
  1032:                 Save to backend
  1033:               </button>
  1034:             </div>
  1035:           </div>
  1036:         </div>
  1037:       )}
  1038:     </div>
  1039:   );
  1040: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\MapFlyer.jsx
SIZE: 739 bytes
================================================================================
     1: // src/components/map/MapFlyer.jsx
     2: import { useEffect } from "react";
     3: import { useMap } from "react-leaflet";
     4: 
     5: export default function MapFlyer({ target } = {}) {
     6:   const map = useMap();
     7:   useEffect(() => {
     8:     if (!target || typeof target !== "object") return;
     9:     const { lat, lng, zoom = 13 } = target;
    10:     if (typeof lat !== "number" || typeof lng !== "number") return;
    11: 
    12:     const curZoom = map.getZoom();
    13:     const midZoom = Math.max(3, curZoom - 3);
    14:     map.flyTo(map.getCenter(), midZoom, { duration: 0.6, animate: true });
    15:     const t = setTimeout(() => {
    16:       map.flyTo([lat, lng], zoom, { duration: 1.2, animate: true });
    17:     }, 650);
    18:     return () => clearTimeout(t);
    19:   }, [map, target]);
    20:   return null;
    21: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\mapIcons.js
SIZE: 1857 bytes
================================================================================
     1: // src/components/map/mapIcons.js
     2: import L from "leaflet";
     3: 
     4: export const colorMap = {
     5:   GREENHOUSE: "#16a34a",
     6:   POULTRY_MEAT: "#dc2626",
     7:   POULTRY_EGG: "#f59e0b",
     8:   TURKEY: "#ea580c",
     9:   COWSHED: "#a16207",
    10:   SHEEPFOLD: "#7c3aed",
    11:   WORKSHOP_SAUSAGE: "#525252",
    12:   WORKSHOP_COOKIE: "#9ca3af",
    13:   AUX_LAND: "#84cc16",
    14:   BORDER_LAND: "#0ea5e9",
    15:   FISHPOND: "#2563eb",
    16: };
    17: 
    18: export const emojiMap = {
    19:   GREENHOUSE: "🌿",
    20:   POULTRY_MEAT: "🍗",
    21:   POULTRY_EGG: "🥚",
    22:   TURKEY: "🦃",
    23:   COWSHED: "🐄",
    24:   SHEEPFOLD: "🐑",
    25:   WORKSHOP_SAUSAGE: "🏭",
    26:   WORKSHOP_COOKIE: "🍪",
    27:   AUX_LAND: "🟩",
    28:   BORDER_LAND: "🟦",
    29:   FISHPOND: "🐟",
    30: };
    31: 
    32: export const typeColor = (t = "GREENHOUSE") => colorMap[t] || "#3b82f6";
    33: 
    34: export const iconFor = (type = "GREENHOUSE") =>
    35:   L.divIcon({
    36:     className: "facility-pin",
    37:     html: `<span style="display:inline-block;width:12px;height:12px;border-radius:50%;
    38:       background:${typeColor(
    39:         type
    40:       )};border:2px solid #fff;box-shadow:0 0 0 1px rgba(0,0,0,.25);"></span>`,
    41:     iconSize: [12, 12],
    42:     iconAnchor: [6, 6],
    43:   });
    44: 
    45: export const badgeIconFor = (type = "GREENHOUSE", size = 28) => {
    46:   const col = typeColor(type);
    47:   const emoji = emojiMap[type] || "📍";
    48:   const pad = Math.round(size * 0.18);
    49:   const fz = Math.round(size * 0.64);
    50:   return L.divIcon({
    51:     className: "facility-badge",
    52:     html: `<div style="display:inline-flex;align-items:center;justify-content:center;
    53:       width:${size}px;height:${size}px;border-radius:50%;background:${col};color:#fff;border:2px solid #fff;
    54:       box-shadow:0 2px 8px rgba(0,0,0,.25);font-size:${fz}px;line-height:1;user-select:none;">
    55:       <span style="transform:translateY(-1px);padding:${pad}px">${emoji}</span></div>`,
    56:     iconSize: [size, size],
    57:     iconAnchor: [size / 2, size / 2],
    58:   });
    59: };


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\MapPickerModal.jsx
SIZE: 6401 bytes
================================================================================
     1: import { useEffect, useMemo, useRef, useState } from "react";
     2: import { toast } from "react-toastify";
     3: import { debugWarn } from "../../utils/debug";
     4: import { MapContainer, Marker, useMapEvents } from "react-leaflet";
     5: import Modal from "../ui/Modal";
     6: import MapTiles from "./MapTiles";
     7: 
     8: const DEFAULT_CENTER = [41.311081, 69.240562];
     9: const DEFAULT_ZOOM = 12;
    10: 
    11: function ClickCapture({ onPick }) {
    12:   useMapEvents({
    13:     click(e) {
    14:       onPick([e.latlng.lat, e.latlng.lng]);
    15:     },
    16:   });
    17:   return null;
    18: }
    19: 
    20: /**
    21:  * Props:
    22:  *  open, onClose, onSave, value?, title?, dark? = "auto", size? = "xl", tms? = true
    23:  */
    24: export default function MapPickerModal({
    25:   open,
    26:   onClose,
    27:   onSave,
    28:   value,
    29:   title = "Joylashuvni tanlang",
    30:   dark = "auto", // ⬅️ default: auto
    31:   size = "xl",
    32:   tms = true,
    33: }) {
    34:   const [map, setMap] = useState(null);
    35:   const [pos, setPos] = useState(null);
    36:   // Local text inputs for manual entry to avoid jitter during typing
    37:   const [latText, setLatText] = useState("");
    38:   const [lngText, setLngText] = useState("");
    39:   const initialZoom = value?.zoom ?? DEFAULT_ZOOM;
    40: 
    41:   const saveBtnRef = useRef(null);
    42: 
    43:   useEffect(() => {
    44:     if (open) {
    45:       setPos(
    46:         value?.lat != null && value?.lng != null ? [value.lat, value.lng] : null
    47:       );
    48:     }
    49:   }, [open, value?.lat, value?.lng]);
    50: 
    51:   // Sync text inputs when pos changes externally (map click, initial open)
    52:   useEffect(() => {
    53:     if (pos) {
    54:       setLatText(pos[0].toFixed(6));
    55:       setLngText(pos[1].toFixed(6));
    56:     } else if (open) {
    57:       setLatText("");
    58:       setLngText("");
    59:     }
    60:   }, [pos, open]);
    61: 
    62:   const center = useMemo(() => {
    63:     if (pos) return pos;
    64:     if (value?.lat != null && value?.lng != null) return [value.lat, value.lng];
    65:     return DEFAULT_CENTER;
    66:   }, [pos, value?.lat, value?.lng]);
    67: 
    68:   const handleSave = () => {
    69:     if (!pos) return;
    70:     const zoom = map ? map.getZoom() : value?.zoom ?? DEFAULT_ZOOM;
    71:     onSave({
    72:       lat: Number(pos[0].toFixed(6)),
    73:       lng: Number(pos[1].toFixed(6)),
    74:       zoom,
    75:     });
    76:     onClose?.();
    77:   };
    78: 
    79:   const locateMe = () => {
    80:     if (!map || !navigator.geolocation) return;
    81:     navigator.geolocation.getCurrentPosition(
    82:       (res) => {
    83:         const p = [res.coords.latitude, res.coords.longitude];
    84:         setPos(p);
    85:         map.flyTo(p, 16, { duration: 0.8 });
    86:       },
    87:       (err) => {
    88:         debugWarn("Geolocation error", err);
    89:         toast.error("Geolokatsiya ruxsati berilmadi yoki xatolik yuz berdi.");
    90:       },
    91:       { enableHighAccuracy: true, timeout: 10000 }
    92:     );
    93:   };
    94: 
    95:   return (
    96:     <Modal
    97:       open={open}
    98:       onClose={onClose}
    99:       title={title}
   100:       size={size}
   101:       width={size === "full" ? "min(96vw,1200px)" : undefined}
   102:       dark={dark} // ⬅️ modal ham auto’ga bo‘ysunadi
   103:       initialFocusRef={saveBtnRef}
   104:       zIndex={5000}
   105:     >
   106:       <div className="map-picker">
   107:         <div className="controls">
   108:           <div className="selected-pos">
   109:             Tanlangan:&nbsp;
   110:             <b>{pos ? `${pos[0].toFixed(6)}, ${pos[1].toFixed(6)}` : "—"}</b>
   111:           </div>
   112:           <div className="coord-row">
   113:             <label className="coord-field">
   114:               <span className="coord-label">Lat</span>
   115:               <input
   116:                 type="number"
   117:                 step="0.000001"
   118:                 value={latText}
   119:                 onChange={(e) => {
   120:                   const v = e.target.value;
   121:                   setLatText(v);
   122:                   const num = Number(v);
   123:                   const lngNum = Number(lngText);
   124:                   if (
   125:                     !isNaN(num) &&
   126:                     num >= -90 &&
   127:                     num <= 90 &&
   128:                     !isNaN(lngNum) &&
   129:                     lngNum >= -180 &&
   130:                     lngNum <= 180
   131:                   ) {
   132:                     setPos([num, lngNum]);
   133:                     if (map)
   134:                       map.flyTo([num, lngNum], map.getZoom(), {
   135:                         duration: 0.4,
   136:                       });
   137:                   }
   138:                 }}
   139:                 placeholder="lat"
   140:               />
   141:             </label>
   142:             <label className="coord-field">
   143:               <span className="coord-label">Lng</span>
   144:               <input
   145:                 type="number"
   146:                 step="0.000001"
   147:                 value={lngText}
   148:                 onChange={(e) => {
   149:                   const v = e.target.value;
   150:                   setLngText(v);
   151:                   const num = Number(v);
   152:                   const latNum = Number(latText);
   153:                   if (
   154:                     !isNaN(num) &&
   155:                     num >= -180 &&
   156:                     num <= 180 &&
   157:                     !isNaN(latNum) &&
   158:                     latNum >= -90 &&
   159:                     latNum <= 90
   160:                   ) {
   161:                     setPos([latNum, num]);
   162:                     if (map)
   163:                       map.flyTo([latNum, num], map.getZoom(), {
   164:                         duration: 0.4,
   165:                       });
   166:                   }
   167:                 }}
   168:                 placeholder="lng"
   169:               />
   170:             </label>
   171:             <button className="btn locate-btn" onClick={locateMe}>
   172:               Mening joylashuvim
   173:             </button>
   174:           </div>
   175:         </div>
   176: 
   177:         <div
   178:           className="map-holder"
   179:           style={{ height: "60vh", borderRadius: 12, overflow: "hidden" }}
   180:         >
   181:           {open && (
   182:             <MapContainer
   183:               key={`${String(dark)}-${tms ? "tms" : "xyz"}`}
   184:               center={center}
   185:               zoom={initialZoom}
   186:               whenCreated={setMap}
   187:               style={{ height: "100%", width: "100%" }}
   188:             >
   189:               <MapTiles tms={tms} />
   190:               <ClickCapture onPick={setPos} />
   191:               {pos && <Marker position={pos} />}
   192:             </MapContainer>
   193:           )}
   194:         </div>
   195: 
   196:         <div className="modal-actions">
   197:           <button className="btn" onClick={onClose}>
   198:             Bekor
   199:           </button>
   200:           <button
   201:             ref={saveBtnRef}
   202:             className="btn primary"
   203:             disabled={!pos}
   204:             onClick={handleSave}
   205:           >
   206:             Tanlash
   207:           </button>
   208:         </div>
   209:       </div>
   210:     </Modal>
   211:   );
   212: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\MapTiles.jsx
SIZE: 3046 bytes
================================================================================
     1: // src/components/map/MapTiles.jsx
     2: import { createLayerComponent } from "@react-leaflet/core";
     3: import L from "leaflet";
     4: import React from "react";
     5: import { TileLayer } from "react-leaflet";
     6: 
     7: /**
     8:  * OFFLINE XYZ yoki TMS tiles (z/x/y.{ext}) uchun oddiy qatlam.
     9:  *
    10:  * ENV:
    11:  * - VITE_TILE_URL
    12:  * - VITE_TILE_MIN_ZOOM
    13:  * - VITE_TILE_MAX_ZOOM
    14:  * - VITE_TILE_TMS
    15:  * - VITE_TILE_ATTRIBUTION
    16:  */
    17: 
    18: const envBool = (v, def = false) => {
    19:   if (v === undefined || v === null) return def;
    20:   const s = String(v).trim().toLowerCase();
    21:   return s === "1" || s === "true" || s === "yes";
    22: };
    23: 
    24: const DEFAULT_URL =
    25:   import.meta.env.VITE_TILE_URL || "http://localhost:8008/{z}/{x}/{y}.jpg";
    26: 
    27: const DEFAULT_MIN_ZOOM = Number(
    28:   import.meta.env.VITE_TILE_MIN_ZOOM ?? /* default */ 0
    29: );
    30: 
    31: const DEFAULT_MAX_ZOOM = Number(
    32:   import.meta.env.VITE_TILE_MAX_ZOOM ?? /* default */ 19
    33: );
    34: 
    35: const DEFAULT_TMS = envBool(import.meta.env.VITE_TILE_TMS, /* default */ false);
    36: 
    37: const DEFAULT_ATTR =
    38:   import.meta.env.VITE_TILE_ATTRIBUTION ?? "&copy; Offline Tiles";
    39: 
    40: export default function MapTiles(props) {
    41:   const {
    42:     url = DEFAULT_URL,
    43:     minZoom = DEFAULT_MIN_ZOOM,
    44:     maxZoom = DEFAULT_MAX_ZOOM,
    45:     tms = DEFAULT_TMS,
    46:     attribution = DEFAULT_ATTR,
    47:     ...rest
    48:   } = props;
    49: 
    50:   return (
    51:     <TileLayer
    52:       url={url}
    53:       minZoom={minZoom}
    54:       maxZoom={maxZoom}
    55:       tms={tms}
    56:       attribution={attribution}
    57:       {...rest}
    58:     />
    59:   );
    60: }
    61: 
    62: // ======== SAS PLANET DEFAULT STORE (foldered) ========
    63: // Path format: /z{z}/{floor(x/1024)}/x{x}/{floor(y/1024)}/y{y}.{ext}
    64: // Misol: z13/2/x2678/1/y1493.jpg
    65: const SasPlanetTileLayer = L.TileLayer.extend({
    66:   initialize: function (baseUrl, options = {}) {
    67:     L.TileLayer.prototype.initialize.call(this, baseUrl, options);
    68:     this.options.ext = options.ext || "jpg";
    69:   },
    70:   getTileUrl: function (coords) {
    71:     const z = coords.z;
    72:     let { x, y } = coords;
    73: 
    74:     // TMS bo'lsa Y ni ag'daramiz
    75:     if (this.options.tms) {
    76:       const n = Math.pow(2, z);
    77:       y = n - y - 1;
    78:     }
    79: 
    80:     const xFolder = Math.floor(x / 1024);
    81:     const yFolder = Math.floor(y / 1024);
    82:     const ext = this.options.ext || "jpg";
    83:     const base = this._url.endsWith("/") ? this._url.slice(0, -1) : this._url;
    84: 
    85:     return `${base}/z${z + 1}/${xFolder}/x${x}/${yFolder}/y${y}.${ext}`;
    86:   },
    87: });
    88: 
    89: const createSasPlanet = (props, context) => {
    90:   const { url, ...opts } = props;
    91:   const instance = new SasPlanetTileLayer(url, opts);
    92:   return { instance, context };
    93: };
    94: 
    95: /**
    96:  * React-Leaflet komponenti:
    97:  * <SasPlanetTiles url="http://10.25.1.90/vesat" ext="jpg" tms={false} />
    98:  */
    99: export const SasPlanetTiles = createLayerComponent(createSasPlanet);
   100: 
   101: // Default konfiguratsiyalarni tashqarida ishlatish uchun eksport
   102: // eslint-disable-next-line react-refresh/only-export-components
   103: export const OFFLINE_DEFAULTS = {
   104:   url: DEFAULT_URL,
   105:   minZoom: DEFAULT_MIN_ZOOM,
   106:   maxZoom: DEFAULT_MAX_ZOOM,
   107:   tms: DEFAULT_TMS,
   108:   attribution: DEFAULT_ATTR,
   109: };


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\MapView.jsx
SIZE: 37874 bytes
================================================================================
     1: // src/components/map/MapView.jsx
     2: import L from "leaflet";
     3: import React, {
     4:   Suspense,
     5:   lazy,
     6:   useCallback,
     7:   useEffect,
     8:   useMemo,
     9:   useRef,
    10:   useState,
    11: } from "react";
    12: import {
    13:   FeatureGroup,
    14:   GeoJSON,
    15:   LayerGroup,
    16:   LayersControl,
    17:   MapContainer,
    18:   Pane,
    19:   useMap,
    20: } from "react-leaflet";
    21: import { toast } from "react-toastify";
    22: import useDebouncedValue from "../../hooks/useDebouncedValue";
    23: import { debugError } from "../../utils/debug";
    24: const EditControlLazy = lazy(() =>
    25:   import("react-leaflet-draw").then((m) => ({ default: m.EditControl }))
    26: );
    27: 
    28: import "../../styles/leaflet-theme.css";
    29: import MapTiles, { SasPlanetTiles } from "./MapTiles";
    30: 
    31: import * as drawingsApi from "../../api/drawings";
    32: import { listFacilities, patchFacility } from "../../api/facilities";
    33: import { locateOrg } from "../../api/org";
    34: import { centroidOfGeometry } from "../../utils/geo";
    35: import OrgMarker from "./OrgMarker";
    36: 
    37: import CodeJumpBox from "./CodeJumpBox";
    38: import CreateFacilityDrawer from "./CreateFacilityDrawer";
    39: import FacilityEditModal from "./FacilityEditModal";
    40: import FacilityGalleryPanel from "./FacilityGalleryPanel";
    41: import FacilityGeoLayer from "./FacilityGeoLayer";
    42: import FacilityMarkers from "./FacilityMarkers";
    43: import MapFlyer from "./MapFlyer";
    44: import OrgTreePanel from "./OrgTreePanel";
    45: import ViewportWatcher from "./ViewportWatcher";
    46: import ZoomIndicator from "./ZoomIndicator";
    47: 
    48: // ✅ GeoJSON’ni bundlega qo‘shamiz (fetch O‘RNIGA import)
    49: import uzBorders from "../../assets/uz_lines.json";
    50: 
    51: /* 🔧 DARK MODE PATCH */
    52: const darkDrawerCss = `
    53: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over) {
    54:   color: #e6eef9 !important;
    55:   background: transparent;
    56: }
    57: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over)
    58:   :where(h1,h2,h3,h4,h5,h6,p,span,div,li,label,strong,em,small) {
    59:   color: #e6eef9 !important;
    60: }
    61: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over)
    62:   :where(.muted,.help,.description,.subtle) {
    63:   color: #94a3b8 !important;
    64: }
    65: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over)
    66:   :where(input,select,textarea) {
    67:   background: #0b1220 !important;
    68:   color: #e6eef9 !important;
    69:   border: 1px solid #223046 !important;
    70: }
    71: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over)
    72:   :where(input::placeholder, textarea::placeholder) {
    73:   color: #94a3b8 !important;
    74: }
    75: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over)
    76:   :where(button,.btn) {
    77:   background: #111827 !important;
    78:   color: #e6eef9 !important;
    79:   border-color: #374151 !important;
    80: }
    81: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over) a {
    82:   color: #93c5fd !important;
    83: }
    84: html.dark :where([class*="drawer"], [class*="Drawer"], .drawer, .drawer-card, .sheet, .slide-over)
    85:   :where(.card,.panel,.modal-card,.drawer-card,.sheet) {
    86:   background: #0f172a !important;
    87:   border-color: #223046 !important;
    88: }
    89: `;
    90: 
    91: /** Leaflet control: T panel toggle */
    92: function MapControls({ panelHidden, onTogglePanel }) {
    93:   const map = useMap();
    94:   useEffect(() => {
    95:     const PanelCtrl = L.Control.extend({
    96:       options: { position: "topright" },
    97:       onAdd() {
    98:         const container = L.DomUtil.create(
    99:           "div",
   100:           "leaflet-bar leaflet-control org-toggle-control"
   101:         );
   102:         const a = L.DomUtil.create("a", "", container);
   103:         a.href = "#";
   104:         a.title = "Tashkilot panelini ko‘rsatish/yashirish (T)";
   105:         a.setAttribute("aria-label", a.title);
   106:         a.innerHTML = panelHidden ? "▤" : "×";
   107:         Object.assign(a.style, {
   108:           width: "34px",
   109:           height: "34px",
   110:           lineHeight: "34px",
   111:           textAlign: "center",
   112:           fontWeight: "700",
   113:           userSelect: "none",
   114:         });
   115:         L.DomEvent.disableClickPropagation(container);
   116:         L.DomEvent.on(a, "click", (e) => {
   117:           L.DomEvent.preventDefault(e);
   118:           onTogglePanel?.();
   119:         });
   120:         return container;
   121:       },
   122:     });
   123:     const panelCtrl = new PanelCtrl();
   124:     map.addControl(panelCtrl);
   125:     return () => map.removeControl(panelCtrl);
   126:   }, [map, panelHidden, onTogglePanel]);
   127:   return null;
   128: }
   129: 
   130: function StripLeafletAttribution() {
   131:   const map = useMap();
   132:   useEffect(() => {
   133:     if (map?.attributionControl?.setPrefix) {
   134:       map.attributionControl.setPrefix("");
   135:     }
   136:   }, [map]);
   137:   return null;
   138: }
   139: 
   140: /* -------- util -------- */
   141: function parseBBox(bboxStr) {
   142:   const [w, s, e, n] = String(bboxStr || "")
   143:     .split(",")
   144:     .map((x) => Number(x));
   145:   return { w, s, e, n };
   146: }
   147: function bufferBBoxStr(bboxStr, ratio = 0.2) {
   148:   const { w, s, e, n } = parseBBox(bboxStr);
   149:   if (![w, s, e, n].every(Number.isFinite)) return bboxStr;
   150:   const dw = (e - w) * ratio,
   151:     dh = (n - s) * ratio;
   152:   return [w - dw, s - dh, e + dw, n + dh].join(",");
   153: }
   154: function envBool(v, def = false) {
   155:   if (v === undefined || v === null) return def;
   156:   const s = String(v).trim().toLowerCase();
   157:   return s === "1" || s === "true" || s === "yes";
   158: }
   159: 
   160: /** Overlay yoqish/o‘chirish hodisasi */
   161: function LayersToggle({ onEnable, onDisable }) {
   162:   const ref = useRef(null);
   163:   useEffect(() => {
   164:     const layer = ref.current;
   165:     if (!layer) return;
   166:     const handleAdd = () => onEnable?.();
   167:     const handleRemove = () => onDisable?.();
   168:     layer.on("add", handleAdd);
   169:     layer.on("remove", handleRemove);
   170:     return () => {
   171:       layer.off("add", handleAdd);
   172:       layer.off("remove", handleRemove);
   173:     };
   174:   }, [onEnable, onDisable]);
   175:   return <LayerGroup ref={ref} />;
   176: }
   177: 
   178: /** Intro flight */
   179: function IntroFlight({ enabled, delayMs, target }) {
   180:   const map = useMap();
   181:   const didRunRef = useRef(false);
   182:   const isValid = (t) =>
   183:     t &&
   184:     Number.isFinite(t.lat) &&
   185:     Number.isFinite(t.lng) &&
   186:     Number.isFinite(t.zoom);
   187:   useEffect(() => {
   188:     if (!enabled || didRunRef.current) return;
   189:     if (!isValid(target)) return;
   190:     const tid = setTimeout(() => {
   191:       map.whenReady(() => {
   192:         try {
   193:           map.flyTo([target.lat, target.lng], target.zoom, {
   194:             animate: true,
   195:             duration: 2.2,
   196:             easeLinearity: 0.2,
   197:             noMoveStart: false,
   198:           });
   199:         } catch {
   200:           map.setView([target.lat, target.lng], target.zoom);
   201:         } finally {
   202:           didRunRef.current = true;
   203:         }
   204:       });
   205:     }, Math.max(0, Number(delayMs) || 0));
   206:     return () => clearTimeout(tid);
   207:   }, [enabled, delayMs, target, map]);
   208:   return null;
   209: }
   210: 
   211: export default function MapView({
   212:   center = [41.3111, 69.2797],
   213:   zoom = 12,
   214:   minZoom = 1,
   215:   maxZoom = 20,
   216:   height = "calc(100vh - 100px)",
   217:   dark = false,
   218:   orgTree = [],
   219:   hideTree = false,
   220:   introEnabled = true,
   221:   introDelayMs = 700,
   222:   userRole = "user",
   223:   homeTarget = null,
   224: }) {
   225:   const featureGroupRef = useRef(null);
   226:   const lastDrawnLayerRef = useRef(null);
   227: 
   228:   // Draw state
   229:   const [geojson, setGeojson] = useState(null);
   230:   const updateGeoJSON = useCallback(() => {
   231:     const fg = featureGroupRef.current;
   232:     if (!fg) return;
   233:     setGeojson(fg.toGeoJSON());
   234:   }, []);
   235:   const onEdited = useCallback(updateGeoJSON, [updateGeoJSON]);
   236:   const onDeleted = useCallback(updateGeoJSON, [updateGeoJSON]);
   237:   const [drawEnabled, setDrawEnabled] = useState(false);
   238: 
   239:   // Geometry edit (facility)
   240:   const [geomEdit, setGeomEdit] = useState(null);
   241:   useEffect(() => {
   242:     const handler = (e) => {
   243:       const { facilityId, geometry } = e.detail || {};
   244:       setGeomEdit({ facilityId, geometry: geometry || null });
   245:       const fg = featureGroupRef.current;
   246:       if (!fg) return;
   247:       fg.clearLayers();
   248:       if (geometry) {
   249:         try {
   250:           L.geoJSON({ type: "Feature", geometry }).eachLayer((lyr) =>
   251:             fg.addLayer(lyr)
   252:           );
   253:         } catch (err) {
   254:           debugError("Geometry load failed", err);
   255:         }
   256:       }
   257:     };
   258:     window.addEventListener("facility:edit-geometry", handler);
   259:     return () => window.removeEventListener("facility:edit-geometry", handler);
   260:   }, []);
   261:   const exitGeomEdit = useCallback(() => {
   262:     const fg = featureGroupRef.current;
   263:     if (fg) fg.clearLayers();
   264:     setGeomEdit(null);
   265:   }, []);
   266:   const saveGeomEdit = useCallback(async () => {
   267:     const fg = featureGroupRef.current;
   268:     const gj = fg?.toGeoJSON();
   269:     const feats = Array.isArray(gj?.features) ? gj.features : [];
   270:     const geoms = feats
   271:       .map((f) => f?.geometry)
   272:       .filter(Boolean)
   273:       .filter((g) => g.type !== "Point");
   274:     if (geoms.length === 0) {
   275:       toast.warn(
   276:         "Poligon chizmadingiz. Iltimos, polygon/rectangle chizing yoki mavjudini tahrirlang."
   277:       );
   278:       return;
   279:     }
   280:     let geometry = null;
   281:     if (geoms.length === 1) geometry = geoms[0];
   282:     else {
   283:       const polys = [];
   284:       for (const g of geoms) {
   285:         if (g.type === "Polygon") polys.push(g.coordinates);
   286:         else if (g.type === "MultiPolygon") polys.push(...g.coordinates);
   287:       }
   288:       geometry = { type: "MultiPolygon", coordinates: polys };
   289:     }
   290:     const c = centroidOfGeometry(geometry);
   291:     try {
   292:       await patchFacility(geomEdit.facilityId, {
   293:         geometry,
   294:         lat: Number.isFinite(c?.lat) ? c.lat : null,
   295:         lng: Number.isFinite(c?.lng) ? c.lng : null,
   296:       });
   297:       toast.success("Geometriya saqlandi!");
   298:       exitGeomEdit();
   299:       setReloadKey((k) => k + 1);
   300:     } catch (e) {
   301:       debugError("Facility geometry patch failed", e);
   302:       toast.error("Geometriyani saqlashda xatolik yuz berdi.");
   303:     }
   304:   }, [geomEdit?.facilityId, exitGeomEdit]);
   305: 
   306:   // Tree & nav
   307:   const [checkedKeys, setCheckedKeys] = useState([]);
   308:   const [selectedKeys, setSelectedKeys] = useState([]);
   309:   const [navTarget, setNavTarget] = useState(null);
   310:   const [orgForPopup, setOrgForPopup] = useState(null);
   311: 
   312:   const flyTo = useCallback((latLng, z = 17) => {
   313:     if (!Array.isArray(latLng) || latLng.length < 2) return;
   314:     const [lat, lng] = latLng;
   315:     if (!Number.isFinite(lat) || !Number.isFinite(lng)) return;
   316:     setNavTarget({ lat, lng, zoom: z, ts: Date.now() });
   317:   }, []);
   318: 
   319:   const [panelHidden, setPanelHidden] = useState(!hideTree);
   320:   const togglePanel = useCallback(() => {
   321:     setPanelHidden((v) => !v);
   322:   }, []);
   323: 
   324:   // Search (debounced)
   325:   const [searchInput, setSearchInput] = useState("");
   326:   const debouncedSearch = useDebouncedValue(searchInput, 350);
   327:   const query = useMemo(() => debouncedSearch.trim(), [debouncedSearch]);
   328:   const onEnterSearch = () => setSearchInput((s) => s.trim());
   329:   const onClearSearch = () => setSearchInput("");
   330: 
   331:   // Viewport
   332:   const [bbox, setBbox] = useState(null);
   333: 
   334:   // Facilities
   335:   const [facilities, setFacilities] = useState([]);
   336:   const [typeFilter, setTypeFilter] = useState({
   337:     GREENHOUSE: true,
   338:     POULTRY_MEAT: true,
   339:     POULTRY_EGG: true,
   340:     TURKEY: true,
   341:     COWSHED: true,
   342:     SHEEPFOLD: true,
   343:     WORKSHOP_SAUSAGE: true,
   344:     WORKSHOP_COOKIE: true,
   345:     FISHPOND: true,
   346:     AUX_LAND: false,
   347:     BORDER_LAND: false,
   348:   });
   349:   const enabledTypes = useMemo(
   350:     () =>
   351:       Object.entries(typeFilter)
   352:         .filter(([, v]) => v)
   353:         .map(([k]) => k),
   354:     [typeFilter]
   355:   );
   356:   const checkedOrgIds = useMemo(
   357:     () => checkedKeys.map((k) => Number(k)).filter((n) => Number.isFinite(n)),
   358:     [checkedKeys]
   359:   );
   360:   const visibleFacilities = useMemo(
   361:     () => facilities.filter((f) => enabledTypes.includes(f.type)),
   362:     [facilities, enabledTypes]
   363:   );
   364:   const [reloadKey, setReloadKey] = useState(0);
   365:   const [showPolys, setShowPolys] = useState(true);
   366: 
   367:   // Draft overlay
   368:   const DRAFT_TTL_MS = 24 * 60 * 60 * 1000;
   369:   const [draftVisible, setDraftVisible] = useState(false);
   370:   const [draftGeoJSON, setDraftGeoJSON] = useState(null);
   371:   const draftLayerRef = useRef(null);
   372:   const loadDraftIfFresh = useCallback(async () => {
   373:     try {
   374:       if (!drawingsApi.getLatestDrawing) return;
   375:       const latest = await drawingsApi.getLatestDrawing();
   376:       const src = latest?.geojson || latest;
   377:       if (!src) {
   378:         setDraftGeoJSON(null);
   379:         return;
   380:       }
   381:       const ts =
   382:         Number(src?.properties?.__ts) ||
   383:         (latest?.createdAt ? Date.parse(latest.createdAt) : 0);
   384:       if (!ts || Date.now() - ts > DRAFT_TTL_MS) {
   385:         setDraftGeoJSON(null);
   386:         return;
   387:       }
   388:       const features = Array.isArray(src.features)
   389:         ? src.features.filter(
   390:             (fe) => fe?.geometry && fe.geometry.type !== "Point"
   391:           )
   392:         : [];
   393:       if (!features.length) {
   394:         setDraftGeoJSON(null);
   395:         return;
   396:       }
   397:       setDraftGeoJSON({ ...src, features });
   398:     } catch (e) {
   399:       debugError("Draftni yuklashda xatolik", e);
   400:     }
   401:   }, [DRAFT_TTL_MS]);
   402:   const maybeSaveDraft = useCallback(async (geometry) => {
   403:     const consent = window.confirm("Qoralama sifatida 24 soatga saqlaymizmi?");
   404:     if (!consent) return;
   405:     const fc = {
   406:       type: "FeatureCollection",
   407:       properties: { __kind: "latest-draft", __ts: Date.now() },
   408:       features: [{ type: "Feature", geometry, properties: {} }],
   409:     };
   410:     try {
   411:       await drawingsApi.saveDrawing(fc, "latest-draft");
   412:       setDraftGeoJSON(fc);
   413:     } catch (e) {
   414:       debugError("Draftni saqlashda xatolik", e);
   415:     }
   416:   }, []);
   417:   const clearDraft = useCallback(async () => {
   418:     try {
   419:       if (typeof drawingsApi.deleteDrawing === "function")
   420:         await drawingsApi.deleteDrawing("latest-draft");
   421:       else if (typeof drawingsApi.saveDrawing === "function")
   422:         await drawingsApi.saveDrawing(
   423:           {
   424:             type: "FeatureCollection",
   425:             properties: { __kind: "latest-draft", __ts: Date.now() },
   426:             features: [],
   427:           },
   428:           "latest-draft:clear"
   429:         );
   430:     } catch (e) {
   431:       debugError("Draftni o‘chirib bo‘lmadi", e);
   432:     } finally {
   433:       try {
   434:         draftLayerRef.current?.remove();
   435:       } catch {}
   436:       setDraftGeoJSON(null);
   437:     }
   438:   }, []);
   439: 
   440:   // Facilities fetch (bbox+cache)
   441:   const facCacheRef = useRef(new Map());
   442:   const FAC_TTL = 15_000;
   443:   const checkedOrgIdsKey = useMemo(
   444:     () =>
   445:       checkedOrgIds
   446:         .slice()
   447:         .sort((a, b) => a - b)
   448:         .join(","),
   449:     [checkedOrgIds]
   450:   );
   451:   const enabledTypesKey = useMemo(
   452:     () => enabledTypes.slice().sort().join(","),
   453:     [enabledTypes]
   454:   );
   455:   useEffect(() => {
   456:     let cancelled = false;
   457:     if (!bbox || !checkedOrgIdsKey || !enabledTypesKey) {
   458:       setFacilities([]);
   459:       return;
   460:     }
   461:     const ids = checkedOrgIdsKey
   462:       .split(",")
   463:       .map((x) => Number(x))
   464:       .filter((n) => Number.isFinite(n));
   465:     if (ids.length === 0 || enabledTypes.length === 0) {
   466:       setFacilities([]);
   467:       return;
   468:     }
   469:     const buffered = bufferBBoxStr(bbox, 0.2);
   470:     const cacheKey = [buffered, checkedOrgIdsKey, enabledTypesKey].join("|");
   471:     const hit = facCacheRef.current.get(cacheKey);
   472:     if (hit && Date.now() - hit.ts < FAC_TTL) {
   473:       setFacilities(hit.data);
   474:       return;
   475:     }
   476:     const t = setTimeout(async () => {
   477:       try {
   478:         const reqs = ids.map((orgId) =>
   479:           listFacilities({ orgId, types: enabledTypes, bbox: buffered })
   480:         );
   481:         const all = (await Promise.all(reqs)).flat();
   482:         const seen = new Set();
   483:         const uniq = [];
   484:         for (const f of all) {
   485:           if (!seen.has(f.id)) {
   486:             seen.add(f.id);
   487:             uniq.push(f);
   488:           }
   489:         }
   490:         if (!cancelled) {
   491:           setFacilities(uniq);
   492:           facCacheRef.current.set(cacheKey, { ts: Date.now(), data: uniq });
   493:         }
   494:       } catch (e) {
   495:         if (!cancelled) debugError("listFacilities failed", e);
   496:       }
   497:     }, 250);
   498:     return () => {
   499:       cancelled = true;
   500:       clearTimeout(t);
   501:     };
   502:   }, [bbox, checkedOrgIdsKey, enabledTypesKey, enabledTypes, reloadKey]);
   503: 
   504:   // Create drawer
   505:   const [createOpen, setCreateOpen] = useState(false);
   506:   const [draftGeom, setDraftGeom] = useState(null);
   507:   const [draftCenter, setDraftCenter] = useState(null);
   508:   const onCreated = useCallback(
   509:     (e) => {
   510:       updateGeoJSON();
   511:       const layer = e.layer,
   512:         type = e.layerType;
   513:       if (geomEdit && ["polygon", "rectangle"].includes(type)) {
   514:         const fg = featureGroupRef.current;
   515:         if (fg) {
   516:           try {
   517:             fg.clearLayers();
   518:             fg.addLayer(layer);
   519:             updateGeoJSON();
   520:             toast.info("Eski geometriya yangisi bilan almashtirildi");
   521:           } catch (err) {
   522:             debugError("Geom replace failed", err);
   523:           }
   524:         }
   525:         return;
   526:       }
   527:       if (!["marker", "polygon", "rectangle"].includes(type)) return;
   528:       const fg = featureGroupRef.current;
   529:       const gj = layer.toGeoJSON();
   530:       const geometry = gj.geometry;
   531:       const c =
   532:         type === "marker" ? layer.getLatLng() : layer.getBounds().getCenter();
   533:       lastDrawnLayerRef.current = layer;
   534:       const ok = window.confirm("Chizilgan obyektni saqlashni xohlaysizmi?");
   535:       if (!ok) {
   536:         if (fg && layer) fg.removeLayer(layer);
   537:         updateGeoJSON();
   538:         return;
   539:       }
   540:       setDraftGeom(geometry);
   541:       setDraftCenter({ lat: c.lat, lng: c.lng });
   542:       setCreateOpen(true);
   543:       if (fg && layer) {
   544:         fg.removeLayer(layer);
   545:         updateGeoJSON();
   546:       }
   547:       void maybeSaveDraft(geometry);
   548:     },
   549:     [updateGeoJSON, geomEdit, maybeSaveDraft]
   550:   );
   551: 
   552:   // Edit modal
   553:   const [editOpen, setEditOpen] = useState(false);
   554:   const [editFacility, setEditFacility] = useState(null);
   555:   const [galleryFacility, setGalleryFacility] = useState(null); // gallery panel
   556:   const handleOpenEdit = (f) => {
   557:     setEditFacility(f);
   558:     setEditOpen(true);
   559:   };
   560: 
   561:   // Select (flyTo)
   562:   const onTreeSelect = (keys) => {
   563:     setSelectedKeys(keys);
   564:     const k = keys?.[0] ? String(keys[0]) : null;
   565:     if (!k) return;
   566:     const n = flatNodes.find((x) => String(x.key) === k);
   567:     if (n?.pos && Array.isArray(n.pos)) {
   568:       setNavTarget({
   569:         lat: n.pos[0],
   570:         lng: n.pos[1],
   571:         zoom: Number.isFinite(n.zoom) ? n.zoom : 13,
   572:         ts: Date.now(),
   573:       });
   574:     }
   575:   };
   576: 
   577:   const geojsonPretty = geojson ? JSON.stringify(geojson, null, 2) : "";
   578:   const importFromTextarea = () => {
   579:     const el = document.getElementById("gj-input");
   580:     const text = el ? el.value : "";
   581:     try {
   582:       const parsed = JSON.parse(text);
   583:       const fg = featureGroupRef.current;
   584:       if (!fg) return;
   585:       fg.clearLayers();
   586:       L.geoJSON(parsed).eachLayer((lyr) => fg.addLayer(lyr));
   587:       setGeojson(parsed);
   588:     } catch {
   589:       toast.error("Noto‘g‘ri JSON!");
   590:     }
   591:   };
   592: 
   593:   // Keyboard T
   594:   useEffect(() => {
   595:     const onKey = (e) => {
   596:       const tag = (e.target?.tagName || "").toLowerCase();
   597:       if (tag === "input" || tag === "textarea") return;
   598:       if (e.key.toLowerCase() === "t") togglePanel();
   599:     };
   600:     window.addEventListener("keydown", onKey);
   601:     return () => window.removeEventListener("keydown", onKey);
   602:   }, [togglePanel]);
   603: 
   604:   /** Ancestors keys */
   605:   const collectAncestorsKeys = useCallback((nodes, targetKey, trail = []) => {
   606:     for (const n of nodes || []) {
   607:       const key = String(n.key);
   608:       const nextTrail = [...trail, key];
   609:       if (key === String(targetKey)) return trail.map(String);
   610:       if (n.children && n.children.length) {
   611:         const res = collectAncestorsKeys(n.children, targetKey, nextTrail);
   612:         if (res) return res;
   613:       }
   614:     }
   615:     return null;
   616:   }, []);
   617: 
   618:   /** Code jump -> locate */
   619:   const handleCodeJump = useCallback(
   620:     async (...args) => {
   621:       let code = "";
   622:       if (args.length === 1) {
   623:         const raw = args[0];
   624:         code =
   625:           typeof raw === "string" ? raw.trim() : String(raw?.code || "").trim();
   626:       } else if (args.length >= 1) {
   627:         const org = args[0];
   628:         code = String(org?.code || "").trim();
   629:       }
   630:       if (!code) return;
   631: 
   632:       try {
   633:         const resp = await locateOrg(code); // { org, facilities }
   634:         const org = resp?.org || resp;
   635:         if (!org) throw new Error("Javobda org topilmadi");
   636:         const idStr = String(org.id);
   637: 
   638:         setCheckedKeys((prev) =>
   639:           prev.includes(idStr) ? prev : [...prev, idStr]
   640:         );
   641:         setSelectedKeys([idStr]);
   642: 
   643:         const ancestors = collectAncestorsKeys(orgTree, idStr) || [];
   644:         setExpandedKeys((prev) => {
   645:           const prevArr = prev ? prev.map(String) : [];
   646:           return Array.from(new Set([...prevArr, ...ancestors, idStr]));
   647:         });
   648: 
   649:         const z = Number.isFinite(org.zoom)
   650:           ? org.zoom
   651:           : org.level === 0
   652:           ? 6
   653:           : org.level === 1
   654:           ? 12
   655:           : 15;
   656: 
   657:         if (Number.isFinite(org?.lat) && Number.isFinite(org?.lng)) {
   658:           setNavTarget({ lat: org.lat, lng: org.lng, zoom: z, ts: Date.now() });
   659:           setOrgForPopup({
   660:             id: org.id,
   661:             name: org.name,
   662:             lat: org.lat,
   663:             lng: org.lng,
   664:             zoom: z,
   665:             level: org.level,
   666:             type: org.type || org.orgType,
   667:           });
   668:         } else {
   669:           setOrgForPopup(null);
   670:         }
   671:       } catch (e) {
   672:         debugError("locateOrg failed", e);
   673:         const msg =
   674:           e?.response?.status === 403 ? "Sizga ruxsat yo‘q." : "Kod topilmadi.";
   675:         toast.error(msg);
   676:       }
   677:     },
   678:     [orgTree, collectAncestorsKeys]
   679:   );
   680: 
   681:   // Tiles env
   682:   const HYBRID_URL =
   683:     import.meta.env.VITE_TILE_HYBRID || "http://localhost:8008/{z}/{x}/{y}.jpg";
   684:   const SATELLITE_URL =
   685:     import.meta.env.VITE_TILE_SATELLITE ||
   686:     "http://localhost:5005/{z}/{x}/{y}.jpg";
   687:   const OSMUZ_URL = "https://osm.uz/tile/{z}/{x}/{y}.png";
   688:   const TMS = envBool(import.meta.env.VITE_TILE_TMS, true);
   689: 
   690:   // ✅ Vesat (SAS Planet store) sozlamalari
   691:   const VESAT_BASE =
   692:     import.meta.env.VITE_TILE_VESAT_BASE || "https://vesat.uz";
   693:   const VESAT_EXT = import.meta.env.VITE_TILE_VESAT_EXT || "jpg";
   694:   const VESAT_TMS = envBool(import.meta.env.VITE_TILE_VESAT_TMS, false);
   695: 
   696:   // Org-tree flatten + depth
   697:   const flatNodes = useMemo(() => {
   698:     const out = [];
   699:     const walk = (arr, depth = 0) => {
   700:       (arr || []).forEach((n) => {
   701:         out.push({ ...n, key: String(n.key), depth });
   702:         if (n.children) walk(n.children, depth + 1);
   703:       });
   704:     };
   705:     walk(orgTree, 0);
   706:     return out;
   707:   }, [orgTree]);
   708: 
   709:   // Filtered tree for panel
   710:   const [expandedKeys, setExpandedKeys] = useState(undefined);
   711:   const { rcData, visibleKeySet } = useMemo(() => {
   712:     const q = query.toLowerCase();
   713:     const visible = new Set();
   714:     const prune = (nodes) => {
   715:       if (!q) return nodes;
   716:       const res = [];
   717:       for (const n of nodes) {
   718:         const titleStr = typeof n.title === "string" ? n.title : "";
   719:         const selfMatch = titleStr.toLowerCase().includes(q);
   720:         const childPruned = n.children ? prune(n.children) : null;
   721:         if (selfMatch || (childPruned && childPruned.length)) {
   722:           visible.add(String(n.key));
   723:           res.push({
   724:             ...n,
   725:             children:
   726:               childPruned && childPruned.length ? childPruned : undefined,
   727:           });
   728:         }
   729:       }
   730:       return res;
   731:     };
   732:     const filtered = prune(orgTree);
   733:     const mapNode = (n) => ({
   734:       key: String(n.key),
   735:       title: n.title,
   736:       children: n.children ? n.children.map(mapNode) : undefined,
   737:     });
   738:     return {
   739:       rcData: (filtered || []).map(mapNode),
   740:       visibleKeySet: q ? visible : null,
   741:     };
   742:   }, [orgTree, query]);
   743: 
   744:   useEffect(() => {
   745:     if (visibleKeySet) setExpandedKeys(Array.from(visibleKeySet));
   746:     else setExpandedKeys(undefined);
   747:   }, [visibleKeySet]);
   748: 
   749:   // Intro target
   750:   const computedHome = useMemo(() => {
   751:     const UZ_CENTER = { lat: 41.3775, lng: 64.5853 };
   752:     const UZ_ZOOM = 6;
   753:     if (
   754:       homeTarget &&
   755:       Number.isFinite(homeTarget.lat) &&
   756:       Number.isFinite(homeTarget.lng) &&
   757:       Number.isFinite(homeTarget.zoom)
   758:     )
   759:       return homeTarget;
   760:     if (String(userRole).toLowerCase() === "admin")
   761:       return { ...UZ_CENTER, zoom: UZ_ZOOM };
   762:     const firstWithPos = flatNodes.find((n) => Array.isArray(n.pos));
   763:     if (firstWithPos) {
   764:       const [lat, lng] = firstWithPos.pos;
   765:       const z = Number.isFinite(firstWithPos.zoom) ? firstWithPos.zoom : 12;
   766:       if (Number.isFinite(lat) && Number.isFinite(lng))
   767:         return { lat, lng, zoom: z };
   768:     }
   769:     return { lat: center[0], lng: center[1], zoom };
   770:   }, [homeTarget, userRole, flatNodes, center, zoom]);
   771: 
   772:   const initialZoom = introEnabled ? 3 : zoom;
   773:   const [showGeoTools, setShowGeoTools] = useState(false);
   774: 
   775:   /* =========================
   776:      O‘ZBEKISTON CHEGARASI LINIYALARI (faqat “satellite” turida)
   777:      ========================= */
   778:   const [isSatellite, setIsSatellite] = useState(false);
   779: 
   780:   return (
   781:     <div className="map-wrapper map-ui" style={{ position: "relative" }}>
   782:       <style>{darkDrawerCss}</style>
   783: 
   784:       <CodeJumpBox orgTree={orgTree} onJump={handleCodeJump} />
   785: 
   786:       <MapContainer
   787:         center={center}
   788:         zoom={initialZoom}
   789:         minZoom={minZoom}
   790:         maxZoom={maxZoom}
   791:         preferCanvas={true}
   792:         wheelDebounceTime={40}
   793:         wheelPxPerZoomLevel={80}
   794:         style={{ height, width: "100%" }}
   795:       >
   796:         <StripLeafletAttribution />
   797:         <IntroFlight
   798:           enabled={!!introEnabled}
   799:           delayMs={introDelayMs}
   800:           target={computedHome}
   801:         />
   802: 
   803:         <LayersControl position="bottomright">
   804:           <LayersControl.BaseLayer name="Bing Hybrid (offline, 8008)">
   805:             <MapTiles
   806:               key="hybrid-8008"
   807:               url={HYBRID_URL}
   808:               minZoom={minZoom}
   809:               maxZoom={maxZoom}
   810:               maxNativeZoom={maxZoom}
   811:               tms={TMS}
   812:               noWrap={true}
   813:               updateWhenIdle={true}
   814:               keepBuffer={2}
   815:               attribution="&copy; Hybrid (offline)"
   816:               eventHandlers={{
   817:                 add: () => setIsSatellite(false),
   818:               }}
   819:             />
   820:           </LayersControl.BaseLayer>
   821: 
   822:           <LayersControl.BaseLayer name="Bing Satellite (offline, 5005)">
   823:             <MapTiles
   824:               key="satellite-5005"
   825:               url={SATELLITE_URL}
   826:               minZoom={minZoom}
   827:               maxZoom={maxZoom}
   828:               maxNativeZoom={maxZoom}
   829:               tms={TMS}
   830:               noWrap={true}
   831:               updateWhenIdle={true}
   832:               keepBuffer={2}
   833:               attribution="&copy; Satellite (offline)"
   834:               eventHandlers={{
   835:                 add: () => setIsSatellite(true),
   836:               }}
   837:             />
   838:           </LayersControl.BaseLayer>
   839: 
   840:           {/* ✅ Yangi: Vesat (SAS Planet default store) */}
   841:           <LayersControl.BaseLayer
   842:             checked
   843:             name="Vesat (SAS Planet, 10.25.1.90)"
   844:           >
   845:             <SasPlanetTiles
   846:               key="vesat-sasplanet"
   847:               url={VESAT_BASE} // masalan: http://10.25.1.90/vesat
   848:               ext={VESAT_EXT} // jpg/png
   849:               minZoom={0}
   850:               maxZoom={19}
   851:               tms={VESAT_TMS} // ko‘pincha false
   852:               noWrap={true}
   853:               updateWhenIdle={true}
   854:               keepBuffer={2}
   855:               attribution="&copy; Vesat (SAS cache)"
   856:               eventHandlers={{
   857:                 add: () => setIsSatellite(true), // Chegaralarni ko‘rsatish
   858:               }}
   859:             />
   860:           </LayersControl.BaseLayer>
   861: 
   862:           {/* ✅ OSM.uz (XYZ) */}
   863:           <LayersControl.BaseLayer name="OSM.uz (XYZ)">
   864:             <MapTiles
   865:               key="osm-uz-xyz"
   866:               url={OSMUZ_URL}
   867:               minZoom={0}
   868:               maxZoom={19}
   869:               maxNativeZoom={19}
   870:               tms={false}
   871:               noWrap={false}
   872:               updateWhenIdle={true}
   873:               keepBuffer={2}
   874:               attribution="&copy; OSM.uz & OpenStreetMap contributors"
   875:               eventHandlers={{
   876:                 add: () => setIsSatellite(false),
   877:               }}
   878:             />
   879:           </LayersControl.BaseLayer>
   880: 
   881:           <LayersControl.Overlay name="Chizish rejimi (toolbar)">
   882:             <LayersToggle
   883:               onEnable={() => setDrawEnabled(true)}
   884:               onDisable={() => setDrawEnabled(false)}
   885:             />
   886:           </LayersControl.Overlay>
   887: 
   888:           <LayersControl.Overlay name="Oxirgi chizma (draft)">
   889:             <>
   890:               <LayersToggle
   891:                 onEnable={() => {
   892:                   setDraftVisible(true);
   893:                   void loadDraftIfFresh();
   894:                 }}
   895:                 onDisable={() => {
   896:                   setDraftVisible(false);
   897:                 }}
   898:               />
   899:               {draftGeoJSON && (
   900:                 <GeoJSON
   901:                   ref={draftLayerRef}
   902:                   data={draftGeoJSON}
   903:                   style={() => ({
   904:                     color: "#4F46E5",
   905:                     weight: 2,
   906:                     dashArray: "6 4",
   907:                     fill: false,
   908:                   })}
   909:                   pane="facilities-polys"
   910:                 />
   911:               )}
   912:             </>
   913:           </LayersControl.Overlay>
   914: 
   915:           <LayersControl.Overlay name="GeoJSON tools">
   916:             <LayersToggle
   917:               onEnable={() => setShowGeoTools(true)}
   918:               onDisable={() => setShowGeoTools(false)}
   919:             />
   920:           </LayersControl.Overlay>
   921:         </LayersControl>
   922: 
   923:         <MapControls
   924:           panelHidden={panelHidden}
   925:           onTogglePanel={() => setPanelHidden((v) => !v)}
   926:         />
   927:         <ZoomIndicator position="bottomright" />
   928: 
   929:         {/* Panes */}
   930:         <Pane name="facilities-polys" style={{ zIndex: 410 }} />
   931:         <Pane name="facilities-centroids" style={{ zIndex: 420 }} />
   932:         <Pane name="facilities-markers" style={{ zIndex: 430 }} />
   933:         <Pane name="borders-lines" style={{ zIndex: 300 }} />
   934: 
   935:         <ViewportWatcher onBboxChange={setBbox} />
   936:         <MapFlyer target={navTarget} />
   937: 
   938:         {flatNodes
   939:           .filter((n) => n.pos && checkedKeys.includes(String(n.key)))
   940:           .map((n) => (
   941:             <OrgMarker
   942:               key={n.key}
   943:               org={{
   944:                 id: Number(n.key),
   945:                 name: n.title,
   946:                 lat: n.pos[0],
   947:                 lng: n.pos[1],
   948:                 zoom: Number.isFinite(n.zoom) ? n.zoom : 13,
   949:                 level: Number.isFinite(n.level) ? Number(n.level) : n.depth,
   950:                 type: n.type || n.kind || n.orgType,
   951:               }}
   952:               open={false}
   953:               onEdit={(id) =>
   954:                 window.dispatchEvent(
   955:                   new CustomEvent("org:edit", { detail: { id } })
   956:                 )
   957:               }
   958:               onOpenTable={(id) =>
   959:                 window.dispatchEvent(
   960:                   new CustomEvent("org:open-table", { detail: { id } })
   961:                 )
   962:               }
   963:             />
   964:           ))}
   965: 
   966:         <FacilityGeoLayer
   967:           facilities={visibleFacilities}
   968:           showPolys={showPolys}
   969:           onFlyTo={flyTo}
   970:           onOpenEdit={handleOpenEdit}
   971:         />
   972: 
   973:         <FacilityMarkers
   974:           facilities={visibleFacilities}
   975:           onOpenEdit={handleOpenEdit}
   976:           onOpenGallery={(f) => setGalleryFacility(f)}
   977:         />
   978: 
   979:         {orgForPopup && <OrgMarker org={orgForPopup} open />}
   980: 
   981:         {/* ✅ O‘zbekiston chegaralari: Satellite yoki Vesat tanlanganda ko‘rinadi */}
   982:         {isSatellite && uzBorders && (
   983:           <GeoJSON
   984:             data={uzBorders}
   985:             pane="borders-lines"
   986:             interactive={false}
   987:             style={() => ({
   988:               color: "#1b2440",
   989:               weight: 4,
   990:               opacity: 1,
   991:               dashArray: "6 3",
   992:             })}
   993:           />
   994:         )}
   995: 
   996:         <FeatureGroup ref={featureGroupRef}>
   997:           {(drawEnabled || geomEdit) && (
   998:             <Suspense fallback={null}>
   999:               <EditControlLazy
  1000:                 position="topright"
  1001:                 onCreated={onCreated}
  1002:                 onEdited={onEdited}
  1003:                 onDeleted={onDeleted}
  1004:                 draw={{
  1005:                   polyline: false,
  1006:                   polygon: true,
  1007:                   rectangle: true,
  1008:                   circle: false,
  1009:                   circlemarker: false,
  1010:                   marker: !geomEdit,
  1011:                 }}
  1012:               />
  1013:             </Suspense>
  1014:           )}
  1015:         </FeatureGroup>
  1016:       </MapContainer>
  1017: 
  1018:       {draftVisible && draftGeoJSON && (
  1019:         <div
  1020:           style={{
  1021:             position: "absolute",
  1022:             left: 12,
  1023:             bottom: 12,
  1024:             zIndex: 550,
  1025:             background: "#fff",
  1026:             border: "1px solid #e5e7eb",
  1027:             padding: "8px 10px",
  1028:             borderRadius: 10,
  1029:             boxShadow: "0 6px 20px rgba(0,0,0,.12)",
  1030:             display: "flex",
  1031:             gap: 10,
  1032:             alignItems: "center",
  1033:           }}
  1034:         >
  1035:           <span style={{ fontWeight: 600 }}>Oxirgi qoralama</span>
  1036:           <button className="btn" onClick={clearDraft}>
  1037:             Tozalash
  1038:           </button>
  1039:         </div>
  1040:       )}
  1041: 
  1042:       <OrgTreePanel
  1043:         rcData={rcData}
  1044:         checkedKeys={checkedKeys}
  1045:         selectedKeys={selectedKeys}
  1046:         expandedKeys={expandedKeys}
  1047:         onTreeExpand={setExpandedKeys}
  1048:         onTreeCheck={(keys) => setCheckedKeys(keys.map(String))}
  1049:         onTreeSelect={onTreeSelect}
  1050:         searchInput={searchInput}
  1051:         setSearchInput={setSearchInput}
  1052:         onEnterSearch={onEnterSearch}
  1053:         onClearSearch={onClearSearch}
  1054:         typeFilter={typeFilter}
  1055:         setTypeFilter={setTypeFilter}
  1056:         showPolys={showPolys}
  1057:         setShowPolys={setShowPolys}
  1058:         bbox={bbox}
  1059:         facilitiesCount={visibleFacilities.length}
  1060:         selectedOrgId={null}
  1061:         hide={panelHidden}
  1062:         onRequestHide={() => setPanelHidden(true)}
  1063:       />
  1064: 
  1065:       <CreateFacilityDrawer
  1066:         open={createOpen}
  1067:         geometry={draftGeom}
  1068:         center={draftCenter}
  1069:         selectedOrgId={checkedOrgIds[0] || null}
  1070:         onClose={() => setCreateOpen(false)}
  1071:         onSaved={async () => {
  1072:           const fg = featureGroupRef.current;
  1073:           if (fg) fg.clearLayers();
  1074:           await clearDraft();
  1075:           setReloadKey((k) => k + 1);
  1076:         }}
  1077:       />
  1078: 
  1079:       <FacilityEditModal
  1080:         open={editOpen}
  1081:         facility={editFacility}
  1082:         onClose={() => setEditOpen(false)}
  1083:         onSaved={() => setReloadKey((k) => k + 1)}
  1084:         dark={dark}
  1085:       />
  1086: 
  1087:       <FacilityGalleryPanel
  1088:         open={!!galleryFacility}
  1089:         facility={galleryFacility}
  1090:         onClose={() => setGalleryFacility(null)}
  1091:         dark={dark}
  1092:       />
  1093: 
  1094:       {showGeoTools && (
  1095:         <div className="panel">
  1096:           <div className="panel-col">
  1097:             <h4>GeoJSON (faqat o‘qish)</h4>
  1098:             <textarea readOnly value={geojsonPretty} />
  1099:           </div>
  1100:           <div className="panel-col">
  1101:             <h4>GeoJSON import</h4>
  1102:             <textarea
  1103:               id="gj-input"
  1104:               placeholder='{"type":"FeatureCollection","features":[...]}'
  1105:             />
  1106:             <div className="panel-actions">
  1107:               <button onClick={importFromTextarea}>Import</button>
  1108:               <a
  1109:                 href={
  1110:                   "data:application/json;charset=utf-8," +
  1111:                   encodeURIComponent(geojsonPretty || "{}")
  1112:                 }
  1113:                 download="drawings.geojson"
  1114:               >
  1115:                 <button disabled={!geojsonPretty}>.geojson yuklab olish</button>
  1116:               </a>
  1117:               <button
  1118:                 onClick={async () => {
  1119:                   try {
  1120:                     if (!drawingsApi.saveDrawing) {
  1121:                       toast.error("API topilmadi.");
  1122:                       return;
  1123:                     }
  1124:                     await drawingsApi.saveDrawing(
  1125:                       geojson || {},
  1126:                       "map-drawings"
  1127:                     );
  1128:                     toast.success("Saqlash muvaffiyatli!");
  1129:                   } catch (e) {
  1130:                     debugError("saveDrawing (panel) failed", e);
  1131:                     toast.error("Saqlashda xatolik");
  1132:                   }
  1133:                 }}
  1134:                 disabled={!geojson}
  1135:               >
  1136:                 Backend’ga saqlash
  1137:               </button>
  1138:             </div>
  1139:           </div>
  1140:         </div>
  1141:       )}
  1142: 
  1143:       {geomEdit && (
  1144:         <div className="geom-edit-banner">
  1145:           <div className="title">Geometriya tahrirlash rejimi</div>
  1146:           <div className="desc">
  1147:             Mavjud poligonni <b>Edit</b> bilan o‘zgartiring yoki yangi{" "}
  1148:             <b>Polygon/Rectangle</b> chizing. Keyin “Geometriyani saqlash”
  1149:             tugmasini bosing.
  1150:           </div>
  1151:           <div className="actions">
  1152:             <button className="btn" onClick={exitGeomEdit}>
  1153:               Bekor qilish
  1154:             </button>
  1155:             <button className="btn primary" onClick={saveGeomEdit}>
  1156:               Geometriyani saqlash
  1157:             </button>
  1158:           </div>
  1159:         </div>
  1160:       )}
  1161:     </div>
  1162:   );
  1163: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\OrgMarker.jsx
SIZE: 2519 bytes
================================================================================
     1: // src/components/map/OrgMarker.jsx
     2: import { useEffect, useRef, useMemo } from "react";
     3: import { Marker, useMap } from "react-leaflet";
     4: import { attachOrgPopup } from "./orgPopup";
     5: // ❗️ Leaflet default ikon patch — bir marta import qilinsa bas
     6: import "./leafletDefaultIconPatch";
     7: import L from "leaflet";
     8: 
     9: // Ranglar (org.level ga qarab). Fallback: ko'k (Leaflet default bilan yaqin)
    10: const LEVEL_COLORS = {
    11:   0: { marker: "#1d4ed8", shadow: undefined }, // Respublika
    12:   1: { marker: "#059669" }, // Viloyat
    13:   2: { marker: "#d97706" }, // Tuman
    14:   3: { marker: "#9333ea" }, // Kichik bo'lim
    15:   4: { marker: "#db2777" }, // Yana pastki
    16: };
    17: 
    18: function buildSvg(color) {
    19:   const c = color || "#1d4ed8";
    20:   return `<?xml version="1.0" encoding="UTF-8"?>
    21:   <svg xmlns="http://www.w3.org/2000/svg" width="25" height="41" viewBox="0 0 25 41" fill="none">
    22:     <path d="M12.5 0C5.596 0 0 5.716 0 12.756c0 3.07 1.106 5.882 2.953 8.15 3.245 4.008 8.27 11.988 9.163 19.463.068.574.527.631.93.631.403 0 .862-.057.93-.63.893-7.476 5.918-15.456 9.163-19.464C23.894 18.64 25 15.827 25 12.757 25 5.716 19.404 0 12.5 0Z" fill="${c}" stroke="white" stroke-width="1.2"/>
    23:     <circle cx="12.5" cy="12.8" r="5.3" fill="white"/>
    24:   </svg>`;
    25: }
    26: 
    27: function svgIcon(color) {
    28:   const svg = buildSvg(color);
    29:   return L.icon({
    30:     iconUrl: `data:image/svg+xml;base64,${btoa(svg)}`,
    31:     iconSize: [25, 41],
    32:     iconAnchor: [12, 41],
    33:     popupAnchor: [0, -34],
    34:     shadowUrl: undefined,
    35:   });
    36: }
    37: 
    38: /**
    39:  * org: { id, name, lat, lng, zoom?, level?, type?, kind? }
    40:  * open: mount paytida auto-open
    41:  */
    42: export default function OrgMarker({ org, open = true, onEdit, onOpenTable }) {
    43:   const ref = useRef(null);
    44:   const map = useMap();
    45: 
    46:   const icon = useMemo(() => {
    47:     if (!org) return null;
    48:     const lvl = Number.isFinite(org.level) ? org.level : null;
    49:     const color = LEVEL_COLORS[lvl]?.marker || LEVEL_COLORS[0].marker;
    50:     return svgIcon(color);
    51:   }, [org]);
    52: 
    53:   useEffect(() => {
    54:     const mk = ref.current;
    55:     if (
    56:       !mk ||
    57:       !org?.id ||
    58:       !Number.isFinite(org.lat) ||
    59:       !Number.isFinite(org.lng)
    60:     )
    61:       return;
    62:     attachOrgPopup(mk, org, { map, onEdit, onOpenTable });
    63:     if (open) mk.openPopup();
    64:   }, [org, open, onEdit, onOpenTable, map]);
    65: 
    66:   if (!org) return null;
    67: 
    68:   return (
    69:     <Marker
    70:       ref={ref}
    71:       position={[org.lat, org.lng]}
    72:       icon={icon || undefined}
    73:       zIndexOffset={900}
    74:       pane="facilities-markers"
    75:     />
    76:   );
    77: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\orgPopup.js
SIZE: 9264 bytes
================================================================================
     1: // src/map/orgPopup.js
     2: import L from "leaflet";
     3: import { getOrgDetails } from "../../api/org";
     4: import { sanitizeHTML } from "../../utils/sanitize";
     5: import { TYPE_LABELS, colorForBack } from "../../constants/facilityTypes";
     6: import { debugLog } from "../../utils/debug";
     7: import "../../styles/_org_popup.scss";
     8: 
     9: /**
    10:  * Markerga boy popup bog'laydi.
    11:  * @param {L.Marker} marker - Leaflet marker
    12:  * @param {{id:number,name:string,lat?:number,lng?:number,zoom?:number}} org - minimal org ma'lumoti
    13:  * @param {{ map?: L.Map, onEdit?:(id:number)=>void, onOpenTable?:(id:number)=>void }} opts
    14:  */
    15: export function attachOrgPopup(marker, org, opts = {}) {
    16:   const map = opts.map || marker._map;
    17: 
    18:   marker.bindPopup("", {
    19:     className: "org-popup",
    20:     autoPan: true,
    21:     maxWidth: 380,
    22:     offset: [0, -8],
    23:     closeButton: true,
    24:   });
    25: 
    26:   marker.on("popupopen", async (e) => {
    27:     const popup = e.popup;
    28:     popup.setContent(loadingHTML(org));
    29:     try {
    30:       const info = await getOrgDetails(org.id);
    31:       const safe = await sanitizeHTML(renderHTML(info, org));
    32:       popup.setContent(safe);
    33:       wireActions(popup.getElement(), { map, info, org, ...opts });
    34:     } catch (err) {
    35:       const safeErr = await sanitizeHTML(errorHTML(err));
    36:       popup.setContent(safeErr);
    37:     }
    38:   });
    39: }
    40: 
    41: /* ---------------- HTML builders ---------------- */
    42: function loadingHTML(org) {
    43:   return `
    44:   <div class="orgp">
    45:     <div class="orgp__title">
    46:       <span class="dot" aria-hidden="true"></span>
    47:       <b>${escapeHtml(org?.name ?? "Bo‘lim")}</b>
    48:     </div>
    49:     <div class="orgp__row skel"></div>
    50:     <div class="orgp__row skel"></div>
    51:     <div class="orgp__row skel" style="width:70%"></div>
    52:     <div class="orgp__actions">
    53:       <button class="btn ghost" disabled>Kutilmoqda…</button>
    54:     </div>
    55:   </div>`;
    56: }
    57: 
    58: function errorHTML(err) {
    59:   const msg = (
    60:     err?.response?.data?.message ||
    61:     err?.message ||
    62:     "Xatolik"
    63:   ).toString();
    64:   return `
    65:   <div class="orgp">
    66:     <div class="orgp__title"><b>Ma’lumot yuklanmadi</b></div>
    67:     <div class="orgp__error">${escapeHtml(msg)}</div>
    68:   </div>`;
    69: }
    70: 
    71: function renderHTML(info, fallbackOrg) {
    72:   const o0 = info || {};
    73:   const inner =
    74:     (o0.data && typeof o0.data === "object" ? o0.data : null) ||
    75:     (o0.org && typeof o0.org === "object" ? o0.org : null);
    76:   const o = inner ? { ...inner, ...o0 } : o0;
    77:   try {
    78:     if (
    79:       typeof window !== "undefined" &&
    80:       window?.localStorage?.getItem("DEBUG_ORG_POPUP") === "1"
    81:     ) {
    82:       debugLog("[OrgPopup] raw=", o0);
    83:       debugLog("[OrgPopup] flattened=", o);
    84:     }
    85:   } catch {}
    86:   const name = o.name ?? fallbackOrg?.name ?? "Bo‘lim";
    87:   // Tur / Parent talab bo'yicha ko'rsatilmaydi
    88:   const lat = asNum(o.lat ?? o.latitude ?? fallbackOrg?.lat);
    89:   const lng = asNum(o.lng ?? o.longitude ?? fallbackOrg?.lng);
    90:   const zoom = asNum(o.zoom ?? fallbackOrg?.zoom) ?? 14;
    91:   const status = o.status ?? o.state ?? o.lifeCycleState ?? "Active";
    92: 
    93:   // const childrenCountRaw = (removed unused)
    94:   o.childrenCount ??
    95:     o.childCount ??
    96:     o.childsCount ??
    97:     (Array.isArray(o.children) ? o.children.length : undefined);
    98:   const facilitiesCountRaw =
    99:     o.facilitiesCount ??
   100:     o.facilityCount ??
   101:     o.sitesCount ??
   102:     o.objectsCount ??
   103:     (Array.isArray(o.facilities) ? o.facilities.length : undefined) ??
   104:     (Array.isArray(o.sites) ? o.sites.length : undefined);
   105:   // const childrenCount = numOrDash(childrenCountRaw); // removed unused variable (kept logic for potential future use)
   106:   const facilitiesCount = numOrDash(facilitiesCountRaw);
   107:   // Tushum / Sof foyda / Manzil / Mas'ul / Tel talab bo'yicha olib tashlangan
   108: 
   109:   // Breadcrumb (parent zanjiri)
   110:   const breadcrumb = Array.isArray(o.breadcrumb) ? o.breadcrumb : o0.breadcrumb;
   111:   const crumbHtml = Array.isArray(breadcrumb)
   112:     ? breadcrumb
   113:         .map((c, i) => {
   114:           const last = i === breadcrumb.length - 1;
   115:           return `<span class="crumb${last ? " current" : ""}">${escapeHtml(
   116:             c.name || c.code || String(c.id)
   117:           )}</span>`;
   118:         })
   119:         .join('<span class="crumb-sep">›</span>')
   120:     : "";
   121: 
   122:   // Type distribution (stats.byType)
   123:   const byType = (o.stats && o.stats.byType) || o.byType || {};
   124:   const typeItems = Object.entries(byType)
   125:     .sort((a, b) => b[1] - a[1])
   126:     .map(([t, cnt]) => {
   127:       const label =
   128:         TYPE_LABELS[t] ||
   129:         t
   130:           .toLowerCase()
   131:           .replace(/_/g, " ")
   132:           .replace(/(^|\s)\S/g, (c) => c.toUpperCase());
   133:       const col = colorForBack(t);
   134:       return `<div class="dist-item" title="${escapeHtml(
   135:         label
   136:       )}"><span class="sw" style="background:${col}"></span><b>${escapeHtml(
   137:         label
   138:       )}</b><em>${cnt}</em></div>`;
   139:     })
   140:     .join("");
   141: 
   142:   // Status distribution
   143:   const byStatus = (o.stats && o.stats.byStatus) || o.byStatus || {};
   144:   const statusItems = Object.entries(byStatus)
   145:     .sort((a, b) => b[1] - a[1])
   146:     .map(([st, cnt]) => {
   147:       const pill = statusPill(st);
   148:       const nice = st
   149:         .toLowerCase()
   150:         .replace(/_/g, " ")
   151:         .replace(/(^|\s)\S/g, (c) => c.toUpperCase());
   152:       return `<div class="status-item ${pill}"><span>${escapeHtml(
   153:         nice
   154:       )}</span><b>${cnt}</b></div>`;
   155:     })
   156:     .join("");
   157: 
   158:   // Siblings (navigation)
   159:   const siblings = Array.isArray(o.siblings) ? o.siblings : o0.siblings;
   160:   const sibHtml = Array.isArray(siblings)
   161:     ? siblings
   162:         .filter((s) => s.id !== o.id)
   163:         .slice(0, 6)
   164:         .map(
   165:           (s) =>
   166:             `<button class="sib" data-sib-id="${s.id}" data-sib-lat="${
   167:               s.lat ?? ""
   168:             }" data-sib-lng="${s.lng ?? ""}" data-sib-zoom="${
   169:               s.zoom ?? ""
   170:             }">${escapeHtml(s.name || s.code || String(s.id))}</button>`
   171:         )
   172:         .join("")
   173:     : "";
   174: 
   175:   const objectsTotal =
   176:     (o.stats && Number.isFinite(o.stats.total) && o.stats.total) ||
   177:     (Array.isArray(o.facilities) ? o.facilities.length : facilitiesCountRaw) ||
   178:     facilitiesCount;
   179: 
   180:   return `
   181:   <div class="orgp" data-id="${o.id ?? fallbackOrg?.id}">
   182:     <div class="orgp__head">
   183:       <div class="orgp__titleLine">
   184:         <span class="pill ${statusPill(status)}">${escapeHtml(status)}</span>
   185:         <b class="orgp__name">${escapeHtml(name)}</b>
   186:       </div>
   187:       <div class="orgp__crumbs">${crumbHtml}</div>
   188:     </div>
   189: 
   190:     <div class="orgp__quick">
   191:       <div class="q-item"><span class="lbl">Kod</span><b>${escapeHtml(
   192:         o.code ?? "—"
   193:       )}</b></div>
   194:       <div class="q-item"><span class="lbl">Lokatsiya</span><b>${lat ?? "—"}, ${
   195:     lng ?? "—"
   196:   } (z${zoom})</b></div>
   197:       <div class="q-item"><span class="lbl">Inshootlar</span><b>${objectsTotal}</b></div>
   198:     </div>
   199: 
   200:     ${
   201:       typeItems && typeItems.length
   202:         ? `<div class="orgp__dist"><div class="dist-head">Turlar</div><div class="dist-list">${typeItems}</div></div>`
   203:         : ""
   204:     }
   205:     ${
   206:       statusItems && statusItems.length
   207:         ? `<div class="orgp__statuses">${statusItems}</div>`
   208:         : ""
   209:     }
   210: 
   211:     ${
   212:       sibHtml
   213:         ? `<div class="orgp__siblings"><span class="lbl">Boshqa bo‘limlar:</span>${sibHtml}</div>`
   214:         : ""
   215:     }
   216: 
   217:     <div class="orgp__actions">
   218:       <button class="btn ghost" data-act="center">Markazga ol</button>
   219:       <button class="btn" data-act="table">Jadvalda ko‘rish</button>
   220:       <button class="btn primary" data-act="edit">Tahrirlash</button>
   221:     </div>
   222:   </div>`;
   223: }
   224: 
   225: /* ----------------- actions wiring ----------------- */
   226: function wireActions(rootEl, { map, info, org, onEdit, onOpenTable }) {
   227:   if (!rootEl) return;
   228:   const id = info?.id ?? org?.id;
   229:   const qs = (sel) => rootEl.querySelector(sel);
   230: 
   231:   const getLatLng = () => {
   232:     const lat = asNum(info?.lat ?? org?.lat);
   233:     const lng = asNum(info?.lng ?? org?.lng);
   234:     return lat != null && lng != null ? [lat, lng] : null;
   235:   };
   236: 
   237:   qs('[data-act="center"]')?.addEventListener("click", () => {
   238:     const ll = getLatLng();
   239:     const zoom = asNum(info?.zoom ?? org?.zoom) ?? 14;
   240:     if (map && ll) map.setView(ll, zoom, { animate: true });
   241:   });
   242: 
   243:   qs('[data-act="table"]')?.addEventListener("click", () => {
   244:     if (typeof onOpenTable === "function") onOpenTable(id);
   245:     else
   246:       window.dispatchEvent(
   247:         new CustomEvent("org:open-table", { detail: { id } })
   248:       );
   249:   });
   250: 
   251:   qs('[data-act="edit"]')?.addEventListener("click", () => {
   252:     if (typeof onEdit === "function") onEdit(id);
   253:     else window.dispatchEvent(new CustomEvent("org:edit", { detail: { id } }));
   254:   });
   255: }
   256: 
   257: /* ---------------- helpers ---------------- */
   258: function statusPill(s) {
   259:   const v = String(s || "").toLowerCase();
   260:   if (v.includes("inactive") || v.includes("blok")) return "danger";
   261:   if (v.includes("pending")) return "warn";
   262:   return "ok";
   263: }
   264: function numOrDash(n) {
   265:   return Number.isFinite(n) ? n : "—";
   266: }
   267: function asNum(v) {
   268:   const n = Number(v);
   269:   return Number.isFinite(n) ? n : null;
   270: }
   271: function escapeHtml(s) {
   272:   return String(s ?? "")
   273:     .replace(/&/g, "&amp;")
   274:     .replace(/</g, "&lt;")
   275:     .replace(/>/g, "&gt;");
   276: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\OrgTreePanel.css
SIZE: 4801 bytes
================================================================================
     1: /* src/components/map/OrgTreePanel.css */
     2: 
     3: /* Tema o'zgaruvchilari (fallback bilan) */
     4: .org-tree-card {
     5:   --otp-bg: var(--bg, #ffffff);
     6:   --otp-card: var(--card, #ffffff);
     7:   --otp-fg: var(--text, #0f172a);
     8:   --otp-muted: var(--muted, #6b7280);
     9:   --otp-border: var(--border, #e5e7eb);
    10:   --otp-row: color-mix(in srgb, var(--otp-card) 92%, transparent);
    11: 
    12:   position: absolute;
    13:   top: 12px;
    14:   left: 12px;
    15:   z-index: 500;
    16:   width: 340px;
    17:   max-height: calc(100vh - 24px);
    18:   display: flex;
    19:   flex-direction: column;
    20:   overflow: hidden;
    21: 
    22:   background: var(--otp-card);
    23:   color: var(--otp-fg);
    24:   border: 1px solid var(--otp-border);
    25:   border-radius: 12px;
    26:   box-shadow: 0 12px 32px rgba(0, 0, 0, 0.1);
    27: }
    28: 
    29: .org-tree-card.is-hidden {
    30:   display: none;
    31: }
    32: 
    33: .org-tree-card__header {
    34:   display: flex;
    35:   align-items: center;
    36:   justify-content: space-between;
    37:   gap: 8px;
    38:   padding: 10px 12px;
    39:   border-bottom: 1px solid var(--otp-border);
    40: }
    41: 
    42: .otp-title {
    43:   font-weight: 800;
    44: }
    45: 
    46: .org-tree-search-wrap {
    47:   position: relative;
    48:   flex: 1;
    49:   display: flex;
    50:   gap: 6px;
    51:   align-items: center;
    52:   max-width: 200px;
    53: }
    54: 
    55: .org-tree-search {
    56:   width: 100%;
    57:   height: 34px;
    58:   padding: 0 30px 0 10px;
    59:   border: 1px solid var(--otp-border);
    60:   background: var(--otp-card);
    61:   color: var(--otp-fg);
    62:   border-radius: 10px;
    63:   outline: none;
    64: }
    65: 
    66: .org-tree-search::placeholder {
    67:   color: var(--otp-muted);
    68: }
    69: 
    70: .org-tree-search__clear {
    71:   position: absolute;
    72:   right: 6px;
    73:   width: 22px;
    74:   height: 22px;
    75:   line-height: 18px;
    76:   text-align: center;
    77:   border: 1px solid var(--otp-border);
    78:   background: var(--otp-row);
    79:   color: var(--otp-fg);
    80:   border-radius: 999px;
    81:   cursor: pointer;
    82: }
    83: 
    84: .org-tree-card__body {
    85:   padding: 10px 12px;
    86:   overflow: auto;
    87: }
    88: 
    89: .org-tree-card__body--border-top {
    90:   border-top: 1px solid var(--otp-border);
    91: }
    92: 
    93: .org-tree-card__hint {
    94:   padding: 8px 12px;
    95:   border-top: 1px solid var(--otp-border);
    96:   background: var(--otp-row);
    97: }
    98: 
    99: .otp-muted {
   100:   font-size: 12.5px;
   101:   color: var(--otp-muted);
   102: }
   103: 
   104: .otp-section-title {
   105:   font-weight: 700;
   106:   margin-bottom: 8px;
   107: }
   108: 
   109: .otp-actions {
   110:   display: flex;
   111:   gap: 8px;
   112:   flex-wrap: wrap;
   113:   margin-bottom: 8px;
   114: }
   115: 
   116: .otp-btn {
   117:   height: 34px;
   118:   padding: 0 12px;
   119:   border-radius: 10px;
   120:   border: 1px solid var(--otp-border);
   121:   background: var(--otp-card);
   122:   color: var(--otp-fg);
   123:   cursor: pointer;
   124: }
   125: .otp-btn--soft {
   126:   background: var(--otp-row);
   127: }
   128: 
   129: .otp-grid {
   130:   display: grid;
   131:   grid-template-columns: 1fr 1fr;
   132:   gap: 6px;
   133: }
   134: 
   135: .otp-check {
   136:   display: flex;
   137:   align-items: center;
   138:   gap: 8px;
   139:   border: 1px solid var(--otp-border);
   140:   background: var(--otp-card);
   141:   border-radius: 10px;
   142:   padding: 8px 10px;
   143:   font-size: 13px;
   144: }
   145: .otp-check--dim {
   146:   opacity: 0.85;
   147: }
   148: 
   149: .otp-toggle {
   150:   display: flex;
   151:   align-items: center;
   152:   gap: 8px;
   153:   margin-top: 10px;
   154:   font-size: 13px;
   155: }
   156: 
   157: .otp-foot {
   158:   margin-top: 6px;
   159:   font-size: 12.5px;
   160:   color: var(--otp-muted);
   161: }
   162: 
   163: /* BBOX chiroyli ko'rinish */
   164: .otp-bbox {
   165:   display: flex;
   166:   flex-wrap: wrap;
   167:   gap: 6px;
   168:   align-items: center;
   169:   max-width: 100%;
   170: }
   171: .otp-pill {
   172:   display: inline-flex;
   173:   align-items: center;
   174:   gap: 6px;
   175:   padding: 2px 8px;
   176:   border-radius: 8px;
   177:   border: 1px solid var(--otp-border);
   178:   background: var(--otp-row);
   179:   font-family: ui-monospace, SFMono-Regular, Menlo, monospace;
   180:   font-size: 12px;
   181:   white-space: nowrap;
   182: }
   183: .otp-pill strong {
   184:   font-weight: 600;
   185: }
   186: .otp-arrow {
   187:   font-size: 12px;
   188:   color: var(--otp-muted);
   189: }
   190: 
   191: /* rc-tree rang mosligi (light/dark) */
   192: .org-tree-card .rc-tree {
   193:   color: var(--otp-fg);
   194: }
   195: .org-tree-card .rc-tree-treenode .rc-tree-node-content-wrapper {
   196:   color: var(--otp-fg);
   197: }
   198: .org-tree-card .rc-tree-treenode .rc-tree-node-content-wrapper:hover {
   199:   background: var(--otp-row);
   200: }
   201: .org-tree-card .rc-tree-treenode-selected .rc-tree-node-content-wrapper {
   202:   background: color-mix(in srgb, var(--otp-row) 70%, transparent);
   203:   border-radius: 8px;
   204: }
   205: .org-tree-card .rc-tree-checkbox-inner {
   206:   border-color: var(--otp-border);
   207:   background: var(--otp-card);
   208: }
   209: .org-tree-card .rc-tree-checkbox-checked .rc-tree-checkbox-inner,
   210: .org-tree-card .rc-tree-checkbox-indeterminate .rc-tree-checkbox-inner {
   211:   background: color-mix(in srgb, var(--otp-fg) 10%, var(--otp-card));
   212:   border-color: var(--otp-fg);
   213: }
   214: .org-tree-card .rc-tree-switcher {
   215:   color: var(--otp-muted);
   216: }
   217: 
   218: /* DARK THEME OVERRIDES */
   219: html.dark .org-tree-card,
   220: [data-theme="dark"] .org-tree-card {
   221:   --otp-bg: var(--bg, #0b1220);
   222:   --otp-card: var(--card, #0f172a);
   223:   --otp-fg: var(--text, #e5e7eb);
   224:   --otp-muted: var(--muted, #94a3b8);
   225:   --otp-border: var(--border, #223046);
   226:   --otp-row: rgba(255, 255, 255, 0.05);
   227: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\OrgTreePanel.jsx
SIZE: 8643 bytes
================================================================================
     1: //src/components/map/OrgTreePanel.jsx
     2: import Tree from "rc-tree";
     3: import "rc-tree/assets/index.css";
     4: import "./OrgTreePanel.css";
     5: import useDebouncedValue from "../../hooks/useDebouncedValue";
     6: 
     7: /** Faqat ruxsat etilgan 11 yo‘nalish uchun o‘zbekcha yorliqlar (fallback) */
     8: const DEFAULT_TYPE_LABELS = {
     9:   GREENHOUSE: "Issiqxona",
    10:   POULTRY_MEAT: "Tovuqxona (go‘sht)",
    11:   POULTRY_EGG: "Tovuqxona (tuxum)",
    12:   TURKEY: "Kurkaxona",
    13:   COWSHED: "Molxona",
    14:   SHEEPFOLD: "Qo‘yxona",
    15:   WORKSHOP_SAUSAGE: "Ishlab chiqarish sexi (kolbasa)",
    16:   WORKSHOP_COOKIE: "Ishlab chiqarish sexi (pechenye)",
    17:   AUX_LAND: "Yordamchi xo‘jalik yeri",
    18:   BORDER_LAND: "Chegara oldi yeri",
    19:   FISHPOND: "Baliqchilik ko‘li",
    20: };
    21: 
    22: /** UI’da ko‘rsatish tartibi */
    23: const FRONT_ORDER = [
    24:   "GREENHOUSE",
    25:   "POULTRY_MEAT",
    26:   "POULTRY_EGG",
    27:   "TURKEY",
    28:   "COWSHED",
    29:   "SHEEPFOLD",
    30:   "WORKSHOP_SAUSAGE",
    31:   "WORKSHOP_COOKIE",
    32:   "AUX_LAND",
    33:   "BORDER_LAND",
    34:   "FISHPOND",
    35: ];
    36: 
    37: /** BBOX’ni chiroyli ko‘rinishda chiqarish (ichkarida o‘raladi, overflow yo‘q) */
    38: function BboxPretty({ bbox }) {
    39:   const chip = {
    40:     display: "inline-flex",
    41:     alignItems: "center",
    42:     gap: 6,
    43:     padding: "2px 8px",
    44:     borderRadius: 999,
    45:     border: "1px solid var(--db-border, #e5e7eb)",
    46:     background: "var(--db-card, #fff)",
    47:     color: "var(--db-fg, #0f172a)",
    48:     whiteSpace: "nowrap",
    49:   };
    50:   const wrap = {
    51:     display: "flex",
    52:     alignItems: "center",
    53:     gap: 8,
    54:     flexWrap: "wrap",
    55:     lineHeight: 1.4,
    56:   };
    57:   const arrow = { opacity: 0.7 };
    58: 
    59:   const fmt = (v) =>
    60:     Number.isFinite(Number(v)) ? Number(v).toFixed(5) : String(v ?? "—");
    61: 
    62:   let arr = Array.isArray(bbox) ? bbox : null;
    63:   if (!arr && typeof bbox === "string") {
    64:     arr = bbox
    65:       .split(/[,\s]+/)
    66:       .map((x) => x.trim())
    67:       .filter(Boolean)
    68:       .map(Number);
    69:   }
    70:   if (!arr || arr.length !== 4) {
    71:     return <span className="otp-muted">Ko‘rinish chegarasi: —</span>;
    72:   }
    73: 
    74:   const [minLng, minLat, maxLng, maxLat] = arr;
    75:   const swLon = fmt(minLng);
    76:   const swLat = fmt(minLat);
    77:   const neLon = fmt(maxLng);
    78:   const neLat = fmt(maxLat);
    79: 
    80:   return (
    81:     <div className="otp-bbox" style={wrap}>
    82:       <span className="otp-muted">Ko‘rinish (BBOX):</span>
    83:       <span
    84:         className="otp-pill"
    85:         style={chip}
    86:         title={`Janubi-g‘arb: ${swLon}, ${swLat}`}
    87:       >
    88:         <strong>Janubi-g‘arb</strong>
    89:         <span>
    90:           ({swLon}, {swLat})
    91:         </span>
    92:       </span>
    93:       <span className="otp-arrow" style={arrow}>
    94:         →
    95:       </span>
    96:       <span
    97:         className="otp-pill"
    98:         style={chip}
    99:         title={`Shimoli-sharq: ${neLon}, ${neLat}`}
   100:       >
   101:         <strong>Shimoli-sharq</strong>
   102:         <span>
   103:           ({neLon}, {neLat})
   104:         </span>
   105:       </span>
   106:     </div>
   107:   );
   108: }
   109: 
   110: export default function OrgTreePanel({
   111:   rcData,
   112:   checkedKeys,
   113:   selectedKeys,
   114:   expandedKeys,
   115:   onTreeExpand,
   116:   onTreeCheck,
   117:   onTreeSelect,
   118:   searchInput,
   119:   setSearchInput,
   120:   onEnterSearch,
   121:   onClearSearch,
   122:   typeFilter,
   123:   setTypeFilter,
   124:   showPolys,
   125:   setShowPolys,
   126:   bbox,
   127:   facilitiesCount,
   128:   selectedOrgId,
   129:   hide = false,
   130:   typeLabels, // ✅ MapView’dan kelgan o‘zbekcha yorliqlar (ixtiyoriy)
   131:   onRequestHide, // ✅ Panelni headerdan yopish uchun
   132: }) {
   133:   const LABELS = typeLabels || DEFAULT_TYPE_LABELS;
   134: 
   135:   const allKeys = Object.keys(typeFilter || {});
   136:   const visibleKeys = FRONT_ORDER.filter((k) => allKeys.includes(k));
   137:   const extraKeys = allKeys.filter((k) => !FRONT_ORDER.includes(k));
   138: 
   139:   const toggleType = (k, val) =>
   140:     setTypeFilter((s) => ({ ...s, [k]: val ?? !s[k] }));
   141: 
   142:   const turnOnAll = () => {
   143:     setTypeFilter((s) => {
   144:       const next = { ...s };
   145:       visibleKeys.forEach((k) => (next[k] = true));
   146:       return next;
   147:     });
   148:   };
   149:   const turnOffAll = () => {
   150:     setTypeFilter((s) => {
   151:       const next = { ...s };
   152:       visibleKeys.forEach((k) => (next[k] = false));
   153:       return next;
   154:     });
   155:   };
   156: 
   157:   const debouncedSearch = useDebouncedValue(searchInput, 400);
   158: 
   159:   return (
   160:     <div className={`org-tree-card ${hide ? "is-hidden" : ""}`}>
   161:       {/* Sarlavha + qidiruv */}
   162:       <div className="org-tree-card__header">
   163:         <span className="otp-title">Tashkilot tuzilmasi</span>
   164: 
   165:         <div className="org-tree-search-wrap">
   166:           <input
   167:             className="org-tree-search"
   168:             type="text"
   169:             placeholder="Tashkilot nomi bo‘yicha qidirish…"
   170:             value={searchInput}
   171:             onChange={(e) => setSearchInput(e.target.value)}
   172:             onKeyDown={(e) => {
   173:               if (e.key === "Escape") onClearSearch();
   174:               if (e.key === "Enter") onEnterSearch();
   175:             }}
   176:             aria-label="Qidirish"
   177:           />
   178:           {searchInput && (
   179:             <button
   180:               className="org-tree-search__clear"
   181:               onClick={onClearSearch}
   182:               aria-label="Qidiruvni tozalash"
   183:               title="Tozalash"
   184:             >
   185:               ×
   186:             </button>
   187:           )}
   188:         </div>
   189: 
   190:         {/* ✅ Headerdan panelni tezda yopish */}
   191:         <button
   192:           className="otp-btn"
   193:           type="button"
   194:           onClick={() => onRequestHide?.()}
   195:           title="Panelni yashirish (T)"
   196:           style={{ marginLeft: 6 }}
   197:         >
   198:           Yashirish
   199:         </button>
   200:       </div>
   201: 
   202:       {/* Daraxt */}
   203:       <div className="org-tree-card__body">
   204:         {rcData?.length ? (
   205:           <Tree
   206:             checkable
   207:             selectable
   208:             treeData={rcData}
   209:             checkedKeys={checkedKeys}
   210:             selectedKeys={selectedKeys}
   211:             expandedKeys={expandedKeys}
   212:             onExpand={onTreeExpand}
   213:             onCheck={(k) => onTreeCheck(Array.isArray(k) ? k : k.checked)}
   214:             onSelect={(k) => onTreeSelect(k)}
   215:             defaultExpandAll
   216:             autoExpandParent
   217:             virtual={false}
   218:           />
   219:         ) : (
   220:           <div className="otp-muted">Ma’lumot topilmadi</div>
   221:         )}
   222:       </div>
   223: 
   224:       {/* Izoh / holat */}
   225:       {/* Turlar filtri */}
   226:       <div className="org-tree-card__body org-tree-card__body--border-top">
   227:         <div className="otp-section-title">Obyekt turlari</div>
   228: 
   229:         <div className="otp-actions">
   230:           <button type="button" className="otp-btn" onClick={turnOnAll}>
   231:             Barchasini yoqish
   232:           </button>
   233:           <button
   234:             type="button"
   235:             className="otp-btn otp-btn--soft"
   236:             onClick={turnOffAll}
   237:           >
   238:             Barchasini o‘chirish
   239:           </button>
   240:         </div>
   241: 
   242:         <div className="otp-grid">
   243:           {visibleKeys.map((k) => (
   244:             <label key={k} className="otp-check">
   245:               <input
   246:                 type="checkbox"
   247:                 checked={!!typeFilter[k]}
   248:                 onChange={(e) => toggleType(k, e.target.checked)}
   249:               />
   250:               <span>{LABELS[k] || k}</span>
   251:             </label>
   252:           ))}
   253: 
   254:           {extraKeys.length > 0 &&
   255:             extraKeys.map((k) => (
   256:               <label key={`extra_${k}`} className="otp-check otp-check--dim">
   257:                 <input
   258:                   type="checkbox"
   259:                   checked={!!typeFilter[k]}
   260:                   onChange={(e) => toggleType(k, e.target.checked)}
   261:                 />
   262:                 <span>{k}</span>
   263:               </label>
   264:             ))}
   265:         </div>
   266: 
   267:         <div className="otp-toggle">
   268:           <input
   269:             id="show-polys"
   270:             type="checkbox"
   271:             checked={showPolys}
   272:             onChange={(e) => setShowPolys(e.target.checked)}
   273:           />
   274:           <label htmlFor="show-polys">Poligonlarni ko‘rsatish</label>
   275:         </div>
   276: 
   277:         <div className="otp-foot">
   278:           Belgilangan bo‘limlar:{" "}
   279:           {Array.isArray(checkedKeys) ? checkedKeys.length : 0} ta
   280:           {selectedOrgId != null ? (
   281:             <> • Tanlangan ID: {String(selectedOrgId)}</>
   282:           ) : null}
   283:         </div>
   284: 
   285:         {/* Izoh / holat pastga ko‘chirildi */}
   286:         <div className="org-tree-card__hint" style={{ marginTop: 8 }}>
   287:           <div className="otp-muted">
   288:             ✔ Poligonlar turiga ko‘ra ranglanadi, markazida ikon ko‘rinadi.
   289:           </div>
   290:           <BboxPretty bbox={bbox} />
   291:           <div className="otp-muted">
   292:             Xaritadagi obyektlar: {facilitiesCount ?? 0} ta
   293:           </div>
   294:         </div>
   295:       </div>
   296:     </div>
   297:   );
   298: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\ViewportWatcher.jsx
SIZE: 750 bytes
================================================================================
     1: // src/components/map/ViewportWatcher.jsx
     2: import { useEffect } from "react";
     3: import { useMap } from "react-leaflet";
     4: 
     5: export default function ViewportWatcher({ onBboxChange }) {
     6:   const map = useMap();
     7: 
     8:   useEffect(() => {
     9:     if (!map || typeof onBboxChange !== "function") return;
    10: 
    11:     const toBBox = (b) =>
    12:       `${b.getWest()},${b.getSouth()},${b.getEast()},${b.getNorth()}`;
    13:     const update = () => onBboxChange(toBBox(map.getBounds()));
    14: 
    15:     // Xarita tayyor bo‘lgach bir marta update qilamiz va keyin moveend ni tinglaymiz
    16:     map.whenReady(() => {
    17:       update();
    18:       map.on("moveend", update);
    19:     });
    20: 
    21:     return () => {
    22:       map.off("moveend", update);
    23:     };
    24:   }, [map, onBboxChange]);
    25: 
    26:   return null;
    27: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\map\ZoomIndicator.jsx
SIZE: 1020 bytes
================================================================================
     1: import { useEffect } from "react";
     2: import { useMap } from "react-leaflet";
     3: import L from "leaflet";
     4: 
     5: /** Past o‘ngda zoom darajasini ko‘rsatuvchi engil control */
     6: export default function ZoomIndicator({ position = "bottomright" }) {
     7:   const map = useMap();
     8: 
     9:   useEffect(() => {
    10:     if (!map) return;
    11: 
    12:     const ZoomCtrl = L.Control.extend({
    13:       options: { position },
    14:       onAdd() {
    15:         const div = L.DomUtil.create("div", "leaflet-bar");
    16:         div.style.padding = "0 8px";
    17:         div.style.lineHeight = "28px";
    18:         div.style.height = "28px";
    19:         div.style.fontWeight = "600";
    20:         div.style.userSelect = "none";
    21:         const update = () => {
    22:           div.textContent = `Zoom: ${map.getZoom()}`;
    23:         };
    24:         update();
    25:         map.on("zoomend", update);
    26:         return div;
    27:       },
    28:     });
    29: 
    30:     const ctrl = new ZoomCtrl();
    31:     map.addControl(ctrl);
    32:     return () => {
    33:       map.removeControl(ctrl);
    34:     };
    35:   }, [map, position]);
    36: 
    37:   return null;
    38: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\org\OrgModals.jsx
SIZE: 8194 bytes
================================================================================
     1: import { useEffect, useRef, useState } from "react";
     2: import Modal from "../ui/Modal"; // <- org/ dan ui/ ga nisbiy yo'l
     3: import css from "./OrgModal.module.scss";
     4: 
     5: // Sizdagi API: /api/orgs/**
     6: import { createOrg, updateOrg, deleteOrg } from "../../api/org";
     7: 
     8: function useForm(init) {
     9:   const [v, setV] = useState(init);
    10:   const onChange = (e) =>
    11:     setV((s) => ({ ...s, [e.target.name]: e.target.value }));
    12:   const set = (patch) => setV((s) => ({ ...s, ...patch }));
    13:   return { v, onChange, set };
    14: }
    15: 
    16: /** + Ildiz */
    17: export function AddRootModal({ open, onClose, onDone }) {
    18:   const { v, onChange, set } = useForm({ name: "", code: "" });
    19:   const [loading, setLoading] = useState(false);
    20:   const [err, setErr] = useState("");
    21:   const focusRef = useRef(null);
    22: 
    23:   useEffect(() => {
    24:     if (open) {
    25:       set({ name: "", code: "" });
    26:       setErr("");
    27:     }
    28:   }, [open, set]);
    29: 
    30:   const submit = async () => {
    31:     if (!v.name.trim()) {
    32:       setErr("Nomi majburiy");
    33:       return;
    34:     }
    35:     setLoading(true);
    36:     setErr("");
    37:     try {
    38:       await createOrg({
    39:         name: v.name.trim(),
    40:         code: v.code?.trim() || null,
    41:         parentId: null,
    42:       });
    43:       onDone?.();
    44:       onClose?.();
    45:     } catch (e) {
    46:       setErr(e?.message || "Saqlashda xatolik");
    47:     } finally {
    48:       setLoading(false);
    49:     }
    50:   };
    51: 
    52:   return (
    53:     <Modal
    54:       open={open}
    55:       onClose={onClose}
    56:       title="+ Ildiz tashkilot"
    57:       initialFocusRef={focusRef}
    58:     >
    59:       <div className={css.form}>
    60:         <label className={css.label}>Nomi</label>
    61:         <input
    62:           ref={focusRef}
    63:           name="name"
    64:           value={v.name}
    65:           onChange={onChange}
    66:           className={css.input}
    67:           placeholder="Masalan: Viloyat boshqarmasi"
    68:         />
    69: 
    70:         <label className={css.label}>Kodi (ixtiyoriy)</label>
    71:         <input
    72:           name="code"
    73:           value={v.code}
    74:           onChange={onChange}
    75:           className={css.input}
    76:           placeholder="ABC-01"
    77:         />
    78: 
    79:         {err && <div className={css.error}>{err}</div>}
    80: 
    81:         <div className={css.actions}>
    82:           <button className={`btn ${css.btn}`} onClick={onClose}>
    83:             Bekor qilish
    84:           </button>
    85:           <button
    86:             className={`btn primary ${css.btn}`}
    87:             onClick={submit}
    88:             disabled={loading}
    89:           >
    90:             {loading ? "Saqlanmoqda…" : "Saqlash"}
    91:           </button>
    92:         </div>
    93:       </div>
    94:     </Modal>
    95:   );
    96: }
    97: 
    98: /** + Child */
    99: export function AddChildModal({ open, onClose, onDone, parent }) {
   100:   const { v, onChange, set } = useForm({ name: "", code: "" });
   101:   const [loading, setLoading] = useState(false);
   102:   const [err, setErr] = useState("");
   103:   const focusRef = useRef(null);
   104: 
   105:   useEffect(() => {
   106:     if (open) {
   107:       set({ name: "", code: "" });
   108:       setErr("");
   109:     }
   110:   }, [open, set]);
   111: 
   112:   const submit = async () => {
   113:     if (!v.name.trim()) {
   114:       setErr("Nomi majburiy");
   115:       return;
   116:     }
   117:     setLoading(true);
   118:     setErr("");
   119:     try {
   120:       await createOrg({
   121:         name: v.name.trim(),
   122:         code: v.code?.trim() || null,
   123:         parentId: parent?.id,
   124:       });
   125:       onDone?.();
   126:       onClose?.();
   127:     } catch (e) {
   128:       setErr(e?.message || "Saqlashda xatolik");
   129:     } finally {
   130:       setLoading(false);
   131:     }
   132:   };
   133: 
   134:   return (
   135:     <Modal
   136:       open={open}
   137:       onClose={onClose}
   138:       title="+ Child bo‘lim"
   139:       initialFocusRef={focusRef}
   140:     >
   141:       <div className={css.form}>
   142:         <div className={css.hint}>
   143:           Ota bo‘lim: <b>{parent?.name ?? "—"}</b>
   144:         </div>
   145: 
   146:         <label className={css.label}>Nomi</label>
   147:         <input
   148:           ref={focusRef}
   149:           name="name"
   150:           value={v.name}
   151:           onChange={onChange}
   152:           className={css.input}
   153:           placeholder="Masalan: Tuman bo‘limi"
   154:         />
   155: 
   156:         <label className={css.label}>Kodi (ixtiyoriy)</label>
   157:         <input
   158:           name="code"
   159:           value={v.code}
   160:           onChange={onChange}
   161:           className={css.input}
   162:           placeholder="TMN-02"
   163:         />
   164: 
   165:         {err && <div className={css.error}>{err}</div>}
   166: 
   167:         <div className={css.actions}>
   168:           <button className={`btn ${css.btn}`} onClick={onClose}>
   169:             Bekor qilish
   170:           </button>
   171:           <button
   172:             className={`btn primary ${css.btn}`}
   173:             onClick={submit}
   174:             disabled={loading}
   175:           >
   176:             {loading ? "Saqlanmoqda…" : "Saqlash"}
   177:           </button>
   178:         </div>
   179:       </div>
   180:     </Modal>
   181:   );
   182: }
   183: 
   184: /** Edit */
   185: export function EditOrgModal({ open, onClose, onDone, org }) {
   186:   const { v, onChange, set } = useForm({ name: "", code: "" });
   187:   const [loading, setLoading] = useState(false);
   188:   const [err, setErr] = useState("");
   189:   const focusRef = useRef(null);
   190: 
   191:   useEffect(() => {
   192:     if (open && org) {
   193:       set({ name: org.name ?? "", code: org.code ?? "" });
   194:       setErr("");
   195:     }
   196:   }, [open, org, set]);
   197: 
   198:   const submit = async () => {
   199:     if (!v.name.trim()) {
   200:       setErr("Nomi majburiy");
   201:       return;
   202:     }
   203:     setLoading(true);
   204:     setErr("");
   205:     try {
   206:       await updateOrg(org.id, {
   207:         name: v.name.trim(),
   208:         code: v.code?.trim() || null,
   209:       });
   210:       onDone?.();
   211:       onClose?.();
   212:     } catch (e) {
   213:       setErr(e?.message || "Saqlashda xatolik");
   214:     } finally {
   215:       setLoading(false);
   216:     }
   217:   };
   218: 
   219:   return (
   220:     <Modal
   221:       open={open}
   222:       onClose={onClose}
   223:       title="Tashkilotni tahrirlash"
   224:       initialFocusRef={focusRef}
   225:     >
   226:       <div className={css.form}>
   227:         <label className={css.label}>Nomi</label>
   228:         <input
   229:           ref={focusRef}
   230:           name="name"
   231:           value={v.name}
   232:           onChange={onChange}
   233:           className={css.input}
   234:           placeholder="Nomi"
   235:         />
   236: 
   237:         <label className={css.label}>Kodi (ixtiyoriy)</label>
   238:         <input
   239:           name="code"
   240:           value={v.code}
   241:           onChange={onChange}
   242:           className={css.input}
   243:           placeholder="Kodi"
   244:         />
   245: 
   246:         {err && <div className={css.error}>{err}</div>}
   247: 
   248:         <div className={css.actions}>
   249:           <button className={`btn ${css.btn}`} onClick={onClose}>
   250:             Bekor qilish
   251:           </button>
   252:           <button
   253:             className={`btn primary ${css.btn}`}
   254:             onClick={submit}
   255:             disabled={loading}
   256:           >
   257:             {loading ? "Saqlanmoqda…" : "Saqlash"}
   258:           </button>
   259:         </div>
   260:       </div>
   261:     </Modal>
   262:   );
   263: }
   264: 
   265: /** Delete confirm */
   266: export function DeleteOrgModal({ open, onClose, onDone, org, cascadeInfo }) {
   267:   const [loading, setLoading] = useState(false);
   268:   const [err, setErr] = useState("");
   269: 
   270:   const submit = async () => {
   271:     setLoading(true);
   272:     setErr("");
   273:     try {
   274:       await deleteOrg(org.id);
   275:       onDone?.();
   276:       onClose?.();
   277:     } catch (e) {
   278:       setErr(e?.message || "O‘chirishda xatolik");
   279:     } finally {
   280:       setLoading(false);
   281:     }
   282:   };
   283: 
   284:   return (
   285:     <Modal
   286:       open={open}
   287:       onClose={onClose}
   288:       title="O‘chirishni tasdiqlash"
   289:       size="sm"
   290:     >
   291:       <div className={css.form}>
   292:         <div className={css.confirm}>
   293:           Rostdan ham <b>{org?.name}</b> ni o‘chirmoqchimisiz?
   294:         </div>
   295:         {cascadeInfo && (
   296:           <div className={css.hint}>
   297:             Bo‘ysunuvi: <b>{cascadeInfo.childrenCount ?? 0}</b> · Inshootlar:{" "}
   298:             <b>{cascadeInfo.facilitiesCount ?? 0}</b>
   299:           </div>
   300:         )}
   301:         {err && <div className={css.error}>{err}</div>}
   302:         <div className={css.actions}>
   303:           <button className={`btn ${css.btn}`} onClick={onClose}>
   304:             Bekor qilish
   305:           </button>
   306:           <button
   307:             className={`btn danger ${css.btn}`}
   308:             onClick={submit}
   309:             disabled={loading}
   310:           >
   311:             {loading ? "O‘chirilmoqda…" : "Ha, o‘chirish"}
   312:           </button>
   313:         </div>
   314:       </div>
   315:     </Modal>
   316:   );
   317: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\org\OrgModals.module.scss
SIZE: 956 bytes
================================================================================
     1: .form {
     2:   display: grid;
     3:   gap: 10px;
     4: }
     5: .label {
     6:   font-size: 12px;
     7:   color: var(--muted);
     8: }
     9: .input {
    10:   height: 40px;
    11:   border: 1px solid var(--border);
    12:   background: var(--card);
    13:   color: var(--text);
    14:   border-radius: 12px;
    15:   padding: 0 12px;
    16:   outline: none;
    17: }
    18: .actions {
    19:   display: flex;
    20:   gap: 8px;
    21:   justify-content: flex-end;
    22:   padding-top: 4px;
    23: }
    24: .btn {
    25:   height: 38px;
    26:   padding: 0 14px;
    27:   border-radius: 12px;
    28:   cursor: pointer;
    29:   border: 1px solid var(--border);
    30:   background: var(--row, color-mix(in srgb, var(--card) 92%, transparent));
    31:   color: var(--text);
    32: }
    33: .btnPrimary {
    34:   background: linear-gradient(135deg, var(--brand), var(--brand-2));
    35:   border: none;
    36:   color: #fff;
    37: }
    38: .btnDanger {
    39:   background: #ef4444;
    40:   color: #fff;
    41:   border: 1px solid #ef4444;
    42: }
    43: .error {
    44:   color: #b91c1c;
    45:   font-size: 12px;
    46: }
    47: .hint {
    48:   color: var(--muted);
    49:   font-size: 12px;
    50: }
    51: .confirm {
    52:   font-size: 14px;
    53: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\org\OrgTable.jsx
SIZE: 28782 bytes
================================================================================
     1: import { useEffect, useMemo, useState, useRef } from "react";
     2: import { debugError, debugWarn } from "../../utils/debug";
     3: import { toast } from "react-toastify";
     4: import Modal from "../ui/Modal";
     5: import MapPickerModal from "../map/MapPickerModal.jsx";
     6: import {
     7:   listOrgsPage,
     8:   getOrgTree,
     9:   createOrg,
    10:   updateOrg,
    11:   moveOrg,
    12:   deleteOrg,
    13:   getOrg,
    14: } from "../../api/org";
    15: import "../../styles/_org_table.scss";
    16: 
    17: /* ---------- Helpers ---------- */
    18: 
    19: function flattenTree(nodes, parentId = null, depth = 0, out = []) {
    20:   (nodes || []).forEach((n) => {
    21:     const id = Number(n.key);
    22:     out.push({ id, name: n.title, depth, parentId, raw: n });
    23:     if (n.children?.length) flattenTree(n.children, id, depth + 1, out);
    24:   });
    25:   return out;
    26: }
    27: 
    28: function toNumberOrNull(v) {
    29:   if (v === "" || v === null || v === undefined) return null;
    30:   const num = Number(v);
    31:   return Number.isFinite(num) ? num : null;
    32: }
    33: 
    34: // Backend turli DTO nomlari uchun normalization
    35: function normalizeOrg(o = {}) {
    36:   // Agar javob ichida nested org bo'lsa, shundan maydonlarni olamiz
    37:   const src = o && o.org && typeof o.org === "object" ? { ...o, ...o.org } : o;
    38:   return {
    39:     id: src.id ?? src.orgId ?? src.key ?? null,
    40:     name: src.name ?? src.title ?? src.orgName ?? "",
    41:     code: src.code ?? src.orgCode ?? "",
    42:     parentId: src.parentId ?? src.parent_id ?? src.parent ?? null,
    43:     lat: src.lat ?? src.latitude ?? "",
    44:     lng: src.lng ?? src.longitude ?? "",
    45:     zoom: src.zoom ?? src.mapZoom ?? "",
    46:     sortOrder: src.sortOrder ?? src.orderIndex ?? src.order ?? null,
    47:   };
    48: }
    49: 
    50: // draft.id tugunning barcha avlodlarini topish (parent selectda o'ziga yoki avlodiga ko'chirishni bloklash)
    51: function collectDescendantIds(tree, rootId, out = new Set()) {
    52:   const walk = (n) => {
    53:     if (!n) return;
    54:     if (n.children?.length) {
    55:       n.children.forEach((c) => {
    56:         out.add(Number(c.key));
    57:         walk(c);
    58:       });
    59:     }
    60:   };
    61:   const dfs = (nodes) => {
    62:     for (const n of nodes) {
    63:       if (Number(n.key) === Number(rootId)) {
    64:         walk(n);
    65:         return true;
    66:       }
    67:       if (n.children?.length && dfs(n.children)) return true;
    68:     }
    69:     return false;
    70:   };
    71:   dfs(tree);
    72:   return out;
    73: }
    74: 
    75: /* ---------- Component ---------- */
    76: 
    77: export default function OrgTable({ isAdmin, focusId }) {
    78:   // Server-side listing
    79:   const [rows, setRows] = useState([]);
    80:   const [page, setPage] = useState(0); // zero-based
    81:   const [size, setSize] = useState(10);
    82:   const [total, setTotal] = useState(0);
    83:   const totalPages = Math.max(1, Math.ceil(total / size));
    84: 
    85:   const [q, setQ] = useState("");
    86:   const [parentId, setParentId] = useState(""); // filter (all if "")
    87:   const [sort, setSort] = useState(["sortOrder,asc", "name,asc"]); // Spring pageable format
    88: 
    89:   // Tree (parent select uchun)
    90:   const [tree, setTree] = useState([]);
    91:   const flat = useMemo(() => flattenTree(tree), [tree]);
    92: 
    93:   const filterOptions = useMemo(() => {
    94:     const arr = [{ value: "", label: "— Hammasi —" }];
    95:     flat.forEach((r) => {
    96:       arr.push({
    97:         value: String(r.id),
    98:         label: `${"".padStart(r.depth * 2, " ")}${r.name}`,
    99:       });
   100:     });
   101:     return arr;
   102:   }, [flat]);
   103: 
   104:   // CRUD modal states
   105:   const [createOpen, setCreateOpen] = useState(false);
   106:   const [editOpen, setEditOpen] = useState(false);
   107:   const [deleteOpen, setDeleteOpen] = useState(false);
   108:   const [contextRow, setContextRow] = useState(null);
   109: 
   110:   const [draft, setDraft] = useState({
   111:     id: null,
   112:     name: "",
   113:     code: "",
   114:     parentId: null,
   115:     lat: "",
   116:     lng: "",
   117:     zoom: "",
   118:   });
   119:   const [originalDraft, setOriginalDraft] = useState(null); // fetchdan keyingi asl qiymatlar
   120:   const [editFetching, setEditFetching] = useState(false); // modal ichidagi yuklanish
   121: 
   122:   // Map picker modal
   123:   const [pickOpen, setPickOpen] = useState(false);
   124: 
   125:   // Loading overlay
   126:   const [loading, setLoading] = useState(false);
   127: 
   128:   // Autofocus refs for modals
   129:   const createNameRef = useRef(null);
   130:   const editNameRef = useRef(null);
   131: 
   132:   /* ---------- Data loaders ---------- */
   133: 
   134:   const loadPage = async () => {
   135:     setLoading(true);
   136:     try {
   137:       const params = {
   138:         page,
   139:         size,
   140:         q: q.trim() || undefined,
   141:         sort,
   142:       };
   143:       if (String(parentId).length) params.parentId = Number(parentId);
   144: 
   145:       const res = await listOrgsPage(params);
   146:       const list = (res?.content || []).map((r) => ({
   147:         ...r,
   148:         ...normalizeOrg(r),
   149:       }));
   150:       setRows(list);
   151:       setTotal(res?.totalElements || 0);
   152:       if (focusId) {
   153:         setTimeout(() => {
   154:           const el = document.querySelector(`[data-org-row='${focusId}']`);
   155:           if (el) {
   156:             el.classList.add("highlight-focus");
   157:             el.scrollIntoView({ behavior: "smooth", block: "center" });
   158:             setTimeout(() => el.classList.remove("highlight-focus"), 4000);
   159:           }
   160:         }, 50);
   161:       }
   162:     } catch (e) {
   163:       debugError("listOrgsPage failed", e);
   164:       toast.error("Ma'lumot yuklashda xatolik");
   165:     } finally {
   166:       setLoading(false);
   167:     }
   168:   };
   169: 
   170:   const loadTree = async () => {
   171:     try {
   172:       const t = await getOrgTree();
   173:       setTree(Array.isArray(t) ? t : []);
   174:     } catch (e) {
   175:       debugError("getOrgTree failed", e);
   176:     }
   177:   };
   178: 
   179:   useEffect(() => {
   180:     loadTree();
   181:   }, []);
   182:   useEffect(() => {
   183:     loadPage();
   184:     // eslint-disable-next-line react-hooks/exhaustive-deps
   185:   }, [page, size, sort, parentId]);
   186: 
   187:   const onSearch = () => {
   188:     setPage(0);
   189:     loadPage();
   190:   };
   191: 
   192:   /* ---------- Sorting ---------- */
   193: 
   194:   const toggleSort = (col) => {
   195:     const current = sort.find((s) => s.startsWith(`${col},`));
   196:     let next;
   197:     if (!current) {
   198:       next = `${col},asc`;
   199:     } else if (current.endsWith(",asc")) {
   200:       next = `${col},desc`;
   201:     } else {
   202:       // remove column and fallback to default
   203:       setSort(["sortOrder,asc", "name,asc"]);
   204:       setPage(0);
   205:       return;
   206:     }
   207:     const others = sort.filter((s) => !s.startsWith(`${col},`));
   208:     setSort([next, ...others]);
   209:     setPage(0);
   210:   };
   211: 
   212:   const sortIcon = (col) => {
   213:     const current = sort.find((s) => s.startsWith(`${col},`));
   214:     if (!current) return "↕";
   215:     return current.endsWith(",asc") ? "▲" : "▼";
   216:   };
   217: 
   218:   /* ---------- Parent select options in modals (exclude self & descendants) ---------- */
   219: 
   220:   const modalParentOptions = useMemo(() => {
   221:     const exclude = new Set();
   222:     if (draft.id) {
   223:       collectDescendantIds(tree, draft.id, exclude);
   224:       exclude.add(Number(draft.id));
   225:     }
   226:     const opts = [{ value: "", label: "— Ildiz —" }];
   227:     flat.forEach((r) => {
   228:       if (!exclude.has(r.id)) {
   229:         opts.push({
   230:           value: String(r.id),
   231:           label: `${"".padStart(r.depth * 2, " ")}${r.name}`,
   232:         });
   233:       }
   234:     });
   235:     return opts;
   236:   }, [tree, flat, draft.id]);
   237: 
   238:   /* ---------- CRUD handlers ---------- */
   239: 
   240:   const openCreateRoot = () => {
   241:     setContextRow(null);
   242:     setDraft({
   243:       id: null,
   244:       name: "",
   245:       code: "",
   246:       parentId: null,
   247:       lat: "",
   248:       lng: "",
   249:       zoom: "",
   250:     });
   251:     setCreateOpen(true);
   252:   };
   253: 
   254:   const openCreateChild = (row) => {
   255:     setContextRow(row);
   256:     setDraft({
   257:       id: null,
   258:       name: "",
   259:       code: "",
   260:       parentId: row?.id ?? null,
   261:       lat: "",
   262:       lng: "",
   263:       zoom: "",
   264:     });
   265:     setCreateOpen(true);
   266:   };
   267: 
   268:   const handleCreate = async () => {
   269:     if (!String(draft.name || "").trim()) return toast.warn("Nom majburiy");
   270:     setLoading(true);
   271:     try {
   272:       await createOrg({
   273:         name: draft.name.trim(),
   274:         code: draft.code?.trim() || undefined,
   275:         parentId: toNumberOrNull(draft.parentId),
   276:         lat: toNumberOrNull(draft.lat),
   277:         lng: toNumberOrNull(draft.lng),
   278:         zoom: toNumberOrNull(draft.zoom),
   279:       });
   280:       setCreateOpen(false);
   281:       await loadPage();
   282:       await loadTree();
   283:     } catch (e) {
   284:       debugError("createOrg failed", e);
   285:       toast.error("Yaratishda xatolik");
   286:     } finally {
   287:       setLoading(false);
   288:     }
   289:   };
   290: 
   291:   const openEdit = (row) => {
   292:     // 1) Jadvaldagi mavjud qisqa ma'lumot bilan darhol ochamiz
   293:     const base = normalizeOrg(row);
   294:     setContextRow(base);
   295:     const pre = {
   296:       id: base.id,
   297:       name: base.name ?? "",
   298:       code: base.code ?? "",
   299:       parentId: base.parentId ?? null,
   300:       lat: base.lat != null && base.lat !== "" ? String(base.lat) : "",
   301:       lng: base.lng != null && base.lng !== "" ? String(base.lng) : "",
   302:       zoom: base.zoom != null && base.zoom !== "" ? String(base.zoom) : "",
   303:     };
   304:     setDraft(pre);
   305:     setOriginalDraft(pre); // vaqtincha
   306:     setEditOpen(true);
   307:     // 2) To'liq ma'lumotni fon rejimida olib kelamiz
   308:     setEditFetching(true);
   309:     getOrg(base.id)
   310:       .then((full) => {
   311:         if (full && typeof full === "object") {
   312:           const nf = normalizeOrg(full);
   313:           const fullDraft = {
   314:             id: nf.id,
   315:             name: nf.name ?? "",
   316:             code: nf.code ?? "",
   317:             parentId: nf.parentId ?? null,
   318:             lat: nf.lat != null && nf.lat !== "" ? String(nf.lat) : "",
   319:             lng: nf.lng != null && nf.lng !== "" ? String(nf.lng) : "",
   320:             zoom: nf.zoom != null && nf.zoom !== "" ? String(nf.zoom) : "",
   321:           };
   322:           setDraft(fullDraft);
   323:           setOriginalDraft(fullDraft);
   324:           setContextRow(nf);
   325:         }
   326:       })
   327:       .catch((e) => debugWarn("openEdit fetch fail", e?.message))
   328:       .finally(() => setEditFetching(false));
   329:   };
   330: 
   331:   const handleEdit = async () => {
   332:     if (!draft.id) return;
   333:     if (!String(draft.name || "").trim()) return toast.warn("Nom majburiy");
   334:     setLoading(true);
   335:     try {
   336:       const originalParentId = contextRow?.parentId ?? null;
   337:       const newParentId = toNumberOrNull(draft.parentId);
   338:       await updateOrg(draft.id, {
   339:         name: draft.name.trim(),
   340:         code: draft.code?.trim() || undefined,
   341:         lat: toNumberOrNull(draft.lat),
   342:         lng: toNumberOrNull(draft.lng),
   343:         zoom: toNumberOrNull(draft.zoom),
   344:       });
   345:       if (originalParentId !== newParentId) {
   346:         await moveOrg(draft.id, { newParentId, orderIndex: 999999 });
   347:       }
   348:       setEditOpen(false);
   349:       await loadPage();
   350:       await loadTree();
   351:     } catch (e) {
   352:       debugError("updateOrg/moveOrg failed", e);
   353:       toast.error("Saqlashda xatolik");
   354:     } finally {
   355:       setLoading(false);
   356:     }
   357:   };
   358: 
   359:   const openDelete = (row) => {
   360:     setContextRow(row);
   361:     setDeleteOpen(true);
   362:   };
   363: 
   364:   const handleDelete = async () => {
   365:     if (!contextRow) return;
   366:     setLoading(true);
   367:     try {
   368:       await deleteOrg(contextRow.id);
   369:       setDeleteOpen(false);
   370:       await loadPage();
   371:       await loadTree();
   372:     } catch (e) {
   373:       debugError("deleteOrg failed", e);
   374:       toast.error("O‘chirishda xatolik (ehtimol bolalari mavjud?)");
   375:     } finally {
   376:       setLoading(false);
   377:     }
   378:   };
   379: 
   380:   const onChangeParentFilter = (e) => {
   381:     setParentId(e.target.value);
   382:     setPage(0);
   383:   };
   384: 
   385:   const nameMissing = !String(draft.name || "").trim();
   386:   const draftComparable = (d) => ({
   387:     name: (d.name || "").trim(),
   388:     code: (d.code || "").trim(),
   389:     parentId: d.parentId ? Number(d.parentId) : null,
   390:     lat: d.lat === "" ? null : Number(d.lat),
   391:     lng: d.lng === "" ? null : Number(d.lng),
   392:     zoom: d.zoom === "" ? null : Number(d.zoom),
   393:   });
   394:   const dirty = originalDraft
   395:     ? JSON.stringify(draftComparable(draft)) !==
   396:       JSON.stringify(draftComparable(originalDraft))
   397:     : true;
   398: 
   399:   /* ---------- Render ---------- */
   400: 
   401:   return (
   402:     <div className="org-table-page">
   403:       <div className="org-table-wrap">
   404:         <div className="toolbar">
   405:           <input
   406:             className="search"
   407:             placeholder="Qidiruv..."
   408:             value={q}
   409:             onChange={(e) => setQ(e.target.value)}
   410:             onKeyDown={(e) => e.key === "Enter" && onSearch()}
   411:           />
   412:           <select
   413:             className="parent-filter"
   414:             value={parentId}
   415:             onChange={onChangeParentFilter}
   416:           >
   417:             {filterOptions.map((o) => (
   418:               <option key={o.value ?? "all"} value={o.value}>
   419:                 {o.label}
   420:               </option>
   421:             ))}
   422:           </select>
   423:           <div className="spacer" />
   424:           <select
   425:             className="size"
   426:             value={size}
   427:             onChange={(e) => {
   428:               setSize(Number(e.target.value));
   429:               setPage(0);
   430:             }}
   431:           >
   432:             {[10, 20, 30, 50, 100].map((s) => (
   433:               <option key={s} value={s}>
   434:                 {s} qator
   435:               </option>
   436:             ))}
   437:           </select>
   438:           <button className="btn" onClick={onSearch}>
   439:             Qidir
   440:           </button>
   441:           {isAdmin && (
   442:             <button className="btn primary" onClick={openCreateRoot}>
   443:               + Tashkilot qo‘shish
   444:             </button>
   445:           )}
   446:         </div>
   447: 
   448:         <div className="table-card">
   449:           <table className="org-table">
   450:             <thead>
   451:               <tr>
   452:                 <th
   453:                   style={{ width: 56 }}
   454:                   className="sortable"
   455:                   onClick={() => toggleSort("id")}
   456:                 >
   457:                   ID <span className="sort">{sortIcon("id")}</span>
   458:                 </th>
   459:                 <th
   460:                   className="sortable"
   461:                   onClick={() => toggleSort("code")}
   462:                   style={{ width: 90 }}
   463:                 >
   464:                   Kod <span className="sort">{sortIcon("code")}</span>
   465:                 </th>
   466:                 <th className="sortable" onClick={() => toggleSort("name")}>
   467:                   Nomi <span className="sort">{sortIcon("name")}</span>
   468:                 </th>
   469:                 <th
   470:                   className="sortable"
   471:                   onClick={() => toggleSort("sortOrder")}
   472:                 >
   473:                   Tartib <span className="sort">{sortIcon("sortOrder")}</span>
   474:                 </th>
   475:                 <th>Ota bo‘lim</th>
   476:                 <th className="sortable" onClick={() => toggleSort("lat")}>
   477:                   Geografik kenglik{" "}
   478:                   <span className="sort">{sortIcon("lat")}</span>
   479:                 </th>
   480:                 <th className="sortable" onClick={() => toggleSort("lng")}>
   481:                   Geografik uzunlik{" "}
   482:                   <span className="sort">{sortIcon("lng")}</span>
   483:                 </th>
   484:                 <th className="sortable" onClick={() => toggleSort("zoom")}>
   485:                   Masshtab <span className="sort">{sortIcon("zoom")}</span>
   486:                 </th>
   487:                 <th style={{ width: 220 }}>Amallar</th>
   488:               </tr>
   489:             </thead>
   490:             <tbody>
   491:               {rows.map((r) => (
   492:                 <tr key={r.id}>
   493:                   <td className="num">{r.id}</td>
   494:                   <td className="code">{r.code || "—"}</td>
   495:                   <td>
   496:                     <span
   497:                       className="indent"
   498:                       style={{ paddingLeft: (r.depth || 0) * 16 }}
   499:                     />
   500:                     {r.name}
   501:                   </td>
   502:                   <td className="num">{r.sortOrder ?? "—"}</td>
   503:                   <td className="muted">
   504:                     {r.parentName ?? (r.parentId ? r.parentId : "— Ildiz —")}
   505:                   </td>
   506:                   <td className="num">{r.lat ?? "—"}</td>
   507:                   <td className="num">{r.lng ?? "—"}</td>
   508:                   <td className="num">{r.zoom ?? "—"}</td>
   509:                   <td>
   510:                     <div className="actions">
   511:                       <button
   512:                         className="btn add-child"
   513:                         onClick={() => openCreateChild(r)}
   514:                       >
   515:                         + Bo‘lim
   516:                       </button>
   517:                       <button className="btn" onClick={() => openEdit(r)}>
   518:                         Tahrirlash
   519:                       </button>
   520:                       <button
   521:                         className="btn danger"
   522:                         onClick={() => openDelete(r)}
   523:                       >
   524:                         O‘chirish
   525:                       </button>
   526:                     </div>
   527:                   </td>
   528:                 </tr>
   529:               ))}
   530:               {rows.length === 0 && (
   531:                 <tr>
   532:                   <td colSpan={9} className="empty">
   533:                     Hech narsa topilmadi
   534:                   </td>
   535:                 </tr>
   536:               )}
   537:             </tbody>
   538:           </table>
   539:         </div>
   540: 
   541:         {/* Paginator */}
   542:         <div className="paginator">
   543:           <button
   544:             className="btn"
   545:             disabled={page === 0}
   546:             onClick={() => setPage(0)}
   547:           >
   548:             «
   549:           </button>
   550:           <button
   551:             className="btn"
   552:             disabled={page === 0}
   553:             onClick={() => setPage((p) => Math.max(0, p - 1))}
   554:           >
   555:             ‹
   556:           </button>
   557:           <span className="muted">
   558:             Sahifa {page + 1} / {totalPages}
   559:           </span>
   560:           <button
   561:             className="btn"
   562:             disabled={page >= totalPages - 1}
   563:             onClick={() => setPage((p) => Math.min(totalPages - 1, p + 1))}
   564:           >
   565:             ›
   566:           </button>
   567:           <button
   568:             className="btn"
   569:             disabled={page >= totalPages - 1}
   570:             onClick={() => setPage(totalPages - 1)}
   571:           >
   572:             »
   573:           </button>
   574:           <span className="muted">Total: {total}</span>
   575:         </div>
   576: 
   577:         {/* CREATE MODAL */}
   578:         <Modal
   579:           open={createOpen}
   580:           title="Bo‘lim qo‘shish"
   581:           onClose={() => setCreateOpen(false)}
   582:           initialFocusRef={createNameRef}
   583:           preventCloseOnBackdrop={true}
   584:           className="org-edit-modal"
   585:           size="lg"
   586:         >
   587:           <div className="org-table-modal">
   588:             <div className="form-grid">
   589:               <div className="field">
   590:                 <label>Nom *</label>
   591:                 <input
   592:                   ref={createNameRef}
   593:                   value={draft.name}
   594:                   onChange={(e) => setDraft({ ...draft, name: e.target.value })}
   595:                   placeholder="Masalan: Issiqxona bo‘limi"
   596:                   autoFocus
   597:                 />
   598:               </div>
   599:               <div className="field">
   600:                 <label>Code</label>
   601:                 <input
   602:                   value={draft.code}
   603:                   onChange={(e) =>
   604:                     setDraft({ ...draft, code: e.target.value.slice(0, 32) })
   605:                   }
   606:                   placeholder="Qisqa kod (ixtiyoriy)"
   607:                 />
   608:               </div>
   609:               <div className="field parent-field">
   610:                 <label>Parent</label>
   611:                 <select
   612:                   value={draft.parentId ?? ""}
   613:                   onChange={(e) =>
   614:                     setDraft({ ...draft, parentId: e.target.value || "" })
   615:                   }
   616:                 >
   617:                   {modalParentOptions.map((o) => (
   618:                     <option key={o.value ?? "root"} value={o.value}>
   619:                       {o.label}
   620:                     </option>
   621:                   ))}
   622:                 </select>
   623:               </div>
   624: 
   625:               <div className="grid3">
   626:                 <div className="field">
   627:                   <label>Lat</label>
   628:                   <input
   629:                     type="number"
   630:                     step="0.000001"
   631:                     inputMode="decimal"
   632:                     value={draft.lat}
   633:                     onChange={(e) =>
   634:                       setDraft({ ...draft, lat: e.target.value })
   635:                     }
   636:                     placeholder="41.311081"
   637:                   />
   638:                 </div>
   639:                 <div className="field">
   640:                   <label>Lng</label>
   641:                   <input
   642:                     type="number"
   643:                     step="0.000001"
   644:                     inputMode="decimal"
   645:                     value={draft.lng}
   646:                     onChange={(e) =>
   647:                       setDraft({ ...draft, lng: e.target.value })
   648:                     }
   649:                     placeholder="69.240562"
   650:                   />
   651:                 </div>
   652:                 <div className="field">
   653:                   <label>Zoom</label>
   654:                   <input
   655:                     type="number"
   656:                     step="1"
   657:                     min="0"
   658:                     max="21"
   659:                     inputMode="numeric"
   660:                     value={draft.zoom}
   661:                     onChange={(e) =>
   662:                       setDraft({ ...draft, zoom: e.target.value })
   663:                     }
   664:                     placeholder="12"
   665:                   />
   666:                 </div>
   667:               </div>
   668: 
   669:               <div>
   670:                 <button className="btn" onClick={() => setPickOpen(true)}>
   671:                   Mapdan tanlash
   672:                 </button>
   673:                 <span className="muted" style={{ marginLeft: 8 }}>
   674:                   * Xarita oynasini ochib, nuqtani bosing.
   675:                 </span>
   676:               </div>
   677: 
   678:               <div className="modal-actions">
   679:                 <button className="btn" onClick={() => setCreateOpen(false)}>
   680:                   Bekor
   681:                 </button>
   682:                 <button
   683:                   className="btn primary"
   684:                   onClick={handleCreate}
   685:                   disabled={loading || nameMissing}
   686:                   title={nameMissing ? "Nom majburiy" : "Saqlash"}
   687:                 >
   688:                   {loading ? "Saqlanmoqda…" : "Saqlash"}
   689:                 </button>
   690:               </div>
   691:             </div>
   692:           </div>
   693:         </Modal>
   694: 
   695:         {/* EDIT MODAL */}
   696:         <Modal
   697:           open={editOpen}
   698:           title="Bo‘limni tahrirlash"
   699:           onClose={() => setEditOpen(false)}
   700:           initialFocusRef={editNameRef}
   701:           preventCloseOnBackdrop={true}
   702:           className="org-edit-modal"
   703:         >
   704:           <div className="org-table-modal org-table-modal--edit">
   705:             <div className="form-grid">
   706:               {editFetching && (
   707:                 <div className="muted" style={{ fontSize: 12 }}>
   708:                   Yuklanmoqda…
   709:                 </div>
   710:               )}
   711:               <div className="field">
   712:                 <label>Nom *</label>
   713:                 <input
   714:                   ref={editNameRef}
   715:                   value={draft.name}
   716:                   onChange={(e) => setDraft({ ...draft, name: e.target.value })}
   717:                   placeholder="Nomi"
   718:                   autoFocus
   719:                 />
   720:               </div>
   721:               <div className="field">
   722:                 <label>Code</label>
   723:                 <input
   724:                   value={draft.code}
   725:                   onChange={(e) =>
   726:                     setDraft({ ...draft, code: e.target.value.slice(0, 32) })
   727:                   }
   728:                   placeholder="Qisqa kod (ixtiyoriy)"
   729:                 />
   730:               </div>
   731:               <div className="field parent-field">
   732:                 <label>Parent</label>
   733:                 <select
   734:                   value={draft.parentId ?? ""}
   735:                   onChange={(e) =>
   736:                     setDraft({ ...draft, parentId: e.target.value || "" })
   737:                   }
   738:                 >
   739:                   {modalParentOptions.map((o) => (
   740:                     <option key={o.value ?? "root"} value={o.value}>
   741:                       {o.label}
   742:                     </option>
   743:                   ))}
   744:                 </select>
   745:               </div>
   746:               <div className="grid3 geo-fields">
   747:                 <div className="field">
   748:                   <label>Geografik kenglik</label>
   749:                   <input
   750:                     type="number"
   751:                     step="0.000001"
   752:                     inputMode="decimal"
   753:                     value={draft.lat}
   754:                     onChange={(e) =>
   755:                       setDraft({ ...draft, lat: e.target.value })
   756:                     }
   757:                   />
   758:                 </div>
   759:                 <div className="field">
   760:                   <label>Geografik uzunlik</label>
   761:                   <input
   762:                     type="number"
   763:                     step="0.000001"
   764:                     inputMode="decimal"
   765:                     value={draft.lng}
   766:                     onChange={(e) =>
   767:                       setDraft({ ...draft, lng: e.target.value })
   768:                     }
   769:                   />
   770:                 </div>
   771:                 <div className="field">
   772:                   <label>Zoom</label>
   773:                   <input
   774:                     type="number"
   775:                     step="1"
   776:                     min="0"
   777:                     max="21"
   778:                     inputMode="numeric"
   779:                     value={draft.zoom}
   780:                     onChange={(e) =>
   781:                       setDraft({ ...draft, zoom: e.target.value })
   782:                     }
   783:                   />
   784:                 </div>
   785:               </div>
   786: 
   787:               <div className="map-hint-row">
   788:                 <button
   789:                   className="btn map-btn"
   790:                   onClick={() => setPickOpen(true)}
   791:                 >
   792:                   Mapdan tanlash
   793:                 </button>
   794:                 <span className="muted">
   795:                   * Tanlang va “Tanlash” tugmasini bosing.
   796:                 </span>
   797:               </div>
   798: 
   799:               <div className="modal-actions">
   800:                 <button className="btn" onClick={() => setEditOpen(false)}>
   801:                   Bekor
   802:                 </button>
   803:                 <button
   804:                   className="btn"
   805:                   disabled={!dirty}
   806:                   title={dirty ? "Asliga qaytarish" : "O'zgarish yo'q"}
   807:                   onClick={() => originalDraft && setDraft(originalDraft)}
   808:                 >
   809:                   Qaytar
   810:                 </button>
   811:                 <button
   812:                   className="btn primary"
   813:                   onClick={handleEdit}
   814:                   disabled={loading || editFetching || nameMissing || !dirty}
   815:                   title={
   816:                     nameMissing
   817:                       ? "Nom majburiy"
   818:                       : !dirty
   819:                       ? "O'zgarish yo'q"
   820:                       : "Saqlash"
   821:                   }
   822:                 >
   823:                   {loading
   824:                     ? "Saqlanmoqda…"
   825:                     : editFetching
   826:                     ? "Kutib turing"
   827:                     : "Saqlash"}
   828:                 </button>
   829:               </div>
   830:             </div>
   831:           </div>
   832:         </Modal>
   833: 
   834:         {/* DELETE CONFIRM */}
   835:         <Modal
   836:           open={deleteOpen}
   837:           title="Bo‘limni o‘chirish"
   838:           onClose={() => setDeleteOpen(false)}
   839:           width={440}
   840:           preventCloseOnBackdrop={true}
   841:           className="org-edit-modal"
   842:         >
   843:           <div className="org-table-modal">
   844:             <div className="confirm">
   845:               <p>
   846:                 <b>{contextRow?.name}</b> bo‘limini o‘chirishni tasdiqlaysizmi?
   847:               </p>
   848:               <p className="muted">* Bolalari bo‘lsa, backend 409 qaytaradi.</p>
   849:             </div>
   850:             <div className="modal-actions">
   851:               <button className="btn" onClick={() => setDeleteOpen(false)}>
   852:                 Bekor
   853:               </button>
   854:               <button
   855:                 className="btn danger"
   856:                 onClick={handleDelete}
   857:                 disabled={loading}
   858:               >
   859:                 {loading ? "O‘chirilmoqda…" : "Ha, o‘chirish"}
   860:               </button>
   861:             </div>
   862:           </div>
   863:         </Modal>
   864: 
   865:         {/* MAP PICKER MODAL */}
   866:         <MapPickerModal
   867:           open={pickOpen}
   868:           onClose={() => setPickOpen(false)}
   869:           value={{
   870:             lat: toNumberOrNull(draft.lat),
   871:             lng: toNumberOrNull(draft.lng),
   872:             zoom: toNumberOrNull(draft.zoom),
   873:           }}
   874:           onSave={({ lat, lng, zoom }) => {
   875:             setDraft((d) => ({ ...d, lat, lng, zoom }));
   876:           }}
   877:           size="xl"
   878:         />
   879: 
   880:         {loading && (
   881:           <div className="overlay">
   882:             <div className="spinner" />
   883:           </div>
   884:         )}
   885:       </div>
   886:     </div>
   887:   );
   888: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\org\OrgTreeEditor.jsx
SIZE: 13765 bytes
================================================================================
     1: import { useEffect, useMemo, useState, useCallback } from "react";
     2: import { debugError } from "../../utils/debug";
     3: import { toast } from "react-toastify";
     4: import Tree from "rc-tree";
     5: import "rc-tree/assets/index.css";
     6: import Modal from "../ui/Modal";
     7: import MapPickerModal from "../map/MapPickerModal.jsx";
     8: import {
     9:   getOrgTree,
    10:   createOrg,
    11:   updateOrg,
    12:   deleteOrg,
    13:   moveOrg,
    14: } from "../../api/org";
    15: 
    16: /* ------- yordamchi: tree flatten (parent zanjiri bilan) ------- */
    17: function flattenWithParents(nodes, parentId = null, out = [], orderPath = []) {
    18:   nodes.forEach((n, idx) => {
    19:     const item = {
    20:       id: n.id,
    21:       name: n.name ?? n.title ?? "",
    22:       parentId,
    23:       order: n.sortOrder ?? idx,
    24:       orderPath: [...orderPath, idx],
    25:       children: n.children || [],
    26:       lat: n.lat ?? null,
    27:       lng: n.lng ?? null,
    28:       zoom: n.zoom ?? null,
    29:     };
    30:     out.push(item);
    31:     if (item.children?.length) {
    32:       flattenWithParents(item.children, item.id, out, item.orderPath);
    33:     }
    34:   });
    35:   return out;
    36: }
    37: const toNumberOrNull = (v) => {
    38:   if (v === "" || v == null) return null;
    39:   const n = Number(v);
    40:   return Number.isFinite(n) ? n : null;
    41: };
    42: 
    43: export default function OrgTreeEditor() {
    44:   const [tree, setTree] = useState([]);
    45:   const flat = useMemo(() => flattenWithParents(tree), [tree]);
    46: 
    47:   const [loading, setLoading] = useState(false);
    48: 
    49:   // tanlangan tugun
    50:   const [selected, setSelected] = useState(null);
    51: 
    52:   // CRUD modal holatlar
    53:   const [createOpen, setCreateOpen] = useState(false);
    54:   const [editOpen, setEditOpen] = useState(false);
    55:   const [deleteOpen, setDeleteOpen] = useState(false);
    56: 
    57:   // forma draft
    58:   const [draft, setDraft] = useState({
    59:     id: null,
    60:     name: "",
    61:     parentId: null,
    62:     lat: "",
    63:     lng: "",
    64:     zoom: "",
    65:   });
    66: 
    67:   // xarita tanlovchi
    68:   const [pickOpen, setPickOpen] = useState(false);
    69: 
    70:   const load = useCallback(async () => {
    71:     setLoading(true);
    72:     try {
    73:       const t = await getOrgTree();
    74:       setTree(Array.isArray(t) ? t : []);
    75:       if (selected) {
    76:         const hit = flattenWithParents(t).find((x) => x.id === selected.id);
    77:         setSelected(hit ?? null);
    78:       }
    79:     } finally {
    80:       setLoading(false);
    81:     }
    82:   }, [selected]);
    83: 
    84:   useEffect(() => {
    85:     load();
    86:   }, [load]);
    87: 
    88:   /* ---------- Tree <-> rc-tree format ---------- */
    89:   const rcData = useMemo(() => {
    90:     const convert = (nodes) =>
    91:       nodes.map((n) => ({
    92:         key: String(n.id),
    93:         title: n.name ?? n.title ?? "",
    94:         children: (n.children || []).length ? convert(n.children) : undefined,
    95:       }));
    96:     return convert(tree);
    97:   }, [tree]);
    98: 
    99:   const onSelect = (keys) => {
   100:     const id = Number(keys?.[0]);
   101:     const row = flat.find((x) => x.id === id) || null;
   102:     setSelected(row);
   103:   };
   104: 
   105:   /* ---------- Actions (open modals) ---------- */
   106:   const openCreateRoot = () => {
   107:     setDraft({
   108:       id: null,
   109:       name: "",
   110:       parentId: null,
   111:       lat: "",
   112:       lng: "",
   113:       zoom: "",
   114:     });
   115:     setCreateOpen(true);
   116:   };
   117:   const openCreateChild = () => {
   118:     if (!selected) return toast.warn("Avval bo‘lim tanlang");
   119:     setDraft({
   120:       id: null,
   121:       name: "",
   122:       parentId: selected.id,
   123:       lat: "",
   124:       lng: "",
   125:       zoom: "",
   126:     });
   127:     setCreateOpen(true);
   128:   };
   129:   const openEdit = () => {
   130:     if (!selected) return toast.warn("Tanlov yo‘q");
   131:     setDraft({
   132:       id: selected.id,
   133:       name: selected.name ?? "",
   134:       parentId: selected.parentId ?? null,
   135:       lat: selected.lat ?? "",
   136:       lng: selected.lng ?? "",
   137:       zoom: selected.zoom ?? "",
   138:     });
   139:     setEditOpen(true);
   140:   };
   141:   const openDelete = () => {
   142:     if (!selected) return toast.warn("Tanlov yo‘q");
   143:     setDeleteOpen(true);
   144:   };
   145: 
   146:   /* ---------- CRUD submitlar ---------- */
   147:   const handleCreate = async () => {
   148:     if (!draft.name.trim()) return toast.warn("Nom majburiy");
   149:     setLoading(true);
   150:     try {
   151:       await createOrg({
   152:         name: draft.name.trim(),
   153:         parentId: toNumberOrNull(draft.parentId),
   154:         lat: toNumberOrNull(draft.lat),
   155:         lng: toNumberOrNull(draft.lng),
   156:         zoom: toNumberOrNull(draft.zoom),
   157:       });
   158:       setCreateOpen(false);
   159:       await load();
   160:     } catch (e) {
   161:       debugError("OrgTreeEditor create failed", e);
   162:       toast.error("Yaratishda xatolik");
   163:     } finally {
   164:       setLoading(false);
   165:     }
   166:   };
   167: 
   168:   const handleEdit = async () => {
   169:     if (!draft.id) return;
   170:     if (!draft.name.trim()) return toast.warn("Nom majburiy");
   171:     setLoading(true);
   172:     try {
   173:       await updateOrg(draft.id, {
   174:         name: draft.name.trim(),
   175:         parentId: toNumberOrNull(draft.parentId),
   176:         lat: toNumberOrNull(draft.lat),
   177:         lng: toNumberOrNull(draft.lng),
   178:         zoom: toNumberOrNull(draft.zoom),
   179:       });
   180:       setEditOpen(false);
   181:       await load();
   182:     } catch (e) {
   183:       debugError("OrgTreeEditor update failed", e);
   184:       toast.error("Saqlashda xatolik");
   185:     } finally {
   186:       setLoading(false);
   187:     }
   188:   };
   189: 
   190:   const handleDelete = async () => {
   191:     if (!selected) return;
   192:     setLoading(true);
   193:     try {
   194:       await deleteOrg(selected.id);
   195:       setDeleteOpen(false);
   196:       setSelected(null);
   197:       await load();
   198:     } catch (e) {
   199:       debugError("OrgTreeEditor delete failed", e);
   200:       toast.error("O‘chirishda xatolik (bolalari bo‘lishi mumkin)");
   201:     } finally {
   202:       setLoading(false);
   203:     }
   204:   };
   205: 
   206:   /* ---------- Drag & drop (joyini o‘zgartirish) ---------- */
   207:   const onDrop = async (info) => {
   208:     const dragId = Number(info.dragNode.key);
   209:     const dropId = info.node ? Number(info.node.key) : null;
   210:     const dropToGap = info.dropToGap;
   211:     // dropPosition: -1 => oldiga, 0 => ichiga, 1 => keyiniga
   212:     const dropPosition = info.dropPosition;
   213: 
   214:     // default semantika: ichiga (child) tashlansa parent dropId bo‘ladi.
   215:     // gapga tashlansa - parent dropId ning o‘zi bo‘ladi, order dropPosition ga qarab backend belgilaydi.
   216:     try {
   217:       await moveOrg(dragId, {
   218:         targetId: dropId,
   219:         asChild: !dropToGap && dropPosition === 0,
   220:         // ixtiyoriy: oldinga/keyiniga qo‘yish — backend o‘zi hisoblayversin
   221:       });
   222:       await load();
   223:     } catch (e) {
   224:       debugError("OrgTreeEditor move failed", e);
   225:       toast.error("Ko‘chirishda xatolik");
   226:     }
   227:   };
   228: 
   229:   /* ---------- UI ---------- */
   230:   return (
   231:     <div className="org-tree-page">
   232:       <div className="org-tree-toolbar">
   233:         <div className="left">
   234:           <button className="btn primary" onClick={openCreateRoot}>
   235:             + Ildiz
   236:           </button>
   237:           <button className="btn" onClick={openCreateChild}>
   238:             + Child
   239:           </button>
   240:           <button className="btn" onClick={openEdit}>
   241:             Edit
   242:           </button>
   243:           <button className="btn danger" onClick={openDelete}>
   244:             Delete
   245:           </button>
   246:         </div>
   247:         <div className="right muted">
   248:           {selected ? (
   249:             <span>
   250:               Tanlangan: <b>{selected.name}</b>
   251:             </span>
   252:           ) : (
   253:             <span>Tanlanmagan</span>
   254:           )}
   255:         </div>
   256:       </div>
   257: 
   258:       <div className="org-tree-card">
   259:         <div className="org-tree-box">
   260:           <Tree
   261:             treeData={rcData}
   262:             draggable
   263:             blockNode
   264:             selectable
   265:             onSelect={onSelect}
   266:             onDrop={onDrop}
   267:             defaultExpandAll
   268:           />
   269:         </div>
   270:       </div>
   271: 
   272:       {/* CREATE MODAL (ildiz/bola ikkalasiga ham) */}
   273:       <Modal
   274:         open={createOpen}
   275:         title="Bo‘lim qo‘shish"
   276:         onClose={() => setCreateOpen(false)}
   277:       >
   278:         <div className="org-tree-modal">
   279:           <div className="form-grid">
   280:             <div className="field">
   281:               <label>Nom *</label>
   282:               <input
   283:                 value={draft.name}
   284:                 onChange={(e) => setDraft({ ...draft, name: e.target.value })}
   285:                 placeholder="Masalan: Issiqxona bo‘limi"
   286:                 autoFocus
   287:               />
   288:             </div>
   289: 
   290:             <div className="field">
   291:               <label>Ota bo‘lim (parentId)</label>
   292:               <input
   293:                 value={draft.parentId ?? ""}
   294:                 onChange={(e) =>
   295:                   setDraft({ ...draft, parentId: e.target.value })
   296:                 }
   297:                 placeholder="(ixtiyoriy, ildiz uchun bo‘sh)"
   298:               />
   299:             </div>
   300: 
   301:             <div className="field three">
   302:               <div>
   303:                 <label>Lat</label>
   304:                 <input
   305:                   value={draft.lat}
   306:                   onChange={(e) => setDraft({ ...draft, lat: e.target.value })}
   307:                 />
   308:               </div>
   309:               <div>
   310:                 <label>Lng</label>
   311:                 <input
   312:                   value={draft.lng}
   313:                   onChange={(e) => setDraft({ ...draft, lng: e.target.value })}
   314:                 />
   315:               </div>
   316:               <div>
   317:                 <label>Zoom</label>
   318:                 <input
   319:                   value={draft.zoom}
   320:                   onChange={(e) => setDraft({ ...draft, zoom: e.target.value })}
   321:                 />
   322:               </div>
   323:             </div>
   324: 
   325:             <div className="map-hint">
   326:               <button className="btn" onClick={() => setPickOpen(true)}>
   327:                 Xaritadan tanlash
   328:               </button>
   329:               <span className="muted">
   330:                 Lat/Lng/Zoom maydonlari avtomatik to‘ladi
   331:               </span>
   332:             </div>
   333:           </div>
   334: 
   335:           <div className="modal-actions">
   336:             <button className="btn" onClick={() => setCreateOpen(false)}>
   337:               Bekor
   338:             </button>
   339:             <button className="btn primary" onClick={handleCreate}>
   340:               Saqlash
   341:             </button>
   342:           </div>
   343:         </div>
   344:       </Modal>
   345: 
   346:       {/* EDIT MODAL */}
   347:       <Modal
   348:         open={editOpen}
   349:         title="Bo‘limni tahrirlash"
   350:         onClose={() => setEditOpen(false)}
   351:       >
   352:         <div className="org-tree-modal">
   353:           <div className="form-grid">
   354:             <div className="field">
   355:               <label>Nom *</label>
   356:               <input
   357:                 value={draft.name}
   358:                 onChange={(e) => setDraft({ ...draft, name: e.target.value })}
   359:               />
   360:             </div>
   361:             <div className="field">
   362:               <label>Ota bo‘lim (parentId)</label>
   363:               <input
   364:                 value={draft.parentId ?? ""}
   365:                 onChange={(e) =>
   366:                   setDraft({ ...draft, parentId: e.target.value })
   367:                 }
   368:               />
   369:             </div>
   370:             <div className="field three">
   371:               <div>
   372:                 <label>Lat</label>
   373:                 <input
   374:                   value={draft.lat ?? ""}
   375:                   onChange={(e) => setDraft({ ...draft, lat: e.target.value })}
   376:                 />
   377:               </div>
   378:               <div>
   379:                 <label>Lng</label>
   380:                 <input
   381:                   value={draft.lng ?? ""}
   382:                   onChange={(e) => setDraft({ ...draft, lng: e.target.value })}
   383:                 />
   384:               </div>
   385:               <div>
   386:                 <label>Zoom</label>
   387:                 <input
   388:                   value={draft.zoom ?? ""}
   389:                   onChange={(e) => setDraft({ ...draft, zoom: e.target.value })}
   390:                 />
   391:               </div>
   392:             </div>
   393:             <div className="map-hint">
   394:               <button className="btn" onClick={() => setPickOpen(true)}>
   395:                 Xaritadan tanlash
   396:               </button>
   397:               <span className="muted">
   398:                 Lat/Lng/Zoom maydonlari avtomatik to‘ladi
   399:               </span>
   400:             </div>
   401:           </div>
   402: 
   403:           <div className="modal-actions">
   404:             <button className="btn" onClick={() => setEditOpen(false)}>
   405:               Bekor
   406:             </button>
   407:             <button className="btn primary" onClick={handleEdit}>
   408:               Saqlash
   409:             </button>
   410:           </div>
   411:         </div>
   412:       </Modal>
   413: 
   414:       {/* DELETE MODAL */}
   415:       <Modal
   416:         open={deleteOpen}
   417:         title="Bo‘limni o‘chirish"
   418:         onClose={() => setDeleteOpen(false)}
   419:         width={440}
   420:       >
   421:         <div className="org-tree-modal">
   422:           <div className="confirm">
   423:             <p>
   424:               <b>{selected?.name}</b> bo‘limini o‘chirishni tasdiqlaysizmi?
   425:             </p>
   426:             <p className="muted">
   427:               * Agar bolalari bo‘lsa, backend 409 qaytaradi.
   428:             </p>
   429:           </div>
   430:           <div className="modal-actions">
   431:             <button className="btn" onClick={() => setDeleteOpen(false)}>
   432:               Bekor
   433:             </button>
   434:             <button className="btn danger" onClick={handleDelete}>
   435:               Ha, o‘chirish
   436:             </button>
   437:           </div>
   438:         </div>
   439:       </Modal>
   440: 
   441:       {/* XARITA MODALI (umumiy) */}
   442:       <MapPickerModal
   443:         open={pickOpen}
   444:         onClose={() => setPickOpen(false)}
   445:         value={{
   446:           lat: toNumberOrNull(draft.lat),
   447:           lng: toNumberOrNull(draft.lng),
   448:           zoom: toNumberOrNull(draft.zoom),
   449:         }}
   450:         onSave={({ lat, lng, zoom }) => {
   451:           setDraft((d) => ({ ...d, lat, lng, zoom }));
   452:         }}
   453:         size="xl"
   454:       />
   455: 
   456:       {loading && (
   457:         <div className="overlay">
   458:           <div className="spinner" />
   459:         </div>
   460:       )}
   461:     </div>
   462:   );
   463: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\SidebarMenu.jsx
SIZE: 9237 bytes
================================================================================
     1: import { useEffect } from "react";
     2: import {
     3:   LuLayoutDashboard,
     4:   LuListChecks,
     5:   LuMap,
     6:   LuMonitorSmartphone,
     7:   LuNetwork,
     8:   LuSettings,
     9:   LuShield,
    10:   LuUser,
    11:   LuUsers,
    12: } from "react-icons/lu";
    13: import { Menu, MenuItem, Sidebar, SubMenu } from "react-pro-sidebar";
    14: import { Link, useLocation } from "react-router-dom";
    15: import appLogo from "../assets/zamin-logo.png";
    16: import { useAuth } from "../hooks/useAuth";
    17: import styles from "./SidebarMenu.module.scss";
    18: 
    19: export default function SidebarMenu({ dark, collapsed, toggled, setToggled }) {
    20:   const { pathname } = useLocation();
    21:   const { isAdmin /*, isAuthed*/ } = useAuth();
    22: 
    23:   useEffect(() => {
    24:     if (toggled) setToggled(false);
    25:   }, [pathname, toggled, setToggled]);
    26: 
    27:   const isActive = (to, exact = true) =>
    28:     exact ? pathname === to : pathname.startsWith(to);
    29: 
    30:   const menuItemStyles = {
    31:     button: ({ active }) => ({
    32:       color: "var(--sb-fg)",
    33:       backgroundColor: active ? "var(--sb-active-bg)" : "transparent",
    34:       borderRadius: "10px",
    35:       padding: "10px 12px",
    36:       margin: "4px 6px",
    37:     }),
    38:     icon: ({ active }) => ({
    39:       color: active ? "var(--sb-accent)" : "var(--sb-muted)",
    40:       marginInline: "8px",
    41:       minWidth: "18px",
    42:     }),
    43:     label: () => ({ color: "var(--sb-fg)", fontWeight: 500 }),
    44:     subMenuContent: () => ({
    45:       padding: "6px 4px 8px 12px",
    46:       backgroundColor: "var(--sb-bg)",
    47:       border: "1px solid var(--sb-border)",
    48:       borderRadius: "12px",
    49:       margin: "0 8px 8px 8px",
    50:       boxShadow: "0 6px 16px rgba(0,0,0,.08)",
    51:     }),
    52:   };
    53: 
    54:   return (
    55:     <div
    56:       className={`${styles.wrapper} ${dark ? styles.dark : ""}`}
    57:       data-theme={dark ? "dark" : "light"}
    58:     >
    59:       <Sidebar
    60:         collapsed={collapsed}
    61:         toggled={toggled}
    62:         onBackdropClick={() => setToggled(false)}
    63:         breakPoint="lg"
    64:         width="260px"
    65:         backgroundColor="var(--sb-bg)"
    66:         rootStyles={{
    67:           color: "var(--sb-fg)",
    68:           borderRight: "1px solid var(--sb-border)",
    69:           height: "100vh",
    70:           "--ps-menu-bg": "var(--sb-bg)",
    71:           "--ps-menu-color": "var(--sb-fg)",
    72:           "--ps-menu-active-bg": "var(--sb-active-bg)",
    73:           "--ps-menu-item-default-color": "var(--sb-fg)",
    74:           "--ps-menu-item-hover-bg": "var(--sb-hover-bg)",
    75:           "--ps-menu-item-active-bg": "var(--sb-active-bg)",
    76:         }}
    77:       >
    78:         <div className={styles.header}>
    79:           <div className={styles.brand} title="Zamin">
    80:             <img className={styles.brandLogo} src={appLogo} alt="Zamin logo" />
    81:             {!collapsed && <span className={styles.brandText}>Zamin</span>}
    82:           </div>
    83:         </div>
    84: 
    85:         <Menu menuItemStyles={menuItemStyles}>
    86:           <MenuItem
    87:             active={isActive("/dashboard")}
    88:             component={<Link to="/dashboard" />}
    89:             icon={<LuLayoutDashboard size={18} />}
    90:           >
    91:             <span className={styles.text}>Boshqaruv paneli</span>
    92:           </MenuItem>
    93: 
    94:           <MenuItem
    95:             active={isActive("/map")}
    96:             component={<Link to="/map" />}
    97:             icon={<LuMap size={18} />}
    98:           >
    99:             <span className={styles.text}>
   100:               Xarita {!collapsed && <span className={styles.badge}>Yangi</span>}
   101:             </span>
   102:           </MenuItem>
   103: 
   104:           {/* Bo'linmalar: faqat ADMIN */}
   105:           {isAdmin && (
   106:             <MenuItem
   107:               active={isActive("/orgs-table", false)}
   108:               component={<Link to="/orgs-table" />}
   109:               icon={<LuNetwork size={18} />}
   110:             >
   111:               <span className={styles.text}>Bo'linmalar</span>
   112:             </MenuItem>
   113:           )}
   114: 
   115:           {isAdmin && (
   116:             <SubMenu
   117:               label={<span className={styles.text}>Boshqaruv</span>}
   118:               icon={<LuShield size={18} />}
   119:               defaultOpen={isActive("/admin")}
   120:             >
   121:               <MenuItem
   122:                 icon={<LuMonitorSmartphone size={18} />}
   123:                 component={<Link to="/admin/sessions" />}
   124:                 active={isActive("/admin/sessions")}
   125:               >
   126:                 <span className={styles.text}>Sessiyalar</span>
   127:               </MenuItem>
   128:               <MenuItem
   129:                 icon={<LuMonitorSmartphone size={18} />}
   130:                 component={<Link to="/admin/online-users" />}
   131:                 active={isActive("/admin/online-users")}
   132:               >
   133:                 <span className={styles.text}>Onlayn foydalanuvchilar</span>
   134:               </MenuItem>
   135:               <MenuItem
   136:                 icon={<LuListChecks size={18} />}
   137:                 component={<Link to="/admin/audit" />}
   138:                 active={isActive("/admin/audit")}
   139:               >
   140:                 <span className={styles.text}>Audit jurnali</span>
   141:               </MenuItem>
   142:               <MenuItem
   143:                 icon={<LuUsers size={18} />}
   144:                 component={<Link to="/admin/users" />}
   145:                 active={isActive("/admin/users")}
   146:               >
   147:                 <span className={styles.text}>Foydalanuvchilar</span>
   148:               </MenuItem>
   149:             </SubMenu>
   150:           )}
   151: 
   152:           {/* Inshootlar: hamma uchun ochiq */}
   153:           <SubMenu
   154:             defaultOpen={isActive("/facilities", false)}
   155:             label={<span className={styles.text}>Inshootlar</span>}
   156:             icon={"🏭"}
   157:           >
   158:             <MenuItem
   159:               active={isActive("/facilities/greenhouse")}
   160:               component={<Link to="/facilities/greenhouse" />}
   161:               icon={"🌿"}
   162:             >
   163:               <span className={styles.text}>Issiqxona</span>
   164:             </MenuItem>
   165: 
   166:             <MenuItem
   167:               active={isActive("/facilities/poultry-meat")}
   168:               component={<Link to="/facilities/poultry-meat" />}
   169:               icon={"🍗"}
   170:             >
   171:               <span className={styles.text}>Tovuqxona (go‘sht)</span>
   172:             </MenuItem>
   173:             <MenuItem
   174:               active={isActive("/facilities/poultry-egg")}
   175:               component={<Link to="/facilities/poultry-egg" />}
   176:               icon={"🥚"}
   177:             >
   178:               <span className={styles.text}>Tovuqxona (tuxum)</span>
   179:             </MenuItem>
   180: 
   181:             <MenuItem
   182:               active={isActive("/facilities/turkey")}
   183:               component={<Link to="/facilities/turkey" />}
   184:               icon={"🦃"}
   185:             >
   186:               <span className={styles.text}>Kurkaxona</span>
   187:             </MenuItem>
   188:             <MenuItem
   189:               active={isActive("/facilities/cowshed")}
   190:               component={<Link to="/facilities/cowshed" />}
   191:               icon={"🐄"}
   192:             >
   193:               <span className={styles.text}>Molxona</span>
   194:             </MenuItem>
   195:             <MenuItem
   196:               active={isActive("/facilities/sheepfold")}
   197:               component={<Link to="/facilities/sheepfold" />}
   198:               icon={"🐑"}
   199:             >
   200:               <span className={styles.text}>Qo‘yxona</span>
   201:             </MenuItem>
   202: 
   203:             <MenuItem
   204:               active={isActive("/facilities/workshops-sausage")}
   205:               component={<Link to="/facilities/workshops-sausage" />}
   206:               icon={"🥓"}
   207:             >
   208:               <span className={styles.text}>
   209:                 Ishlab chiqarish sexi (kolbasa)
   210:               </span>
   211:             </MenuItem>
   212:             <MenuItem
   213:               active={isActive("/facilities/workshops-cookie")}
   214:               component={<Link to="/facilities/workshops-cookie" />}
   215:               icon={"🍪"}
   216:             >
   217:               <span className={styles.text}>
   218:                 Ishlab chiqarish sexi (pechenye)
   219:               </span>
   220:             </MenuItem>
   221: 
   222:             <MenuItem
   223:               active={isActive("/facilities/aux-lands")}
   224:               component={<Link to="/facilities/aux-lands" />}
   225:               icon={"🌾"}
   226:             >
   227:               <span className={styles.text}>Yordamchi xo‘jalik yeri</span>
   228:             </MenuItem>
   229:             <MenuItem
   230:               active={isActive("/facilities/border-lands")}
   231:               component={<Link to="/facilities/border-lands" />}
   232:               icon={"🧭"}
   233:             >
   234:               <span className={styles.text}>Chegara oldi yeri</span>
   235:             </MenuItem>
   236:             <MenuItem
   237:               active={isActive("/facilities/fish-ponds")}
   238:               component={<Link to="/facilities/fish-ponds" />}
   239:               icon={"🐟"}
   240:             >
   241:               <span className={styles.text}>Baliqchilik ko‘llari</span>
   242:             </MenuItem>
   243:           </SubMenu>
   244: 
   245:           <SubMenu
   246:             label={<span className={styles.text}>Sozlamalar</span>}
   247:             icon={<LuSettings size={18} />}
   248:           >
   249:             <MenuItem icon={<LuUser size={18} />}>
   250:               <span className={styles.text}>Profil</span>
   251:             </MenuItem>
   252:             <MenuItem icon={<LuShield size={18} />}>
   253:               <span className={styles.text}>Xavfsizlik</span>
   254:             </MenuItem>
   255:           </SubMenu>
   256:         </Menu>
   257:       </Sidebar>
   258:     </div>
   259:   );
   260: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\SidebarMenu.module.scss
SIZE: 2426 bytes
================================================================================
     1: /* SidebarMenu.module.scss */
     2: /* SCOPED sidebar tokenlari — barchasi globaldan olinadi */
     3: 
     4: .wrapper {
     5:   --sb-bg: var(--card);
     6:   --sb-fg: var(--text);
     7:   --sb-muted: var(--muted);
     8:   --sb-border: var(--border);
     9:   --sb-hover-bg: color-mix(in srgb, var(--brand) 6%, var(--card));
    10:   --sb-active-bg: color-mix(in srgb, var(--brand) 12%, var(--card));
    11:   --sb-accent: var(--brand);
    12: }
    13: 
    14: /* Header/brand */
    15: .header {
    16:   padding: 14px 12px 8px 12px;
    17:   border-bottom: 1px solid var(--sb-border);
    18: }
    19: .brand {
    20:   display: flex;
    21:   align-items: center;
    22:   gap: 10px;
    23:   color: var(--sb-fg);
    24: }
    25: .brandLogo {
    26:   width: 26px;
    27:   height: 26px;
    28:   object-fit: contain;
    29:   filter: drop-shadow(
    30:     0 0 12px color-mix(in srgb, var(--brand) 45%, transparent)
    31:   );
    32: }
    33: .wrapper[data-theme="dark"] .brandLogo {
    34:   filter: drop-shadow(
    35:     0 0 16px color-mix(in srgb, var(--brand) 60%, transparent)
    36:   );
    37: }
    38: .brandText {
    39:   font-weight: 800;
    40:   letter-spacing: 0.2px;
    41: }
    42: 
    43: /* Matn va badge */
    44: .text {
    45:   display: inline-flex;
    46:   align-items: center;
    47:   gap: 8px;
    48: }
    49: .badge {
    50:   display: inline-block;
    51:   font-size: 11px;
    52:   line-height: 1;
    53:   padding: 4px 6px;
    54:   border-radius: 999px;
    55:   background: color-mix(in srgb, var(--sb-accent) 20%, transparent);
    56:   color: var(--sb-accent);
    57:   border: 1px solid color-mix(in srgb, var(--sb-accent) 35%, transparent);
    58: }
    59: 
    60: /* pro-sidebar tweaks */
    61: :global(.ps-menu-button:hover) {
    62:   background: var(--sb-hover-bg) !important;
    63: }
    64: :global(.ps-submenu-content) {
    65:   padding-inline: 4px !important;
    66: }
    67: :global(.ps-sidebar-container) {
    68:   background-color: var(--sb-bg) !important;
    69:   color: var(--sb-fg);
    70: }
    71: :global(.ps-sidebar-root) {
    72:   border-right: 1px solid var(--sb-border);
    73: }
    74: :global(.ps-menu-button:hover) {
    75:   background: var(--sb-hover-bg) !important;
    76: }
    77: :global(.ps-submenu-content) {
    78:   background: transparent;
    79: }
    80: :global(.ps-menu-root .ps-submenu-content) {
    81:   background-color: var(--sb-bg) !important;
    82:   border: 1px solid var(--sb-border) !important;
    83:   border-radius: 12px !important;
    84: }
    85: :global(.ps-submenu-content .ps-menuitem-root > .ps-menu-button) {
    86:   background: transparent !important;
    87: }
    88: .wrapper[data-theme="dark"] :global(.ps-submenu-content) {
    89:   background-color: var(--sb-bg) !important;
    90:   border-color: var(--sb-border) !important;
    91: }
    92: :global(.ps-menuitem-root.ps-active > .ps-menu-button) {
    93:   background: var(--sb-active-bg) !important;
    94: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\ui\Modal.jsx
SIZE: 7797 bytes
================================================================================
     1: import { useEffect, useRef, useState } from "react";
     2: import { createPortal } from "react-dom";
     3: import styles from "./Modal.module.scss";
     4: 
     5: /* --- Global dark holatini ishonchli va cheklangan tarzda aniqlash --- */
     6: function detectGlobalDark() {
     7:   if (typeof document === "undefined") return false;
     8: 
     9:   const hasTheme = (el, theme) =>
    10:     !!el &&
    11:     (el.classList?.contains(theme) ||
    12:       el.classList?.contains(`theme-${theme}`) ||
    13:       el.getAttribute?.("data-theme") === theme);
    14: 
    15:   // Faqat root darajasidagi elementlar (app’lar ko‘p bo‘lsa ham qamrab olamiz)
    16:   const roots = [
    17:     document.documentElement,
    18:     document.body,
    19:     document.getElementById("root"),
    20:     document.getElementById("app"),
    21:     document.querySelector(".appshell"),
    22:     document.querySelector(".app-shell"),
    23:     document.querySelector("[data-appshell]"),
    24:   ].filter(Boolean);
    25: 
    26:   // Explicit light ustun
    27:   if (roots.some((el) => hasTheme(el, "light"))) return false;
    28:   if (roots.some((el) => hasTheme(el, "dark"))) return true;
    29: 
    30:   // OS pref (fallback)
    31:   return (
    32:     typeof window !== "undefined" &&
    33:     window.matchMedia?.("(prefers-color-scheme: dark)")?.matches
    34:   );
    35: }
    36: 
    37: /**
    38:  * Props
    39:  * - open: boolean
    40:  * - title?: string | ReactNode
    41:  * - onClose?: () => void
    42:  * - size?: "sm" | "md" | "lg" | "xl" | "full"
    43:  * - width?: number | string
    44:  * - dark?: boolean | "auto"   // "auto" (default) — root temadan oladi
    45:  * - preventCloseOnBackdrop?: boolean
    46:  * - disableEscapeClose?: boolean
    47:  * - initialFocusRef?: React.Ref
    48:  * - className?: string
    49:  * - headerRight?: ReactNode
    50:  * - children: ReactNode
    51:  */
    52: export default function Modal({
    53:   open,
    54:   title,
    55:   onClose,
    56:   size = "md",
    57:   width,
    58:   dark = "auto",
    59:   preventCloseOnBackdrop = false,
    60:   disableEscapeClose = false,
    61:   initialFocusRef,
    62:   className,
    63:   headerRight,
    64:   children,
    65: }) {
    66:   const [mounted, setMounted] = useState(false);
    67:   const [phase, setPhase] = useState("idle"); // 'enter' | 'entered' | 'exit'
    68:   const [theme, setTheme] = useState("light");
    69:   const cardRef = useRef(null);
    70: 
    71:   // Portal host
    72:   const portalEl = useRef(
    73:     typeof document !== "undefined" ? document.createElement("div") : null
    74:   );
    75: 
    76:   // mount/unmount portal
    77:   useEffect(() => {
    78:     const el = portalEl.current;
    79:     if (!el || typeof document === "undefined") return;
    80:     const host = document.body;
    81:     el.className = styles.portalHost;
    82:     host.appendChild(el);
    83:     setMounted(true);
    84:     return () => {
    85:       try {
    86:         host.removeChild(el);
    87:       } catch {}
    88:     };
    89:   }, []);
    90: 
    91:   // Tema: "auto" bo‘lsa faqat root darajasidagi tema flaglarini kuzatamiz
    92:   useEffect(() => {
    93:     const compute = () =>
    94:       setTheme(
    95:         dark === "auto"
    96:           ? detectGlobalDark()
    97:             ? "dark"
    98:             : "light"
    99:           : dark
   100:           ? "dark"
   101:           : "light"
   102:       );
   103: 
   104:     compute();
   105: 
   106:     // OS pref o‘zgarsa
   107:     const mq = window.matchMedia?.("(prefers-color-scheme: dark)");
   108:     const onMq = () => dark === "auto" && compute();
   109:     mq?.addEventListener?.("change", onMq);
   110: 
   111:     // HTML/BODY/#root/#app/.appshell dagi class/data-theme o‘zgarishini kuzatamiz
   112:     const obs = new MutationObserver(() => {
   113:       if (dark === "auto") compute();
   114:     });
   115: 
   116:     const targets = [
   117:       document.documentElement,
   118:       document.body,
   119:       document.getElementById("root"),
   120:       document.getElementById("app"),
   121:       document.querySelector(".appshell"),
   122:       document.querySelector(".app-shell"),
   123:       document.querySelector("[data-appshell]"),
   124:     ].filter(Boolean);
   125: 
   126:     try {
   127:       targets.forEach((t) =>
   128:         obs.observe(t, {
   129:           attributes: true,
   130:           attributeFilter: ["class", "data-theme"],
   131:           subtree: false, // ⚠️ ichkariga tushmaymiz — modalning o‘zi detektsiyani buzmasin
   132:         })
   133:       );
   134:     } catch {}
   135: 
   136:     return () => {
   137:       try {
   138:         mq?.removeEventListener?.("change", onMq);
   139:       } catch {}
   140:       obs.disconnect();
   141:     };
   142:   }, [dark]);
   143: 
   144:   // open/close + scroll lock + focus
   145:   useEffect(() => {
   146:     if (!mounted) return;
   147:     const body = document.body;
   148:     if (open) {
   149:       const prev = body.style.overflow;
   150:       body.style.overflow = "hidden";
   151:       setPhase("enter");
   152:       const t = setTimeout(() => setPhase("entered"), 15);
   153: 
   154:       const focusEl =
   155:         initialFocusRef?.current ??
   156:         cardRef.current?.querySelector(
   157:           "[autofocus], button, [href], input, select, textarea, [tabindex]:not([tabindex='-1'])"
   158:         );
   159:       focusEl?.focus?.();
   160: 
   161:       return () => {
   162:         clearTimeout(t);
   163:         body.style.overflow = prev;
   164:       };
   165:     } else {
   166:       setPhase("idle");
   167:     }
   168:   }, [open, mounted, initialFocusRef]);
   169: 
   170:   // Escape + oddiy focus trap
   171:   useEffect(() => {
   172:     if (!open || disableEscapeClose) return;
   173:     const onKey = (e) => {
   174:       if (e.key === "Escape") {
   175:         e.stopPropagation();
   176:         onClose?.();
   177:       }
   178:       if (e.key === "Tab" && cardRef.current) {
   179:         const f = cardRef.current.querySelectorAll(
   180:           "a[href], button, textarea, input, select, [tabindex]:not([tabindex='-1'])"
   181:         );
   182:         const focusables = Array.from(f).filter(
   183:           (el) => !el.hasAttribute("disabled")
   184:         );
   185:         if (focusables.length) {
   186:           const first = focusables[0];
   187:           const last = focusables[focusables.length - 1];
   188:           if (e.shiftKey && document.activeElement === first) {
   189:             last.focus();
   190:             e.preventDefault();
   191:           } else if (!e.shiftKey && document.activeElement === last) {
   192:             first.focus();
   193:             e.preventDefault();
   194:           }
   195:         }
   196:       }
   197:     };
   198:     document.addEventListener("keydown", onKey, true);
   199:     return () => document.removeEventListener("keydown", onKey, true);
   200:   }, [open, disableEscapeClose, onClose]);
   201: 
   202:   if (!mounted || !open) return null;
   203: 
   204:   // classes
   205:   const rootClass = [
   206:     styles.modalRoot,
   207:     phase === "enter" && styles.enter,
   208:     phase === "entered" && styles.entered,
   209:     phase === "exit" && styles.exit,
   210:   ]
   211:     .filter(Boolean)
   212:     .join(" ");
   213: 
   214:   // width presets
   215:   const cardStyle = {};
   216:   if (width)
   217:     cardStyle["--card-w"] = typeof width === "number" ? `${width}px` : width;
   218:   else {
   219:     const map = {
   220:       sm: "420px",
   221:       md: "520px",
   222:       lg: "720px",
   223:       xl: "900px",
   224:       full: "min(96vw,1200px)",
   225:     };
   226:     cardStyle["--card-w"] = map[size] || map.md;
   227:   }
   228: 
   229:   const content = (
   230:     <div className={rootClass} data-theme={theme}>
   231:       <div
   232:         className={styles.backdrop}
   233:         onClick={() => !preventCloseOnBackdrop && onClose?.()}
   234:       />
   235:       <section
   236:         className={`${styles.card} ${className ?? ""}`}
   237:         style={cardStyle}
   238:         role="dialog"
   239:         aria-modal="true"
   240:         aria-labelledby={title ? "modal-title" : undefined}
   241:         ref={cardRef}
   242:         onClick={(e) => e.stopPropagation()}
   243:       >
   244:         {(title || onClose || headerRight) && (
   245:           <header className={styles.header}>
   246:             <div className={styles.title} id="modal-title">
   247:               {title}
   248:             </div>
   249:             <div className={styles.headerRight}>{headerRight}</div>
   250:             {onClose && (
   251:               <button
   252:                 className={`${styles.btn} ${styles.icon}`}
   253:                 onClick={onClose}
   254:                 aria-label="Yopish"
   255:               >
   256:                 ×
   257:               </button>
   258:             )}
   259:           </header>
   260:         )}
   261:         {/* body */}
   262:         <div className={styles.body} data-dialog-body>
   263:           {children}
   264:         </div>
   265:       </section>
   266:     </div>
   267:   );
   268: 
   269:   return createPortal(content, portalEl.current);
   270: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\components\ui\Modal.module.scss
SIZE: 8172 bytes
================================================================================
     1: /* ===========================
     2:    Modal.module.scss (optimized, portal-safe)
     3:    =========================== */
     4: 
     5: /* 0) Portal har doim eng tepada turishi uchun */
     6: .portalHost {
     7:   position: relative;
     8:   z-index: 5000;
     9: }
    10: 
    11: /* 1) THEME TOKENS (scoped to modal root) */
    12: /* Light theme (default) */
    13: .modalRoot,
    14: .modalRoot[data-theme="light"] {
    15:   --overlay: rgba(2, 6, 23, 0.45);
    16:   --card-bg: #ffffff;
    17:   --card-fg: #0f172a;
    18:   --border: #e5e7eb;
    19:   --shadow: 0 24px 60px rgba(2, 6, 23, 0.18);
    20: 
    21:   --radius: 16px;
    22:   --ring: 0 0 0 4px rgba(34, 197, 94, 0.25);
    23: 
    24:   --brand: #22c55e;
    25:   --brand-2: #16a34a;
    26: 
    27:   --danger: #ef4444;
    28:   --danger-2: #dc2626;
    29: 
    30:   /* 🔗 Aliases — org_table.scss tokenlari portaldagi modaldan ham olinsin */
    31:   --card: var(--card-bg);
    32:   --text: var(--card-fg);
    33:   --muted: color-mix(in srgb, var(--card-fg) 55%, transparent);
    34: }
    35: 
    36: /* Dark theme */
    37: .modalRoot[data-theme="dark"] {
    38:   --overlay: rgba(3, 7, 18, 0.65);
    39:   --card-bg: #0f172a;
    40:   --card-fg: #e6eef9;
    41:   --border: #233246;
    42:   --shadow: 0 24px 60px rgba(0, 0, 0, 0.45);
    43: 
    44:   /* 🔗 Aliases */
    45:   --card: var(--card-bg);
    46:   --text: var(--card-fg);
    47:   --muted: color-mix(in srgb, var(--card-fg) 45%, transparent);
    48: }
    49: 
    50: /* 1.1) Org Table modallaridagi "field" fonini token bilan ta’minlab qo‘yamiz */
    51: .modalRoot [data-dialog-body] .org-table-modal {
    52:   --field-bg: color-mix(in srgb, var(--card) 92%, #ffffff 8%);
    53: }
    54: .modalRoot[data-theme="dark"] [data-dialog-body] .org-table-modal {
    55:   --field-bg: color-mix(in srgb, var(--card) 70%, #ffffff 4%);
    56: }
    57: 
    58: /* 2) LAYOUT & ANIMATION */
    59: .modalRoot {
    60:   position: fixed;
    61:   inset: 0;
    62:   display: grid;
    63:   place-items: center;
    64: }
    65: 
    66: .backdrop {
    67:   position: absolute;
    68:   inset: 0;
    69:   background: var(--overlay);
    70:   -webkit-backdrop-filter: blur(2px);
    71:   backdrop-filter: blur(2px);
    72:   opacity: 0;
    73:   transition: opacity 0.18s ease;
    74: }
    75: 
    76: .card {
    77:   position: relative;
    78:   width: var(--card-w, 560px);
    79:   max-width: 96vw;
    80:   max-height: 88vh;
    81:   display: flex;
    82:   flex-direction: column;
    83: 
    84:   background: var(--card-bg);
    85:   color: var(--card-fg);
    86:   border: 1px solid var(--border);
    87:   border-radius: var(--radius);
    88:   box-shadow: var(--shadow);
    89: 
    90:   transform: translateY(6px) scale(0.98);
    91:   opacity: 0;
    92:   transition: transform 0.18s ease, opacity 0.18s ease, box-shadow 0.18s ease;
    93: }
    94: 
    95: /* animation phases */
    96: .enter .backdrop {
    97:   opacity: 0;
    98: }
    99: .entered .backdrop {
   100:   opacity: 1;
   101: }
   102: .enter .card {
   103:   transform: translateY(6px) scale(0.98);
   104:   opacity: 0;
   105: }
   106: .entered .card {
   107:   transform: translateY(0) scale(1);
   108:   opacity: 1;
   109: }
   110: .exit .card {
   111:   transform: translateY(6px) scale(0.98);
   112:   opacity: 0;
   113: }
   114: .exit .backdrop {
   115:   opacity: 0;
   116: }
   117: 
   118: /* reduce motion */
   119: @media (prefers-reduced-motion: reduce) {
   120:   .backdrop,
   121:   .card {
   122:     transition: none;
   123:   }
   124: }
   125: 
   126: /* 3) HEADER */
   127: .header {
   128:   display: grid;
   129:   grid-template-columns: 1fr auto 36px;
   130:   align-items: center;
   131:   gap: 8px;
   132:   padding: 14px 16px;
   133:   border-bottom: 1px solid var(--border);
   134:   background: color-mix(in srgb, var(--card-bg) 92%, var(--card-fg) 8%);
   135: }
   136: 
   137: .title {
   138:   font-weight: 700;
   139:   font-size: 16px;
   140: }
   141: .headerRight {
   142:   justify-self: end;
   143: }
   144: 
   145: .icon {
   146:   width: 36px;
   147:   height: 36px;
   148:   display: grid;
   149:   place-items: center;
   150:   font-size: 20px;
   151:   border-radius: 12px;
   152:   border: 1px solid var(--border);
   153:   background: color-mix(in srgb, var(--card-bg) 92%, var(--card-fg) 8%);
   154:   color: var(--card-fg);
   155:   cursor: pointer;
   156:   transition: transform 0.03s ease, box-shadow 0.15s ease, background 0.15s ease;
   157: }
   158: .icon:focus {
   159:   outline: none;
   160:   box-shadow: var(--ring);
   161: }
   162: .icon:hover {
   163:   background: color-mix(in srgb, var(--card-bg) 88%, var(--card-fg) 12%);
   164: }
   165: .icon:active {
   166:   transform: translateY(1px);
   167: }
   168: 
   169: /* 4) BODY */
   170: .body {
   171:   padding: 16px;
   172:   overflow: auto;
   173:   background: var(--card-bg);
   174: }
   175: 
   176: /* 5) BUTTONS (scoped, override globals) */
   177: .modalRoot .header :global(.btn),
   178: .modalRoot [data-dialog-body] :global(.btn) {
   179:   appearance: none;
   180:   border: 1px solid var(--border);
   181:   background: color-mix(in srgb, var(--card-bg) 96%, var(--card-fg) 4%);
   182:   color: var(--card-fg);
   183:   border-radius: 12px;
   184:   height: 36px;
   185:   padding: 0 12px;
   186:   cursor: pointer;
   187:   transition: transform 0.03s ease, box-shadow 0.15s ease, background 0.15s ease;
   188: }
   189: .modalRoot .header :global(.btn:hover),
   190: .modalRoot [data-dialog-body] :global(.btn:hover) {
   191:   background: color-mix(in srgb, var(--card-bg) 90%, var(--card-fg) 10%);
   192: }
   193: .modalRoot .header :global(.btn:focus),
   194: .modalRoot [data-dialog-body] :global(.btn:focus) {
   195:   outline: none;
   196:   box-shadow: var(--ring);
   197: }
   198: .modalRoot .header :global(.btn:active),
   199: .modalRoot [data-dialog-body] :global(.btn:active) {
   200:   transform: translateY(1px);
   201: }
   202: .modalRoot .header :global(.btn[disabled]),
   203: .modalRoot [data-dialog-body] :global(.btn[disabled]) {
   204:   opacity: 0.6;
   205:   cursor: not-allowed;
   206: }
   207: 
   208: /* variants */
   209: .modalRoot .header :global(.btn.primary),
   210: .modalRoot [data-dialog-body] :global(.btn.primary) {
   211:   background: linear-gradient(135deg, var(--brand), var(--brand-2));
   212:   color: #fff;
   213:   border-color: transparent;
   214:   box-shadow: 0 10px 22px rgba(34, 197, 94, 0.22);
   215: }
   216: .modalRoot .header :global(.btn.primary:hover),
   217: .modalRoot [data-dialog-body] :global(.btn.primary:hover) {
   218:   filter: brightness(1.02);
   219: }
   220: 
   221: .modalRoot .header :global(.btn.danger),
   222: .modalRoot [data-dialog-body] :global(.btn.danger) {
   223:   background: linear-gradient(135deg, var(--danger), var(--danger-2));
   224:   color: #fff;
   225:   border-color: transparent;
   226:   box-shadow: 0 10px 22px rgba(239, 68, 68, 0.18);
   227: }
   228: 
   229: .modalRoot .header :global(.btn.ghost),
   230: .modalRoot [data-dialog-body] :global(.btn.ghost) {
   231:   background: transparent;
   232:   border-color: var(--border);
   233: }
   234: 
   235: /* 5.1) FORM FIELDS */
   236: .modalRoot .header :global(input),
   237: .modalRoot .header :global(textarea),
   238: .modalRoot .header :global(select),
   239: .modalRoot [data-dialog-body] :global(input),
   240: .modalRoot [data-dialog-body] :global(textarea),
   241: .modalRoot [data-dialog-body] :global(select) {
   242:   font: inherit;
   243:   color: var(--card-fg);
   244:   background: color-mix(in srgb, var(--card-bg) 96%, var(--card-fg) 4%);
   245:   border: 1px solid var(--border);
   246:   border-radius: 10px;
   247:   padding: 6px 10px;
   248:   outline: none;
   249:   min-height: 36px;
   250:   box-sizing: border-box;
   251:   transition: background 0.15s ease, border-color 0.15s ease,
   252:     box-shadow 0.15s ease;
   253: }
   254: .modalRoot .header :global(input:hover),
   255: .modalRoot .header :global(textarea:hover),
   256: .modalRoot .header :global(select:hover),
   257: .modalRoot [data-dialog-body] :global(input:hover),
   258: .modalRoot [data-dialog-body] :global(textarea:hover),
   259: .modalRoot [data-dialog-body] :global(select:hover) {
   260:   background: color-mix(in srgb, var(--card-bg) 90%, var(--card-fg) 10%);
   261: }
   262: .modalRoot .header :global(input:focus),
   263: .modalRoot .header :global(textarea:focus),
   264: .modalRoot .header :global(select:focus),
   265: .modalRoot [data-dialog-body] :global(input:focus),
   266: .modalRoot [data-dialog-body] :global(textarea:focus),
   267: .modalRoot [data-dialog-body] :global(select:focus) {
   268:   box-shadow: var(--ring);
   269:   border-color: var(--brand);
   270:   background: color-mix(in srgb, var(--card-bg) 88%, var(--card-fg) 12%);
   271: }
   272: .modalRoot .header :global(input:disabled),
   273: .modalRoot .header :global(textarea:disabled),
   274: .modalRoot .header :global(select:disabled),
   275: .modalRoot [data-dialog-body] :global(input:disabled),
   276: .modalRoot [data-dialog-body] :global(textarea:disabled),
   277: .modalRoot [data-dialog-body] :global(select:disabled) {
   278:   opacity: 0.55;
   279:   cursor: not-allowed;
   280: }
   281: .modalRoot [data-dialog-body] :global(textarea) {
   282:   resize: vertical;
   283:   min-height: 90px;
   284: }
   285: .modalRoot .header :global(input::placeholder),
   286: .modalRoot .header :global(textarea::placeholder),
   287: .modalRoot [data-dialog-body] :global(input::placeholder),
   288: .modalRoot [data-dialog-body] :global(textarea::placeholder) {
   289:   color: color-mix(in srgb, var(--card-fg) 55%, transparent);
   290: }
   291: 
   292: /* 6) RESPONSIVE */
   293: @media (max-width: 640px) {
   294:   .card {
   295:     width: min(96vw, 560px);
   296:     border-radius: 14px;
   297:   }
   298:   .header {
   299:     padding: 12px 14px;
   300:   }
   301:   .body {
   302:     padding: 12px;
   303:   }
   304: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\constants\facilityTypes.js
SIZE: 3000 bytes
================================================================================
     1: // src/constants/facilityTypes.js
     2: 
     3: // UI’da ko‘rinadigan 11 yo‘nalish (front-level)
     4: export const FRONT_TYPES = [
     5:   "GREENHOUSE", // Issiqxona
     6:   "POULTRY_MEAT", // Tovuqxona (go‘sht)
     7:   "POULTRY_EGG", // Tovuqxona (tuxum)
     8:   "TURKEY", // Kurkaxona
     9:   "COWSHED", // Molxona
    10:   "SHEEPFOLD", // Qo‘yxona
    11:   "WORKSHOP_SAUSAGE", // Ishlab chiqarish sexi (kolbasa)
    12:   "WORKSHOP_COOKIE", // Ishlab chiqarish sexi (pechenye)
    13:   "AUX_LAND", // Yordamchi xo‘jalik yeri
    14:   "BORDER_LAND", // Chegara oldi yeri
    15:   "FISHPOND", // Baliqchilik ko‘li
    16: ];
    17: 
    18: // O‘zbekcha yorliqlar
    19: export const TYPE_LABELS = {
    20:   GREENHOUSE: "Issiqxona",
    21:   POULTRY_MEAT: "Tovuqxona (go‘sht)",
    22:   POULTRY_EGG: "Tovuqxona (tuxum)",
    23:   TURKEY: "Kurkaxona",
    24:   COWSHED: "Molxona",
    25:   SHEEPFOLD: "Qo‘yxona",
    26:   // Standart: to‘liq nom "Ishlab chiqarish sexi (...)"
    27:   WORKSHOP_SAUSAGE: "Ishlab chiqarish sexi (kolbasa)",
    28:   WORKSHOP_COOKIE: "Ishlab chiqarish sexi (pechenye)",
    29:   AUX_LAND: "Yordamchi xo‘jalik yeri",
    30:   BORDER_LAND: "Chegara oldi yeri",
    31:   FISHPOND: "Baliqchilik ko‘li",
    32: };
    33: 
    34: // Front -> backend enum moslash
    35: export const FRONT_TO_BACK = {
    36:   GREENHOUSE: "GREENHOUSE",
    37:   POULTRY_MEAT: "POULTRY",
    38:   POULTRY_EGG: "POULTRY",
    39:   TURKEY: "TURKEY",
    40:   COWSHED: "COWSHED",
    41:   SHEEPFOLD: "SHEEPFOLD",
    42:   WORKSHOP_SAUSAGE: "WORKSHOP",
    43:   WORKSHOP_COOKIE: "WORKSHOP",
    44:   AUX_LAND: "AUX_LAND",
    45:   BORDER_LAND: "BORDER_LAND",
    46:   FISHPOND: "FISHPOND",
    47: };
    48: 
    49: // Ranglar (xarita uchun)
    50: export const TYPE_COLORS = {
    51:   GREENHOUSE: "#16a34a",
    52:   POULTRY_MEAT: "#ef4444",
    53:   POULTRY_EGG: "#f59e0b",
    54:   TURKEY: "#a855f7",
    55:   COWSHED: "#6b7280",
    56:   SHEEPFOLD: "#10b981",
    57:   WORKSHOP_SAUSAGE: "#dc2626",
    58:   WORKSHOP_COOKIE: "#ea580c",
    59:   AUX_LAND: "#22c55e",
    60:   BORDER_LAND: "#0ea5e9",
    61:   FISHPOND: "#3b82f6",
    62: };
    63: 
    64: export function colorFor(frontType) {
    65:   return TYPE_COLORS[frontType] || "#64748b";
    66: }
    67: 
    68: /**
    69:  * UI dagi front filter holatidan backendga yuboriladigan enumlar ro‘yxati
    70:  * (POULTRY_MEAT/POULTRY_EGG -> POULTRY, WORKSHOP_* -> WORKSHOP)
    71:  */
    72: export function backTypesFromFilter(typeFilter) {
    73:   const s = new Set();
    74:   Object.entries(typeFilter).forEach(([front, on]) => {
    75:     if (!on) return;
    76:     const back = FRONT_TO_BACK[front];
    77:     if (back) s.add(back);
    78:   });
    79:   return Array.from(s);
    80: }
    81: 
    82: /** Backend enumini labelga aylantirish (POULTRY/WORKSHOP umumiy ko‘rinishda) */
    83: export function labelForBack(backType) {
    84:   switch (backType) {
    85:     case "POULTRY":
    86:       return "Tovuqxona";
    87:     case "WORKSHOP":
    88:       return "Ishlab chiqarish sexi";
    89:     default:
    90:       return TYPE_LABELS[backType] || backType;
    91:   }
    92: }
    93: 
    94: /** Backend enumini rangga aylantirish (POULTRY/WORKSHOP uchun default front rangi) */
    95: export function colorForBack(backType) {
    96:   switch (backType) {
    97:     case "POULTRY":
    98:       return TYPE_COLORS.POULTRY_MEAT;
    99:     case "WORKSHOP":
   100:       return TYPE_COLORS.WORKSHOP_SAUSAGE;
   101:     default:
   102:       return TYPE_COLORS[backType] || "#64748b";
   103:   }
   104: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\data\facilityTypes.js
SIZE: 9961 bytes
================================================================================
     1: // src/data/facilityTypes.js
     2: export const FACILITY_TYPES = {
     3:   GREENHOUSE: {
     4:     label: "Issiqxona",
     5:     fields: [
     6:       {
     7:         key: "areaM2",
     8:         label: "Umumiy yer maydoni",
     9:         type: "number",
    10:         suffix: "m²",
    11:         rules: { min: 0 },
    12:       },
    13:       { key: "heatingType", label: "Isitish tizimi turi", type: "text" },
    14:       {
    15:         key: "expectedYield",
    16:         label: "Olinadigan hosildorlik (t/yil)",
    17:         type: "number",
    18:         rules: { min: 0 },
    19:       },
    20:       {
    21:         key: "expectedRevenue",
    22:         label: "Olinadigan daromad",
    23:         type: "number",
    24:         rules: { min: 0 },
    25:       },
    26:       {
    27:         key: "netProfit",
    28:         label: "Olingan sof foyda",
    29:         type: "number",
    30:         rules: { min: 0 },
    31:       },
    32:     ],
    33:   },
    34: 
    35:   POULTRY_MEAT: {
    36:     label: "Tovuqxona (go‘sht)",
    37:     fields: [
    38:       {
    39:         key: "areaM2",
    40:         label: "Umumiy yer maydoni",
    41:         type: "number",
    42:         suffix: "m²",
    43:         rules: { min: 0 },
    44:       },
    45:       {
    46:         key: "capacity",
    47:         label: "Umumiy sig‘imi (bosh)",
    48:         type: "number",
    49:         rules: { min: 0, integer: true },
    50:       },
    51:       {
    52:         key: "current",
    53:         label: "Hozirda mavjud (bosh)",
    54:         type: "number",
    55:         rules: { min: 0, integer: true },
    56:       },
    57:       {
    58:         key: "productAmount",
    59:         label: "Olinadigan mahsulot",
    60:         type: "number",
    61:         suffix: "kg",
    62:         rules: { min: 0 },
    63:       },
    64:       { key: "productUnit", label: "Birlik", type: "text", placeholder: "kg" },
    65:       {
    66:         key: "expectedRevenue",
    67:         label: "Olinadigan daromad",
    68:         type: "number",
    69:         rules: { min: 0 },
    70:       },
    71:       {
    72:         key: "netProfit",
    73:         label: "Olingan sof foyda",
    74:         type: "number",
    75:         rules: { min: 0 },
    76:       },
    77:     ],
    78:   },
    79: 
    80:   POULTRY_EGG: {
    81:     label: "Tovuqxona (tuxum)",
    82:     fields: [
    83:       {
    84:         key: "areaM2",
    85:         label: "Umumiy yer maydoni",
    86:         type: "number",
    87:         suffix: "m²",
    88:         rules: { min: 0 },
    89:       },
    90:       {
    91:         key: "capacity",
    92:         label: "Umumiy sig‘imi (bosh)",
    93:         type: "number",
    94:         rules: { min: 0, integer: true },
    95:       },
    96:       {
    97:         key: "current",
    98:         label: "Hozirda mavjud (bosh)",
    99:         type: "number",
   100:         rules: { min: 0, integer: true },
   101:       },
   102:       {
   103:         key: "productAmount",
   104:         label: "Tuxum (dona/kun)",
   105:         type: "number",
   106:         rules: { min: 0 },
   107:       },
   108:       {
   109:         key: "productUnit",
   110:         label: "Birlik",
   111:         type: "text",
   112:         placeholder: "pcs/dona",
   113:       },
   114:       {
   115:         key: "expectedRevenue",
   116:         label: "Olinadigan daromad",
   117:         type: "number",
   118:         rules: { min: 0 },
   119:       },
   120:       {
   121:         key: "netProfit",
   122:         label: "Olingan sof foyda",
   123:         type: "number",
   124:         rules: { min: 0 },
   125:       },
   126:     ],
   127:   },
   128: 
   129:   TURKEY: {
   130:     label: "Kurkaxona (hindi)",
   131:     fields: [
   132:       {
   133:         key: "areaM2",
   134:         label: "Umumiy yer maydoni",
   135:         type: "number",
   136:         suffix: "m²",
   137:         rules: { min: 0 },
   138:       },
   139:       {
   140:         key: "capacity",
   141:         label: "Umumiy sig‘imi (bosh)",
   142:         type: "number",
   143:         rules: { min: 0, integer: true },
   144:       },
   145:       {
   146:         key: "current",
   147:         label: "Hozirda mavjud (bosh)",
   148:         type: "number",
   149:         rules: { min: 0, integer: true },
   150:       },
   151:       {
   152:         key: "productAmount",
   153:         label: "Olinadigan mahsulot",
   154:         type: "number",
   155:         rules: { min: 0 },
   156:       },
   157:       {
   158:         key: "productUnit",
   159:         label: "Birlik",
   160:         type: "text",
   161:         placeholder: "kg/pcs",
   162:       },
   163:       {
   164:         key: "expectedRevenue",
   165:         label: "Olinadigan daromad",
   166:         type: "number",
   167:         rules: { min: 0 },
   168:       },
   169:       {
   170:         key: "netProfit",
   171:         label: "Olingan sof foyda",
   172:         type: "number",
   173:         rules: { min: 0 },
   174:       },
   175:     ],
   176:   },
   177: 
   178:   COWSHED: {
   179:     label: "Molxona",
   180:     fields: [
   181:       {
   182:         key: "areaM2",
   183:         label: "Umumiy yer maydoni",
   184:         type: "number",
   185:         suffix: "m²",
   186:         rules: { min: 0 },
   187:       },
   188:       {
   189:         key: "capacity",
   190:         label: "Umumiy sig‘imi (bosh)",
   191:         type: "number",
   192:         rules: { min: 0, integer: true },
   193:       },
   194:       {
   195:         key: "current",
   196:         label: "Hozirda mavjud (bosh)",
   197:         type: "number",
   198:         rules: { min: 0, integer: true },
   199:       },
   200:       {
   201:         key: "productAmount",
   202:         label: "Olinadigan mahsulot (kg/kun)",
   203:         type: "number",
   204:         rules: { min: 0 },
   205:       },
   206:       {
   207:         key: "expectedRevenue",
   208:         label: "Olinadigan daromad",
   209:         type: "number",
   210:         rules: { min: 0 },
   211:       },
   212:       {
   213:         key: "netProfit",
   214:         label: "Olingan sof foyda",
   215:         type: "number",
   216:         rules: { min: 0 },
   217:       },
   218:     ],
   219:   },
   220: 
   221:   SHEEPFOLD: {
   222:     label: "Qo‘yxona",
   223:     fields: [
   224:       {
   225:         key: "areaM2",
   226:         label: "Umumiy yer maydoni",
   227:         type: "number",
   228:         suffix: "m²",
   229:         rules: { min: 0 },
   230:       },
   231:       {
   232:         key: "capacity",
   233:         label: "Umumiy sig‘imi (bosh)",
   234:         type: "number",
   235:         rules: { min: 0, integer: true },
   236:       },
   237:       {
   238:         key: "current",
   239:         label: "Hozirda mavjud (bosh)",
   240:         type: "number",
   241:         rules: { min: 0, integer: true },
   242:       },
   243:       {
   244:         key: "productAmount",
   245:         label: "Olinadigan mahsulot (kg/yil)",
   246:         type: "number",
   247:         rules: { min: 0 },
   248:       },
   249:       {
   250:         key: "expectedRevenue",
   251:         label: "Olinadigan daromad",
   252:         type: "number",
   253:         rules: { min: 0 },
   254:       },
   255:       {
   256:         key: "netProfit",
   257:         label: "Olingan sof foyda",
   258:         type: "number",
   259:         rules: { min: 0 },
   260:       },
   261:     ],
   262:   },
   263: 
   264:   WORKSHOP_SAUSAGE: {
   265:     label: "Ishlab chiqarish sexi (kolbasa)",
   266:     fields: [
   267:       {
   268:         key: "areaM2",
   269:         label: "Umumiy yer maydoni",
   270:         type: "number",
   271:         suffix: "m²",
   272:         rules: { min: 0 },
   273:       },
   274:       {
   275:         key: "productAmount",
   276:         label: "Ishlab chiqarish (oyiga)",
   277:         type: "number",
   278:         rules: { min: 0 },
   279:       },
   280:       {
   281:         key: "expectedRevenue",
   282:         label: "Olinadigan daromad",
   283:         type: "number",
   284:         rules: { min: 0 },
   285:       },
   286:       {
   287:         key: "netProfit",
   288:         label: "Olingan sof foyda",
   289:         type: "number",
   290:         rules: { min: 0 },
   291:       },
   292:     ],
   293:   },
   294: 
   295:   WORKSHOP_COOKIE: {
   296:     label: "Ishlab chiqarish sexi (pechenye)",
   297:     fields: [
   298:       {
   299:         key: "areaM2",
   300:         label: "Umumiy yer maydoni",
   301:         type: "number",
   302:         suffix: "m²",
   303:         rules: { min: 0 },
   304:       },
   305:       {
   306:         key: "productAmount",
   307:         label: "Ishlab chiqarish (oyiga)",
   308:         type: "number",
   309:         rules: { min: 0 },
   310:       },
   311:       {
   312:         key: "expectedRevenue",
   313:         label: "Olinadigan daromad",
   314:         type: "number",
   315:         rules: { min: 0 },
   316:       },
   317:       {
   318:         key: "netProfit",
   319:         label: "Olingan sof foyda",
   320:         type: "number",
   321:         rules: { min: 0 },
   322:       },
   323:     ],
   324:   },
   325: 
   326:   AUX_LAND: {
   327:     label: "Yordamchi xo‘jalik yerlari",
   328:     fields: [
   329:       {
   330:         key: "totalAreaHa",
   331:         label: "Yer maydoni",
   332:         type: "number",
   333:         suffix: "ga",
   334:         rules: { min: 0 },
   335:       },
   336:       {
   337:         key: "expectedYield",
   338:         label: "Kutilayotgan hosil",
   339:         type: "number",
   340:         rules: { min: 0 },
   341:       },
   342:       {
   343:         key: "expectedRevenue",
   344:         label: "Olinadigan daromad",
   345:         type: "number",
   346:         rules: { min: 0 },
   347:       },
   348:       {
   349:         key: "netProfit",
   350:         label: "Olingan sof foyda",
   351:         type: "number",
   352:         rules: { min: 0 },
   353:       },
   354:       { key: "tenant", label: "Ijarachi", type: "text" },
   355:       { key: "govDecision", label: "Hukumat qarori", type: "text" },
   356:     ],
   357:   },
   358: 
   359:   BORDER_LAND: {
   360:     label: "Chegara oldi yerlari",
   361:     fields: [
   362:       {
   363:         key: "totalAreaHa",
   364:         label: "Yer maydoni",
   365:         type: "number",
   366:         suffix: "ga",
   367:         rules: { min: 0 },
   368:       },
   369:       {
   370:         key: "expectedYield",
   371:         label: "Kutilayotgan hosil",
   372:         type: "number",
   373:         rules: { min: 0 },
   374:       },
   375:       {
   376:         key: "expectedRevenue",
   377:         label: "Olinadigan daromad",
   378:         type: "number",
   379:         rules: { min: 0 },
   380:       },
   381:       {
   382:         key: "netProfit",
   383:         label: "Olingan sof foyda",
   384:         type: "number",
   385:         rules: { min: 0 },
   386:       },
   387:       { key: "tenant", label: "Ijarachi", type: "text" },
   388:       { key: "govDecision", label: "Hukumat qarori", type: "text" },
   389:     ],
   390:   },
   391: 
   392:   FISHPOND: {
   393:     label: "Baliqchilik ko‘li",
   394:     fields: [
   395:       {
   396:         key: "areaM2",
   397:         label: "Suv maydoni",
   398:         type: "number",
   399:         suffix: "m²",
   400:         rules: { min: 0 },
   401:       },
   402:       {
   403:         key: "productAmount",
   404:         label: "Yillik hosil (kg)",
   405:         type: "number",
   406:         rules: { min: 0 },
   407:       },
   408:       {
   409:         key: "expectedRevenue",
   410:         label: "Olinadigan daromad",
   411:         type: "number",
   412:         rules: { min: 0 },
   413:       },
   414:       {
   415:         key: "netProfit",
   416:         label: "Olingan sof foyda",
   417:         type: "number",
   418:         rules: { min: 0 },
   419:       },
   420:       { key: "tenant", label: "Ijarachi", type: "text" },
   421:       { key: "govDecision", label: "Hukumat qarori", type: "text" },
   422:     ],
   423:   },
   424: };
   425: 
   426: export const FACILITY_TYPE_OPTIONS = Object.entries(FACILITY_TYPES).map(
   427:   ([value, cfg]) => ({ value, label: cfg.label })
   428: );
   429: export const getFacilityTypeLabel = (code) =>
   430:   FACILITY_TYPES?.[code]?.label || code;


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\data\orgTree.js
SIZE: 1968 bytes
================================================================================
     1: // src/data/orgTree.js
     2: // Har bir tugun uchun: key, title, pos: [lat, lng], zoom (ixtiyoriy), children
     3: const orgTreeData = [
     4:   {
     5:     key: "hq",
     6:     title: "Markaziy Boshqarma (HQ)",
     7:     pos: [41.3111, 69.2797], // Tashkent
     8:     zoom: 13,
     9:     children: [
    10:       {
    11:         key: "hq-it",
    12:         title: "IT bo'limi",
    13:         pos: [41.3275, 69.2817],
    14:       },
    15:       {
    16:         key: "hq-ops",
    17:         title: "Operatsiyalar bo'limi",
    18:         pos: [41.3059, 69.269],
    19:       },
    20:     ],
    21:   },
    22:   {
    23:     key: "regions",
    24:     title: "Hududiy Filiallar",
    25:     children: [
    26:       {
    27:         key: "rg-tashkent",
    28:         title: "Toshkent filiali",
    29:         pos: [41.2995, 69.2401],
    30:         zoom: 13,
    31:         children: [
    32:           {
    33:             key: "rg-tashkent-chilonzor",
    34:             title: "Chilonzor bo'limi",
    35:             pos: [41.2856, 69.2033],
    36:           },
    37:           {
    38:             key: "rg-tashkent-yunusobod",
    39:             title: "Yunusobod bo'limi",
    40:             pos: [41.3634, 69.2862],
    41:           },
    42:         ],
    43:       },
    44:       {
    45:         key: "rg-samarkand",
    46:         title: "Samarqand filiali",
    47:         pos: [39.6542, 66.9597],
    48:         children: [
    49:           {
    50:             key: "rg-samarkand-registan",
    51:             title: "Registon bo'limi",
    52:             pos: [39.6541, 66.975],
    53:           },
    54:         ],
    55:       },
    56:       {
    57:         key: "rg-bukhara",
    58:         title: "Buxoro filiali",
    59:         pos: [39.7747, 64.4286],
    60:       },
    61:       {
    62:         key: "rg-fergana",
    63:         title: "Farg‘ona filiali",
    64:         pos: [40.389, 71.7843],
    65:       },
    66:       {
    67:         key: "rg-andijan",
    68:         title: "Andijon filiali",
    69:         pos: [40.7821, 72.3442],
    70:       },
    71:       {
    72:         key: "rg-namangan",
    73:         title: "Namangan filiali",
    74:         pos: [40.9983, 71.6726],
    75:       },
    76:       {
    77:         key: "rg-nukus",
    78:         title: "Nukus filiali",
    79:         pos: [42.46, 59.615],
    80:       },
    81:     ],
    82:   },
    83: ];
    84: 
    85: export default orgTreeData;


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\hooks\useAuth.js
SIZE: 1632 bytes
================================================================================
     1: import { useEffect, useMemo, useState } from "react";
     2: import { decodeJWT, isAuthenticated } from "../api/auth";
     3: 
     4: function hasAdminRole(payload) {
     5:   if (!payload) return false;
     6:   const single = (
     7:     payload.role ||
     8:     payload.user_role ||
     9:     payload["x-role"] ||
    10:     ""
    11:   ).toString();
    12:   if (single === "ADMIN" || single === "ROLE_ADMIN") return true;
    13: 
    14:   const arr = []
    15:     .concat(payload.roles || [])
    16:     .concat(payload.authorities || [])
    17:     .concat(payload.scopes || [])
    18:     .map(String);
    19: 
    20:   return arr.some((r) => r === "ADMIN" || r === "ROLE_ADMIN");
    21: }
    22: 
    23: export function useAuth() {
    24:   const [payload, setPayload] = useState(() => decodeJWT());
    25:   const [isAuthed, setIsAuthed] = useState(() => isAuthenticated());
    26: 
    27:   // Token o'zgarsa (boshqa tab/lokal) — auto-update
    28:   useEffect(() => {
    29:     const onStorage = (e) => {
    30:       if (e.key === "token" || e.key === "refreshToken") {
    31:         setPayload(decodeJWT());
    32:         setIsAuthed(isAuthenticated());
    33:       }
    34:     };
    35:     window.addEventListener("storage", onStorage);
    36:     return () => window.removeEventListener("storage", onStorage);
    37:   }, []);
    38: 
    39:   // Har bir renderda ham tekshirib turamiz (bir tabli holatlar uchun)
    40:   useEffect(() => {
    41:     setPayload(decodeJWT());
    42:     setIsAuthed(isAuthenticated());
    43:   }, []);
    44: 
    45:   const role = payload?.role || null;
    46:   const username = payload?.sub || payload?.username || null;
    47:   const orgId = payload?.orgId ?? null;
    48: 
    49:   const isAdmin = useMemo(() => hasAdminRole(payload), [payload]);
    50: 
    51:   return {
    52:     isAuthed,
    53:     role,
    54:     isAdmin,
    55:     username,
    56:     orgId,
    57:     payload,
    58:   };
    59: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\hooks\useDebouncedValue.js
SIZE: 468 bytes
================================================================================
     1: import { useEffect, useState } from "react";
     2: 
     3: // Simple debounced value hook: returns debounced version of input
     4: // usage: const searchDebounced = useDebouncedValue(search, 300);
     5: export default function useDebouncedValue(value, delay = 300) {
     6:   const [debounced, setDebounced] = useState(value);
     7:   useEffect(() => {
     8:     const id = setTimeout(() => setDebounced(value), delay);
     9:     return () => clearTimeout(id);
    10:   }, [value, delay]);
    11:   return debounced;
    12: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\hooks\useTheme.js
SIZE: 2869 bytes
================================================================================
     1: // src/hooks/useTheme.js
     2: import { useEffect, useMemo, useState } from "react";
     3: 
     4: const KEY = "theme"; // "light" | "dark" | "system"
     5: 
     6: // ---- Helpers ----
     7: function systemPrefersDark() {
     8:   return !!(
     9:     window.matchMedia &&
    10:     window.matchMedia("(prefers-color-scheme: dark)").matches
    11:   );
    12: }
    13: function readStoredTheme() {
    14:   try {
    15:     const t = localStorage.getItem(KEY);
    16:     if (t === "light" || t === "dark" || t === "system") return t;
    17:   } catch {}
    18:   // DEFAULT: dark
    19:   return "dark";
    20: }
    21: function computeIsDark(theme) {
    22:   return theme === "dark" || (theme === "system" && systemPrefersDark());
    23: }
    24: function applyTheme(theme) {
    25:   const isDark = computeIsDark(theme);
    26:   const root = document.documentElement;
    27:   root.setAttribute("data-theme", isDark ? "dark" : "light");
    28:   root.classList.toggle("dark", isDark);
    29: }
    30: 
    31: // ---- Global state (pub/sub) ----
    32: const listeners = new Set();
    33: let currentTheme = readStoredTheme();
    34: 
    35: // Ilk qo‘llash
    36: if (typeof document !== "undefined") {
    37:   applyTheme(currentTheme);
    38: }
    39: 
    40: function setThemeInternal(next) {
    41:   if (next !== "light" && next !== "dark" && next !== "system") return;
    42:   currentTheme = next;
    43:   try {
    44:     localStorage.setItem(KEY, next);
    45:   } catch {}
    46:   applyTheme(next);
    47:   // barcha obunachilarni yangilash
    48:   listeners.forEach((fn) => {
    49:     try {
    50:       fn(currentTheme);
    51:     } catch {}
    52:   });
    53: }
    54: 
    55: // ---- Hook API ----
    56: export function useTheme() {
    57:   const [theme, setThemeState] = useState(currentTheme);
    58: 
    59:   // Global o‘zgarishlarga obuna bo‘lish
    60:   useEffect(() => {
    61:     const handler = (t) => setThemeState(t);
    62:     listeners.add(handler);
    63:     return () => listeners.delete(handler);
    64:   }, []);
    65: 
    66:   // System rejimi o‘zgarsa — darhol qo‘llash va bildirish
    67:   useEffect(() => {
    68:     if (theme !== "system" || !window.matchMedia) return;
    69:     const mq = window.matchMedia("(prefers-color-scheme: dark)");
    70:     const onChange = () => {
    71:       applyTheme("system");
    72:       listeners.forEach((fn) => {
    73:         try {
    74:           fn("system");
    75:         } catch {}
    76:       });
    77:     };
    78:     mq.addEventListener?.("change", onChange);
    79:     return () => mq.removeEventListener?.("change", onChange);
    80:   }, [theme]);
    81: 
    82:   // Ko‘p tab sinxron
    83:   useEffect(() => {
    84:     const onStorage = (e) => {
    85:       if (e.key === KEY) {
    86:         const next = readStoredTheme();
    87:         setThemeInternal(next);
    88:       }
    89:     };
    90:     window.addEventListener("storage", onStorage);
    91:     return () => window.removeEventListener("storage", onStorage);
    92:   }, []);
    93: 
    94:   const isDark = useMemo(() => computeIsDark(theme), [theme]);
    95: 
    96:   // Public actions
    97:   const toggle = () => setThemeInternal(isDark ? "light" : "dark");
    98:   const setSystem = () => setThemeInternal("system");
    99:   const setTheme = (t) => setThemeInternal(t);
   100: 
   101:   return { theme, setTheme, isDark, toggle, setSystem };
   102: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\leaflet.fix.js
SIZE: 328 bytes
================================================================================
     1: // src/leaflet.fix.js
     2: import L from "leaflet";
     3: import iconRetina from "leaflet/dist/images/marker-icon-2x.png";
     4: import icon from "leaflet/dist/images/marker-icon.png";
     5: 
     6: delete L.Icon.Default.prototype._getIconUrl;
     7: L.Icon.Default.mergeOptions({
     8:   iconRetinaUrl: iconRetina,
     9:   iconUrl: icon,
    10:   // shadowUrl removed
    11: });


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\main.jsx
SIZE: 2032 bytes
================================================================================
     1: // src/main.jsx
     2: import React, { Suspense } from "react";
     3: import ReactDOM from "react-dom/client";
     4: import { BrowserRouter } from "react-router-dom";
     5: import App from "./App.jsx";
     6: import { ToastContainer } from "react-toastify";
     7: import "react-toastify/dist/ReactToastify.css";
     8: import "./leaflet.fix.js";
     9: 
    10: // Leaflet CSS
    11: import "leaflet/dist/leaflet.css";
    12: import "leaflet-draw/dist/leaflet.draw.css";
    13: 
    14: // ✅ Faqat umumiy SCSS kirish fayli:
    15: import "./styles/index.scss";
    16: 
    17: // Vite’da marker ikonlarini to‘g‘rilash (qoldiring)
    18: import L from "leaflet";
    19: import marker2x from "leaflet/dist/images/marker-icon-2x.png";
    20: import marker from "leaflet/dist/images/marker-icon.png";
    21: delete L.Icon.Default.prototype._getIconUrl;
    22: L.Icon.Default.mergeOptions({
    23:   iconRetinaUrl: marker2x,
    24:   iconUrl: marker,
    25:   // shadowUrl removed (shadow effect disabled)
    26: });
    27: 
    28: class ErrorBoundary extends React.Component {
    29:   constructor(props) {
    30:     super(props);
    31:     this.state = { error: null };
    32:   }
    33:   static getDerivedStateFromError(error) {
    34:     return { error };
    35:   }
    36:   componentDidCatch() {
    37:     // Avoid leaking details to user; could send to logging endpoint
    38:   }
    39:   render() {
    40:     if (this.state.error) {
    41:       return (
    42:         <div style={{ padding: 32 }}>
    43:           <h2>Bir xatolik yuz berdi</h2>
    44:           <p>Ilova vaqtincha mavjud emas. Sahifani yangilab ko'ring.</p>
    45:         </div>
    46:       );
    47:     }
    48:     return this.props.children;
    49:   }
    50: }
    51: 
    52: ReactDOM.createRoot(document.getElementById("root")).render(
    53:   <React.StrictMode>
    54:     <ErrorBoundary>
    55:       <BrowserRouter>
    56:         <Suspense fallback={<div style={{ padding: 16 }}>Yuklanmoqda...</div>}>
    57:           <App />
    58:         </Suspense>
    59:         <ToastContainer
    60:           position="top-right"
    61:           autoClose={4000}
    62:           newestOnTop
    63:           closeOnClick
    64:           pauseOnFocusLoss
    65:           draggable
    66:           pauseOnHover
    67:           theme="colored"
    68:         />
    69:       </BrowserRouter>
    70:     </ErrorBoundary>
    71:   </React.StrictMode>
    72: );


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\AuditPage.jsx
SIZE: 9030 bytes
================================================================================
     1: // src/pages/admin/AuditPage.jsx
     2: import { useEffect, useMemo, useState } from "react";
     3: import { listAudit } from "../../api/admin";
     4: import { useTheme } from "../../hooks/useTheme";
     5: import styles from "./AuditPage.module.scss";
     6: import {
     7:   LuListChecks,
     8:   LuSearch,
     9:   LuRefreshCw,
    10:   LuCalendarClock,
    11:   LuFilter,
    12: } from "react-icons/lu";
    13: 
    14: const EVENTS = [
    15:   "LOGIN_SUCCESS",
    16:   "REFRESH_ROTATE",
    17:   "REFRESH_REUSE",
    18:   "LOGOUT",
    19:   "SESSION_REVOKE",
    20:   "SESSION_REJECTED",
    21: ];
    22: 
    23: function fmt(v) {
    24:   if (!v) return "-";
    25:   const d = new Date(v);
    26:   if (Number.isNaN(+d)) return String(v);
    27:   return d.toLocaleString();
    28: }
    29: 
    30: export default function AuditPage() {
    31:   const { isDark } = useTheme();
    32: 
    33:   // Filtrlar
    34:   const [userId, setUserId] = useState("");
    35:   const [deviceId, setDeviceId] = useState("");
    36:   const [event, setEvent] = useState("");
    37:   const [from, setFrom] = useState(""); // datetime-local
    38:   const [to, setTo] = useState("");
    39:   const [q, setQ] = useState("");
    40: 
    41:   // Sahifalash (default 10)
    42:   const [page, setPage] = useState(0);
    43:   const [size, setSize] = useState(10);
    44:   const [sort] = useState("ts,desc"); // removed unused setter
    45: 
    46:   const [rows, setRows] = useState([]);
    47:   const [total, setTotal] = useState(0);
    48:   const [busy, setBusy] = useState(false);
    49: 
    50:   async function load(p = page) {
    51:     setBusy(true);
    52:     try {
    53:       const {
    54:         content,
    55:         total: t,
    56:         page: rp,
    57:         // size: rs, // server size'ni e'tiborga olmaymiz — client tanlovi ustuvor
    58:       } = await listAudit({
    59:         page: p,
    60:         size,
    61:         sort,
    62:         userId: userId ? Number(userId) : undefined,
    63:         deviceId: deviceId || undefined,
    64:         event: event || undefined,
    65:         from: from ? new Date(from).toISOString() : undefined,
    66:         to: to ? new Date(to).toISOString() : undefined,
    67:       });
    68:       setRows(content);
    69:       setTotal(t);
    70:       setPage(typeof rp === "number" ? rp : p);
    71:       // setSize(rs) NI QILMAYMIZ
    72:     } finally {
    73:       setBusy(false);
    74:     }
    75:   }
    76: 
    77:   useEffect(() => {
    78:     load(0);
    79:     // eslint-disable-next-line react-hooks/exhaustive-deps
    80:   }, [size, sort]);
    81: 
    82:   const filtered = useMemo(() => {
    83:     const text = q.trim().toLowerCase();
    84:     if (!text) return rows;
    85:     return rows.filter((r) =>
    86:       [r.username, r.deviceId, r.ip, r.userAgent, r.event]
    87:         .filter(Boolean)
    88:         .some((v) => String(v).toLowerCase().includes(text))
    89:     );
    90:   }, [rows, q]);
    91: 
    92:   const totalPages = Math.max(1, Math.ceil(total / Math.max(1, size)));
    93:   const fromRow = total ? page * size + 1 : 0;
    94:   const toRow = Math.min(total, (page + 1) * size);
    95: 
    96:   return (
    97:     <div className={styles.page} data-theme={isDark ? "dark" : "light"}>
    98:       <div className={styles.header}>
    99:         <div className={styles.title}>
   100:           <LuListChecks /> Audit jurnali
   101:         </div>
   102:         <div className={styles.actions}>
   103:           <button
   104:             className={styles.btn}
   105:             onClick={() => load(page)}
   106:             disabled={busy}
   107:           >
   108:             <LuRefreshCw /> Qayta yuklash
   109:           </button>
   110:         </div>
   111:       </div>
   112: 
   113:       <div className={styles.toolbar}>
   114:         <div className={styles.searchBox}>
   115:           <LuSearch />
   116:           <input
   117:             placeholder="Foydalanuvchi / qurilma / IP / UA / hodisa bo‘yicha qidirish..."
   118:             value={q}
   119:             onChange={(e) => setQ(e.target.value)}
   120:           />
   121:         </div>
   122: 
   123:         <div className={styles.filters}>
   124:           <span className={styles.fTitle}>
   125:             <LuFilter /> Filtrlar
   126:           </span>
   127: 
   128:           <div className={styles.field}>
   129:             <label>Foydalanuvchi ID</label>
   130:             <input
   131:               className={styles.input}
   132:               placeholder="istalgan"
   133:               value={userId}
   134:               onChange={(e) => setUserId(e.target.value.replace(/[^\d]/g, ""))}
   135:               inputMode="numeric"
   136:             />
   137:           </div>
   138: 
   139:           <div className={styles.field}>
   140:             <label>Qurilma ID</label>
   141:             <input
   142:               className={styles.input}
   143:               placeholder="istalgan"
   144:               value={deviceId}
   145:               onChange={(e) => setDeviceId(e.target.value)}
   146:             />
   147:           </div>
   148: 
   149:           <div className={styles.field}>
   150:             <label>Hodisa</label>
   151:             <select
   152:               className={styles.input}
   153:               value={event}
   154:               onChange={(e) => setEvent(e.target.value)}
   155:             >
   156:               <option value="">istalgan</option>
   157:               {EVENTS.map((ev) => (
   158:                 <option key={ev} value={ev}>
   159:                   {ev}
   160:                 </option>
   161:               ))}
   162:             </select>
   163:           </div>
   164: 
   165:           <div className={styles.field}>
   166:             <label>Boshlanish (dan)</label>
   167:             <input
   168:               type="datetime-local"
   169:               className={styles.input}
   170:               value={from}
   171:               onChange={(e) => setFrom(e.target.value)}
   172:             />
   173:           </div>
   174: 
   175:           <div className={styles.field}>
   176:             <label>Tugash (gacha)</label>
   177:             <input
   178:               type="datetime-local"
   179:               className={styles.input}
   180:               value={to}
   181:               onChange={(e) => setTo(e.target.value)}
   182:             />
   183:           </div>
   184: 
   185:           <button
   186:             className={styles.btn}
   187:             onClick={() => load(0)}
   188:             disabled={busy}
   189:             title="Filtrlarni qo‘llash"
   190:           >
   191:             Qo‘llash
   192:           </button>
   193:         </div>
   194:       </div>
   195: 
   196:       <div className={styles.tableWrap}>
   197:         <table className={styles.table}>
   198:           <thead>
   199:             <tr>
   200:               <th>№</th>
   201:               <th>Hodisa</th>
   202:               <th>Foydalanuvchi</th>
   203:               <th>Qurilma</th>
   204:               <th>IP</th>
   205:               <th className={styles.truncate}>Brauzer (User-Agent)</th>
   206:               <th>
   207:                 <LuCalendarClock /> Vaqt
   208:               </th>
   209:             </tr>
   210:           </thead>
   211:           <tbody>
   212:             {filtered.map((r, idx) => (
   213:               <tr key={r.id ?? `${r.userId}:${r.deviceId}:${r.ts}:${idx}`}>
   214:                 <td>{r.id ?? idx + 1}</td>
   215:                 <td>{r.event}</td>
   216:                 <td className={styles.truncate}>
   217:                   {r.username ?? "(foydalanuvchi)"}{" "}
   218:                   {r.userId != null && (
   219:                     <small style={{ opacity: 0.7 }}>#{r.userId}</small>
   220:                   )}
   221:                 </td>
   222:                 <td className={styles.truncate}>{r.deviceId || "-"}</td>
   223:                 <td>{r.ip || "-"}</td>
   224:                 <td className={styles.truncate} title={r.userAgent}>
   225:                   {r.userAgent || "-"}
   226:                 </td>
   227:                 <td>{fmt(r.ts)}</td>
   228:               </tr>
   229:             ))}
   230:             {!filtered.length && (
   231:               <tr>
   232:                 <td
   233:                   colSpan={7}
   234:                   style={{ padding: 16, textAlign: "center", opacity: 0.6 }}
   235:                 >
   236:                   Hech narsa topilmadi.
   237:                 </td>
   238:               </tr>
   239:             )}
   240:           </tbody>
   241:         </table>
   242:       </div>
   243: 
   244:       <div className={styles.pager}>
   245:         <div className={styles.field}>
   246:           <label>Sahifa hajmi</label>
   247:           <select
   248:             className={styles.input}
   249:             value={size}
   250:             onChange={(e) => {
   251:               const n = Number(e.target.value);
   252:               if (n !== size) {
   253:                 setSize(n);
   254:                 setPage(0); // useEffect([size,sort]) o‘zi load(0) qiladi
   255:               }
   256:             }}
   257:           >
   258:             {[10, 20, 50, 100].map((n) => (
   259:               <option key={n} value={n}>
   260:                 {n}
   261:               </option>
   262:             ))}
   263:           </select>
   264:         </div>
   265: 
   266:         <div className={styles.pages}>
   267:           <button
   268:             className={styles.btn}
   269:             disabled={page <= 0 || busy}
   270:             onClick={() => load(0)}
   271:           >
   272:             « Boshiga
   273:           </button>
   274:           <button
   275:             className={styles.btn}
   276:             disabled={page <= 0 || busy}
   277:             onClick={() => load(page - 1)}
   278:           >
   279:             ‹ Oldingi
   280:           </button>
   281:           <span className={styles.muted}>
   282:             Sahifa {page + 1} / {totalPages} · Ko‘rsatilmoqda {fromRow}–{toRow}{" "}
   283:             / {total}
   284:           </span>
   285:           <button
   286:             className={styles.btn}
   287:             disabled={page >= totalPages - 1 || busy}
   288:             onClick={() => load(page + 1)}
   289:           >
   290:             Keyingi ›
   291:           </button>
   292:           <button
   293:             className={styles.btn}
   294:             disabled={page >= totalPages - 1 || busy}
   295:             onClick={() => load(totalPages - 1)}
   296:           >
   297:             Oxiriga »
   298:           </button>
   299:         </div>
   300:       </div>
   301:     </div>
   302:   );
   303: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\AuditPage.module.scss
SIZE: 4522 bytes
================================================================================
     1: /* src/pages/admin/AuditPage.module.scss */
     2: 
     3: .page {
     4:   --card-bg: #ffffff;
     5:   --border: #e5e7eb;
     6:   --thead-bg: #f3f4f6;
     7:   --tbody-border: #f1f5f9;
     8:   --text: #111827;
     9:   --muted: #6b7280;
    10:   --btn-bg: #f9fafb;
    11:   --btn-fg: #111827;
    12:   --btn-border: #e5e7eb;
    13: 
    14:   &[data-theme="dark"] {
    15:     --card-bg: #0f172a;
    16:     --border: #1f2937;
    17:     --thead-bg: #111827;
    18:     --tbody-border: #0b1220;
    19:     --text: #e5e7eb;
    20:     --muted: #9ca3af;
    21:     --btn-bg: #0b1220;
    22:     --btn-fg: #e5e7eb;
    23:     --btn-border: #1f2937;
    24:   }
    25: 
    26:   color: var(--text);
    27: }
    28: 
    29: .header {
    30:   display: flex;
    31:   align-items: center;
    32:   justify-content: space-between;
    33:   margin-bottom: 16px;
    34: }
    35: .title {
    36:   display: flex;
    37:   align-items: center;
    38:   gap: 12px;
    39:   font-size: 20px;
    40:   font-weight: 600;
    41: }
    42: .actions {
    43:   display: flex;
    44:   gap: 8px;
    45: }
    46: 
    47: .toolbar {
    48:   display: flex;
    49:   flex-wrap: wrap;
    50:   gap: 12px;
    51:   align-items: center;
    52:   justify-content: space-between;
    53:   margin-bottom: 12px;
    54: }
    55: 
    56: .searchBox {
    57:   display: flex;
    58:   align-items: center;
    59:   gap: 8px;
    60:   border: 1px solid var(--border);
    61:   background: var(--card-bg);
    62:   padding: 6px 10px;
    63:   border-radius: 10px;
    64:   min-width: 280px;
    65: 
    66:   input {
    67:     background: transparent;
    68:     border: none;
    69:     outline: none;
    70:     color: var(--text);
    71:     width: 260px;
    72:   }
    73: }
    74: 
    75: .filters {
    76:   display: flex;
    77:   align-items: center;
    78:   gap: 12px;
    79:   flex-wrap: wrap;
    80: }
    81: .fTitle {
    82:   display: inline-flex;
    83:   align-items: center;
    84:   gap: 6px;
    85:   color: var(--muted);
    86:   font-size: 13px;
    87: }
    88: .field {
    89:   display: flex;
    90:   flex-direction: column;
    91:   gap: 4px;
    92: 
    93:   label {
    94:     font-size: 12px;
    95:     color: var(--muted);
    96:   }
    97:   .input {
    98:     min-width: 140px;
    99:     border: 1px solid var(--border);
   100:     background: var(--card-bg);
   101:     color: var(--text);
   102:     border-radius: 8px;
   103:     padding: 6px 10px;
   104:   }
   105: }
   106: 
   107: .tableWrap {
   108:   border: 1px solid var(--border);
   109:   border-radius: 14px;
   110:   overflow: hidden;
   111: }
   112: .table {
   113:   width: 100%;
   114:   border-collapse: collapse;
   115: 
   116:   thead {
   117:     background: var(--thead-bg);
   118:     th {
   119:       text-align: left;
   120:       padding: 12px;
   121:       font-weight: 600;
   122:       font-size: 13px;
   123:       border-bottom: 1px solid var(--border);
   124:     }
   125:   }
   126:   tbody {
   127:     td {
   128:       padding: 10px 12px;
   129:       border-bottom: 1px solid var(--tbody-border);
   130:       font-size: 13px;
   131:       vertical-align: middle;
   132:     }
   133:   }
   134: }
   135: 
   136: .truncate {
   137:   max-width: 360px;
   138:   white-space: nowrap;
   139:   overflow: hidden;
   140:   text-overflow: ellipsis;
   141: }
   142: 
   143: .btn {
   144:   display: inline-flex;
   145:   align-items: center;
   146:   gap: 6px;
   147:   border: 1px solid var(--btn-border);
   148:   background: var(--btn-bg);
   149:   color: var(--btn-fg);
   150:   padding: 6px 10px;
   151:   border-radius: 10px;
   152:   font-size: 13px;
   153:   cursor: pointer;
   154: }
   155: 
   156: /* --- Pager: clean card look, comfy spacing, nicer buttons --- */
   157: .pager {
   158:   margin-top: 12px;
   159:   display: flex;
   160:   align-items: center;
   161:   justify-content: space-between;
   162:   gap: 12px;
   163:   flex-wrap: wrap;
   164: 
   165:   /* card look */
   166:   background: var(--card-bg);
   167:   border: 1px solid var(--border);
   168:   border-radius: 12px;
   169:   padding: 8px 10px;
   170:   box-shadow: 0 10px 24px rgba(16, 24, 40, 0.06);
   171: }
   172: 
   173: .pager .field {
   174:   display: flex;
   175:   align-items: center;
   176:   gap: 10px;
   177: 
   178:   label {
   179:     font-size: 12px;
   180:     color: var(--muted);
   181:   }
   182: 
   183:   .input {
   184:     height: 34px;
   185:     min-width: 90px;
   186:     border-radius: 10px;
   187:     border: 1px solid var(--border);
   188:     background: var(--card-bg);
   189:     color: var(--text);
   190:     padding: 6px 10px;
   191:     outline: none;
   192:   }
   193: }
   194: 
   195: .pager .pages {
   196:   display: flex;
   197:   align-items: center;
   198:   gap: 8px;
   199:   flex-wrap: wrap;
   200: }
   201: 
   202: .pager .btn {
   203:   display: inline-flex;
   204:   align-items: center;
   205:   gap: 6px;
   206:   height: 32px;
   207:   padding: 0 10px;
   208:   border-radius: 10px;
   209:   border: 1px solid var(--btn-border);
   210:   background: var(--btn-bg);
   211:   color: var(--btn-fg);
   212:   cursor: pointer;
   213:   transition: box-shadow 0.15s ease, transform 0.02s ease, background 0.15s ease;
   214: 
   215:   &:hover:not(:disabled) {
   216:     box-shadow: 0 6px 14px rgba(16, 24, 40, 0.08);
   217:     background: color-mix(in srgb, var(--btn-bg) 85%, var(--text) 15%);
   218:   }
   219:   &:active:not(:disabled) {
   220:     transform: translateY(1px);
   221:   }
   222:   &:disabled {
   223:     opacity: 0.55;
   224:     cursor: not-allowed;
   225:     box-shadow: none;
   226:     transform: none;
   227:   }
   228: }
   229: 
   230: .pager .muted {
   231:   color: var(--muted);
   232:   font-size: 13px;
   233:   padding: 4px 8px;
   234:   border-radius: 8px;
   235:   background: color-mix(in srgb, var(--btn-bg) 92%, transparent);
   236:   border: 1px dashed var(--btn-border);
   237: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\OnlineUsersPage.jsx
SIZE: 9022 bytes
================================================================================
     1: // src/pages/admin/OnlineUsersPage.jsx
     2: import { useEffect, useMemo, useState } from "react";
     3: import {
     4:   LuChevronsUpDown,
     5:   LuRefreshCw,
     6:   LuSearch,
     7:   LuUsers,
     8: } from "react-icons/lu";
     9: import { listOnlineUsers } from "../../api/admin";
    10: import { useTheme } from "../../hooks/useTheme";
    11: import styles from "./OnlineUsersPage.module.scss";
    12: 
    13: export default function OnlineUsersPage() {
    14:   const { isDark } = useTheme();
    15: 
    16:   // Server pagination state
    17:   const [page, setPage] = useState(0); // zero-based
    18:   const [size, setSize] = useState(10);
    19:   const [total, setTotal] = useState(0);
    20:   const [totalPages, setTotalPages] = useState(1);
    21: 
    22:   // Server sort "field,dir"
    23:   const [sortStr, setSortStr] = useState("id,desc");
    24: 
    25:   // Data + UI
    26:   const [rows, setRows] = useState([]);
    27:   const [busy, setBusy] = useState(false);
    28:   const [forbidden, setForbidden] = useState(false);
    29:   const [filter, setFilter] = useState("");
    30: 
    31:   async function load(p = page) {
    32:     setBusy(true);
    33:     setForbidden(false);
    34:     try {
    35:       const {
    36:         content,
    37:         page: rp,
    38:         size: rs,
    39:         total: tt,
    40:         totalPages: tp,
    41:       } = await listOnlineUsers({ page: p, size, sort: sortStr });
    42: 
    43:       setRows(Array.isArray(content) ? content : []);
    44:       setPage(typeof rp === "number" ? rp : p);
    45:       setSize(typeof rs === "number" ? rs : size);
    46:       setTotal(typeof tt === "number" ? tt : 0);
    47:       setTotalPages(
    48:         typeof tp === "number" && tp > 0
    49:           ? tp
    50:           : Math.max(
    51:               1,
    52:               Math.ceil(
    53:                 (typeof tt === "number" ? tt : 0) /
    54:                   Math.max(1, typeof rs === "number" ? rs : size)
    55:               )
    56:             )
    57:       );
    58:     } catch (e) {
    59:       if (e?.response?.status === 403) {
    60:         setForbidden(true);
    61:       }
    62:     } finally {
    63:       setBusy(false);
    64:     }
    65:   }
    66: 
    67:   useEffect(() => {
    68:     load(0);
    69:     // eslint-disable-next-line react-hooks/exhaustive-deps
    70:   }, []);
    71: 
    72:   // server size/sort yangilansa — boshidan yuklash
    73:   useEffect(() => {
    74:     load(0);
    75:     // eslint-disable-next-line react-hooks/exhaustive-deps
    76:   }, [size, sortStr]);
    77: 
    78:   const filtered = useMemo(() => {
    79:     const q = filter.trim().toLowerCase();
    80:     if (!q) return rows;
    81:     return rows.filter((r) =>
    82:       [
    83:         r.fullName,
    84:         r.username,
    85:         r.role,
    86:         r.status,
    87:         r.orgName,
    88:         r.department,
    89:         r.position,
    90:         r.phone,
    91:         r.title,
    92:       ]
    93:         .filter(Boolean)
    94:         .some((v) => String(v).toLowerCase().includes(q))
    95:     );
    96:   }, [rows, filter]);
    97: 
    98:   const fromRow = total ? page * size + (filtered.length ? 1 : 0) : 0;
    99:   const toRow = total ? page * size + filtered.length : 0;
   100: 
   101:   function toggleServerSort(field) {
   102:     const [curField, curDir] = String(sortStr).split(",");
   103:     const isSame = curField === field;
   104:     const nextDir = isSame ? (curDir === "asc" ? "desc" : "asc") : "asc";
   105:     setSortStr(`${field},${nextDir}`);
   106:   }
   107: 
   108:   return (
   109:     <div className={styles.page} data-theme={isDark ? "dark" : "light"}>
   110:       <div className={styles.header}>
   111:         <div className={styles.title}>
   112:           <LuUsers /> Onlayn foydalanuvchilar
   113:           <span className={styles.badge} title="Onlayn foydalanuvchilar soni">
   114:             {total}
   115:           </span>
   116:         </div>
   117:         <div className={styles.actions}>
   118:           <button
   119:             className={styles.btn}
   120:             onClick={() => load(page)}
   121:             disabled={busy}
   122:             title="Qayta yuklash"
   123:           >
   124:             <LuRefreshCw />
   125:             Qayta yuklash
   126:           </button>
   127:         </div>
   128:       </div>
   129: 
   130:       <div className={styles.toolbar}>
   131:         <div className={styles.searchBox}>
   132:           <LuSearch />
   133:           <input
   134:             placeholder="F.I.Sh / login / tashkilot / bo‘lim / telefon / lavozim…"
   135:             value={filter}
   136:             onChange={(e) => setFilter(e.target.value)}
   137:           />
   138:         </div>
   139:       </div>
   140: 
   141:       {forbidden && (
   142:         <div className={styles.alert}>
   143:           Bu sahifani ko‘rish uchun ruxsat yo‘q (403).
   144:         </div>
   145:       )}
   146: 
   147:       <div className={styles.tableWrap}>
   148:         <table className={styles.table}>
   149:           <thead>
   150:             <tr>
   151:               <th onClick={() => toggleServerSort("id")}>
   152:                 № <LuChevronsUpDown />
   153:               </th>
   154:               <th onClick={() => toggleServerSort("fullName")}>
   155:                 F.I.Sh <LuChevronsUpDown />
   156:               </th>
   157:               <th onClick={() => toggleServerSort("username")}>
   158:                 Login <LuChevronsUpDown />
   159:               </th>
   160:               <th onClick={() => toggleServerSort("role")}>
   161:                 Rol <LuChevronsUpDown />
   162:               </th>
   163:               <th onClick={() => toggleServerSort("status")}>
   164:                 Holat <LuChevronsUpDown />
   165:               </th>
   166:               <th onClick={() => toggleServerSort("orgName")}>
   167:                 Tashkilot <LuChevronsUpDown />
   168:               </th>
   169:               <th onClick={() => toggleServerSort("department")}>
   170:                 Bo‘lim <LuChevronsUpDown />
   171:               </th>
   172:               <th onClick={() => toggleServerSort("phone")}>
   173:                 Telefon <LuChevronsUpDown />
   174:               </th>
   175:               <th onClick={() => toggleServerSort("position")}>
   176:                 Lavozim <LuChevronsUpDown />
   177:               </th>
   178:             </tr>
   179:           </thead>
   180:           <tbody>
   181:             {filtered.map((u) => {
   182:               const phone = (u.phone && String(u.phone).trim()) || "";
   183:               return (
   184:                 <tr key={u.id ?? `${u.username}:${u.rowNo}`}>
   185:                   <td>{u.rowNo}</td>
   186:                   <td className={styles.truncate} title={u.fullName || ""}>
   187:                     {u.fullName || "-"}
   188:                   </td>
   189:                   <td className={styles.truncate} title={u.username || ""}>
   190:                     {u.username || "-"}
   191:                   </td>
   192:                   <td>{u.role || "-"}</td>
   193:                   <td>{u.status || "-"}</td>
   194:                   <td className={styles.truncate} title={u.orgName || ""}>
   195:                     {u.orgName || "-"}
   196:                   </td>
   197:                   <td className={styles.truncate} title={u.department || ""}>
   198:                     {u.department || "-"}
   199:                   </td>
   200:                   <td className={styles.truncate} title={phone}>
   201:                     {phone ? (
   202:                       <a href={`tel:${phone}`} style={{ color: "inherit" }}>
   203:                         {phone}
   204:                       </a>
   205:                     ) : (
   206:                       "-"
   207:                     )}
   208:                   </td>
   209:                   <td className={styles.truncate} title={u.position || ""}>
   210:                     {u.position || "-"}
   211:                   </td>
   212:                 </tr>
   213:               );
   214:             })}
   215:             {!filtered.length && (
   216:               <tr>
   217:                 <td
   218:                   colSpan={9}
   219:                   style={{ padding: 16, textAlign: "center", opacity: 0.6 }}
   220:                 >
   221:                   Hech narsa topilmadi.
   222:                 </td>
   223:               </tr>
   224:             )}
   225:           </tbody>
   226:         </table>
   227:       </div>
   228: 
   229:       <div className={styles.pager}>
   230:         <div className={styles.field}>
   231:           <label>Sahifa hajmi</label>
   232:           <select
   233:             className={styles.input}
   234:             value={size}
   235:             onChange={(e) => {
   236:               const n = Number(e.target.value);
   237:               if (n !== size) {
   238:                 setSize(n);
   239:                 setPage(0);
   240:               }
   241:             }}
   242:           >
   243:             {[10, 20, 50, 100].map((n) => (
   244:               <option key={n} value={n}>
   245:                 {n}
   246:               </option>
   247:             ))}
   248:           </select>
   249:         </div>
   250: 
   251:         <div className={styles.pages}>
   252:           <button
   253:             className={styles.btn}
   254:             disabled={page <= 0 || busy}
   255:             onClick={() => load(0)}
   256:           >
   257:             « Boshiga
   258:           </button>
   259:           <button
   260:             className={styles.btn}
   261:             disabled={page <= 0 || busy}
   262:             onClick={() => load(page - 1)}
   263:           >
   264:             ‹ Oldingi
   265:           </button>
   266:           <span className={styles.muted}>
   267:             Sahifa {page + 1} / {totalPages} · Ko‘rsatilmoqda {fromRow}–{toRow}{" "}
   268:             / {total}
   269:           </span>
   270:           <button
   271:             className={styles.btn}
   272:             disabled={page >= totalPages - 1 || busy}
   273:             onClick={() => load(page + 1)}
   274:           >
   275:             Keyingi ›
   276:           </button>
   277:           <button
   278:             className={styles.btn}
   279:             disabled={page >= totalPages - 1 || busy}
   280:             onClick={() => load(totalPages - 1)}
   281:           >
   282:             Oxiriga »
   283:           </button>
   284:         </div>
   285:       </div>
   286:     </div>
   287:   );
   288: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\OnlineUsersPage.module.scss
SIZE: 4657 bytes
================================================================================
     1: /* src/pages/admin/OnlineUsersPage.module.scss */
     2: 
     3: .page {
     4:   --card-bg: #ffffff;
     5:   --border: #e5e7eb;
     6:   --thead-bg: #f3f4f6;
     7:   --tbody-border: #f1f5f9;
     8:   --text: #111827;
     9:   --muted: #6b7280;
    10:   --btn-bg: #f9fafb;
    11:   --btn-fg: #111827;
    12:   --btn-border: #e5e7eb;
    13:   --badge-bg: #eef2ff;
    14:   --badge-fg: #4338ca;
    15:   --badge-border: #e0e7ff;
    16: 
    17:   &[data-theme="dark"] {
    18:     --card-bg: #0f172a;
    19:     --border: #1f2937;
    20:     --thead-bg: #111827;
    21:     --tbody-border: #0b1220;
    22:     --text: #e5e7eb;
    23:     --muted: #9ca3af;
    24:     --btn-bg: #0b1220;
    25:     --btn-fg: #e5e7eb;
    26:     --btn-border: #1f2937;
    27:     --badge-bg: #0b1220;
    28:     --badge-fg: #93c5fd;
    29:     --badge-border: #1f2937;
    30:   }
    31: 
    32:   color: var(--text);
    33: }
    34: 
    35: /* Header */
    36: .header {
    37:   display: flex;
    38:   align-items: center;
    39:   justify-content: space-between;
    40:   margin-bottom: 16px;
    41: }
    42: .title {
    43:   display: flex;
    44:   align-items: center;
    45:   gap: 12px;
    46:   font-size: 20px;
    47:   font-weight: 600;
    48: }
    49: .badge {
    50:   display: inline-flex;
    51:   align-items: center;
    52:   gap: 6px;
    53:   background: var(--badge-bg);
    54:   color: var(--badge-fg);
    55:   border: 1px solid var(--badge-border);
    56:   border-radius: 999px;
    57:   padding: 4px 10px;
    58:   font-size: 12px;
    59: }
    60: 
    61: /* Toolbar */
    62: .toolbar {
    63:   display: flex;
    64:   flex-wrap: wrap;
    65:   gap: 12px;
    66:   align-items: center;
    67:   justify-content: space-between;
    68:   margin-bottom: 12px;
    69: }
    70: .searchBox {
    71:   display: flex;
    72:   align-items: center;
    73:   gap: 8px;
    74:   border: 1px solid var(--border);
    75:   background: var(--card-bg);
    76:   padding: 6px 10px;
    77:   border-radius: 10px;
    78:   min-width: 280px;
    79: 
    80:   input {
    81:     background: transparent;
    82:     border: none;
    83:     outline: none;
    84:     color: var(--text);
    85:     width: 260px;
    86:   }
    87: }
    88: 
    89: /* Alerts */
    90: .alert {
    91:   display: flex;
    92:   align-items: center;
    93:   gap: 8px;
    94:   border: 1px solid var(--border);
    95:   background: rgba(255, 176, 31, 0.08);
    96:   padding: 10px 12px;
    97:   border-radius: 12px;
    98:   margin-bottom: 12px;
    99: }
   100: 
   101: /* Table */
   102: .tableWrap {
   103:   border: 1px solid var(--border);
   104:   border-radius: 14px;
   105:   overflow: hidden;
   106: }
   107: .table {
   108:   width: 100%;
   109:   border-collapse: collapse;
   110: 
   111:   thead {
   112:     background: var(--thead-bg);
   113:     th {
   114:       text-align: left;
   115:       padding: 12px;
   116:       font-weight: 600;
   117:       font-size: 13px;
   118:       cursor: pointer;
   119:       border-bottom: 1px solid var(--border);
   120:       user-select: none;
   121:     }
   122:   }
   123:   tbody {
   124:     td {
   125:       padding: 10px 12px;
   126:       border-bottom: 1px solid var(--tbody-border);
   127:       font-size: 13px;
   128:       vertical-align: middle;
   129:     }
   130:   }
   131: }
   132: 
   133: /* Utils */
   134: .truncate {
   135:   max-width: 360px;
   136:   white-space: nowrap;
   137:   overflow: hidden;
   138:   text-overflow: ellipsis;
   139: }
   140: 
   141: .actions {
   142:   display: flex;
   143:   gap: 8px;
   144: }
   145: 
   146: .btn {
   147:   display: inline-flex;
   148:   align-items: center;
   149:   gap: 6px;
   150:   border: 1px solid var(--btn-border);
   151:   background: var(--btn-bg);
   152:   color: var(--btn-fg);
   153:   padding: 6px 10px;
   154:   border-radius: 10px;
   155:   font-size: 13px;
   156:   cursor: pointer;
   157: }
   158: 
   159: /* Pager */
   160: .pager {
   161:   margin-top: 12px;
   162:   display: flex;
   163:   align-items: center;
   164:   justify-content: space-between;
   165:   gap: 12px;
   166:   flex-wrap: wrap;
   167: 
   168:   background: var(--card-bg);
   169:   border: 1px solid var(--border);
   170:   border-radius: 12px;
   171:   padding: 8px 10px;
   172:   box-shadow: 0 10px 24px rgba(16, 24, 40, 0.06);
   173: }
   174: 
   175: .pager .field {
   176:   display: flex;
   177:   align-items: center;
   178:   gap: 10px;
   179: 
   180:   label {
   181:     font-size: 12px;
   182:     color: var(--muted);
   183:   }
   184: 
   185:   .input {
   186:     height: 34px;
   187:     min-width: 90px;
   188:     border-radius: 10px;
   189:     border: 1px solid var(--border);
   190:     background: var(--card-bg);
   191:     color: var(--text);
   192:     padding: 6px 10px;
   193:     outline: none;
   194:   }
   195: }
   196: 
   197: .pager .pages {
   198:   display: flex;
   199:   align-items: center;
   200:   gap: 8px;
   201:   flex-wrap: wrap;
   202: }
   203: 
   204: .pager .btn {
   205:   display: inline-flex;
   206:   align-items: center;
   207:   gap: 6px;
   208:   height: 32px;
   209:   padding: 0 10px;
   210:   border-radius: 10px;
   211:   border: 1px solid var(--btn-border);
   212:   background: var(--btn-bg);
   213:   color: var(--btn-fg);
   214:   cursor: pointer;
   215:   transition: box-shadow 0.15s ease, transform 0.02s ease, background 0.15s ease;
   216: 
   217:   &:hover:not(:disabled) {
   218:     box-shadow: 0 6px 14px rgba(16, 24, 40, 0.08);
   219:     background: color-mix(in srgb, var(--btn-bg) 85%, var(--text) 15%);
   220:   }
   221:   &:active:not(:disabled) {
   222:     transform: translateY(1px);
   223:   }
   224:   &:disabled {
   225:     opacity: 0.55;
   226:     cursor: not-allowed;
   227:     box-shadow: none;
   228:     transform: none;
   229:   }
   230: }
   231: 
   232: .pager .muted {
   233:   color: var(--muted);
   234:   font-size: 13px;
   235:   padding: 4px 8px;
   236:   border-radius: 8px;
   237:   background: color-mix(in srgb, var(--btn-bg) 92%, transparent);
   238:   border: 1px dashed var(--btn-border);
   239: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\OrgUnitSelect.jsx
SIZE: 7632 bytes
================================================================================
     1: import { useEffect, useLayoutEffect, useMemo, useRef, useState } from "react";
     2: import { createPortal } from "react-dom";
     3: import { LuChevronDown, LuSearch, LuX } from "react-icons/lu";
     4: import { getOrgUnit, searchOrgUnits } from "../../api/org";
     5: import { debugError } from "../../utils/debug";
     6: import styles from "./OrgUnitSelect.module.scss";
     7: 
     8: /** Qidiruvli org tanlash (dropdown) */
     9: export default function OrgUnitSelect({
    10:   value = null,
    11:   onChange,
    12:   placeholder = "Tashkilot birligini tanlang...",
    13:   allowClear = true,
    14:   disabled = false,
    15: }) {
    16:   const boxRef = useRef(null);
    17:   const inputRef = useRef(null);
    18:   const menuRef = useRef(null); // <— portal menyu
    19: 
    20:   const [open, setOpen] = useState(false);
    21:   const [query, setQuery] = useState("");
    22:   const [loading, setLoading] = useState(false);
    23:   const [opts, setOpts] = useState([]);
    24:   const [selected, setSelected] = useState(null); // {id,name,code?,parentId?}
    25: 
    26:   const [pos, setPos] = useState({ left: 0, top: 0, width: 0, up: false });
    27: 
    28:   // value -> label
    29:   useEffect(() => {
    30:     let active = true;
    31:     (async () => {
    32:       if (!value) {
    33:         setSelected(null);
    34:         return;
    35:       }
    36:       try {
    37:         const res = await getOrgUnit(value);
    38:         if (active && res) {
    39:           setSelected({
    40:             id: res.id,
    41:             name: res.name,
    42:             code: res.code,
    43:             parentId: res.parentId ?? null,
    44:           });
    45:         }
    46:       } catch {
    47:         if (active) setSelected(null);
    48:       }
    49:     })();
    50:     return () => {
    51:       active = false;
    52:     };
    53:   }, [value]);
    54: 
    55:   // qidiruv (debounce)
    56:   useEffect(() => {
    57:     if (!open) return;
    58:     const h = setTimeout(async () => {
    59:       setLoading(true);
    60:       try {
    61:         const res = await searchOrgUnits({
    62:           q: query || undefined,
    63:           page: 0,
    64:           size: 10,
    65:           sort: "name,asc",
    66:         });
    67:         const items = (res?.content || []).map((o) => ({
    68:           id: o.id,
    69:           name: o.name,
    70:           code: o.code,
    71:           parentId: o.parentId,
    72:         }));
    73:         setOpts(items);
    74:       } catch (e) {
    75:         debugError("Org search error", e);
    76:         setOpts([]);
    77:       } finally {
    78:         setLoading(false);
    79:       }
    80:     }, 220);
    81:     return () => clearTimeout(h);
    82:   }, [open, query]);
    83: 
    84:   const recompute = () => {
    85:     const el = boxRef.current;
    86:     if (!el) return;
    87:     const r = el.getBoundingClientRect();
    88:     const gap = 6;
    89:     const menuH = 320;
    90:     const toBottom = window.innerHeight - (r.bottom + gap);
    91:     const up = toBottom < 220 && r.top > 220;
    92:     const top = up
    93:       ? Math.max(8, r.top - gap - menuH)
    94:       : Math.min(window.innerHeight - 8, r.bottom + gap);
    95:     setPos({
    96:       left: Math.max(8, r.left),
    97:       top,
    98:       width: Math.max(260, r.width),
    99:       up,
   100:     });
   101:   };
   102: 
   103:   useLayoutEffect(() => {
   104:     if (!open) return;
   105:     recompute();
   106:     const onWin = () => recompute();
   107:     window.addEventListener("resize", onWin);
   108:     window.addEventListener("scroll", onWin, true);
   109:     const scroller = boxRef.current?.closest("[data-dialog-body]") || document;
   110:     scroller.addEventListener("scroll", onWin, true);
   111:     return () => {
   112:       window.removeEventListener("resize", onWin);
   113:       window.removeEventListener("scroll", onWin, true);
   114:       scroller.removeEventListener("scroll", onWin, true);
   115:     };
   116:   }, [open]);
   117: 
   118:   // tashqi klik — lekin portal menyuni hisobga olamiz
   119:   useEffect(() => {
   120:     const onDocDown = (e) => {
   121:       if (!open) return;
   122:       const root = boxRef.current;
   123:       const menu = menuRef.current;
   124:       if (root && root.contains(e.target)) return;
   125:       if (menu && menu.contains(e.target)) return; // <— menyu ichida: yopmaymiz
   126:       setOpen(false);
   127:     };
   128:     document.addEventListener("mousedown", onDocDown, true);
   129:     return () => document.removeEventListener("mousedown", onDocDown, true);
   130:   }, [open]);
   131: 
   132:   function choose(opt) {
   133:     setSelected(opt);
   134:     onChange?.(opt || null);
   135:     setOpen(false);
   136:   }
   137: 
   138:   function clear() {
   139:     setSelected(null);
   140:     onChange?.(null);
   141:     setQuery("");
   142:     inputRef.current?.focus();
   143:   }
   144: 
   145:   const label = useMemo(() => {
   146:     if (!selected) return "";
   147:     return selected.code
   148:       ? `${selected.name} (${selected.code})`
   149:       : selected.name;
   150:   }, [selected]);
   151: 
   152:   const MenuPortal =
   153:     open &&
   154:     createPortal(
   155:       <div
   156:         ref={menuRef}
   157:         className={`${styles.menu} ${pos.up ? styles.up : ""}`}
   158:         style={{ left: pos.left, top: pos.top, width: pos.width }}
   159:         role="listbox"
   160:         aria-label="Bo'linmalar"
   161:       >
   162:         {loading ? (
   163:           <div className={styles.empty}>Yuklanmoqda...</div>
   164:         ) : opts.length ? (
   165:           opts.map((o) => (
   166:             <div
   167:               key={o.id}
   168:               className={styles.item}
   169:               onMouseDown={() => choose(o)} // <— mousedown: outside handler yopib yuborishidan oldin ishlaydi
   170:               role="option"
   171:               aria-selected={selected?.id === o.id}
   172:             >
   173:               <div className={styles.itemRow}>
   174:                 <div className={styles.itemName}>{o.name}</div>
   175:                 {o.code && <div className={styles.code}>#{o.code}</div>}
   176:               </div>
   177:               <div className={styles.itemMeta}>
   178:                 {o.parentId ? (
   179:                   <span className={styles.parent}>parent: {o.parentId}</span>
   180:                 ) : (
   181:                   <span className={styles.root}>ildiz</span>
   182:                 )}
   183:               </div>
   184:             </div>
   185:           ))
   186:         ) : (
   187:           <div className={styles.empty}>Hech narsa topilmadi</div>
   188:         )}
   189:       </div>,
   190:       document.body
   191:     );
   192: 
   193:   return (
   194:     <>
   195:       <div
   196:         className={styles.wrap}
   197:         ref={boxRef}
   198:         data-disabled={disabled ? "" : undefined}
   199:         role="combobox"
   200:         aria-expanded={open}
   201:         aria-haspopup="listbox"
   202:         tabIndex={0}
   203:         onKeyDown={(e) => {
   204:           if (e.key === "Enter") setOpen(true);
   205:         }}
   206:       >
   207:         <div className={styles.control}>
   208:           <div
   209:             className={styles.inputWrap}
   210:             onClick={(e) => e.stopPropagation()}
   211:           >
   212:             <LuSearch className={styles.icon} />
   213:             <input
   214:               ref={inputRef}
   215:               className={styles.input}
   216:               placeholder={selected ? "" : placeholder}
   217:               value={open ? query : label}
   218:               onChange={(e) => setQuery(e.target.value)}
   219:               onFocus={() => !disabled && setOpen(true)}
   220:               disabled={disabled}
   221:             />
   222:           </div>
   223:           <div className={styles.actions}>
   224:             {allowClear && selected && !disabled && (
   225:               <button
   226:                 className={styles.iconBtn}
   227:                 onClick={(e) => {
   228:                   e.stopPropagation();
   229:                   clear();
   230:                 }}
   231:                 title="Tozalash"
   232:                 type="button"
   233:               >
   234:                 <LuX />
   235:               </button>
   236:             )}
   237:             <button
   238:               className={styles.iconBtn}
   239:               onClick={(e) => {
   240:                 e.stopPropagation();
   241:                 setOpen((s) => !s);
   242:                 if (!open) setTimeout(recompute, 0);
   243:               }}
   244:               title={open ? "Yopish" : "Ochish"}
   245:               type="button"
   246:             >
   247:               <LuChevronDown className={styles.chev} />
   248:             </button>
   249:           </div>
   250:         </div>
   251:       </div>
   252: 
   253:       {MenuPortal}
   254:     </>
   255:   );
   256: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\OrgUnitSelect.module.scss
SIZE: 2918 bytes
================================================================================
     1: .wrap {
     2:   position: relative;
     3:   min-width: 260px;
     4: }
     5: .wrap[data-disabled] {
     6:   opacity: 0.6;
     7:   pointer-events: none;
     8: }
     9: 
    10: .control {
    11:   display: flex;
    12:   align-items: center;
    13:   justify-content: space-between;
    14:   gap: 8px;
    15:   border: 1px solid var(--card-border, #e5e7eb);
    16:   border-radius: 10px;
    17:   padding: 6px 8px 6px 10px;
    18:   background: var(--card-bg, #fff);
    19:   color: inherit;
    20: }
    21: 
    22: .inputWrap {
    23:   display: flex;
    24:   align-items: center;
    25:   gap: 8px;
    26:   flex: 1;
    27: }
    28: .icon {
    29:   opacity: 0.6;
    30: }
    31: .input {
    32:   border: none;
    33:   outline: none;
    34:   background: transparent;
    35:   color: inherit;
    36:   width: 100%;
    37: }
    38: .actions {
    39:   display: flex;
    40:   align-items: center;
    41:   gap: 4px;
    42: }
    43: .iconBtn {
    44:   display: inline-grid;
    45:   place-items: center;
    46:   width: 28px;
    47:   height: 28px;
    48:   border-radius: 8px;
    49:   border: 1px solid var(--card-border, #e5e7eb);
    50:   background: transparent;
    51:   cursor: pointer;
    52: }
    53: .iconBtn:hover {
    54:   background: rgba(0, 0, 0, 0.05);
    55: }
    56: .chev {
    57:   opacity: 0.7;
    58: }
    59: 
    60: /* ➜ Portal menyu (body ga render qilinadi) */
    61: .menu {
    62:   position: fixed;
    63:   z-index: 20000; /* <-- modal/backdrop ustida aniq ishlashi uchun balandroq */
    64:   border: 1px solid var(--card-border, #e5e7eb);
    65:   background: var(--card-bg, #fff);
    66:   color: inherit;
    67:   border-radius: 12px;
    68:   box-shadow: 0 10px 28px rgba(0, 0, 0, 0.15);
    69:   max-height: 320px;
    70:   overflow: auto;
    71:   transform-origin: top;
    72:   animation: dropdown 0.12s ease-out;
    73: }
    74: .up {
    75:   transform-origin: bottom;
    76: }
    77: 
    78: @keyframes dropdown {
    79:   from {
    80:     transform: scale(0.98);
    81:     opacity: 0.85;
    82:   }
    83:   to {
    84:     transform: scale(1);
    85:     opacity: 1;
    86:   }
    87: }
    88: 
    89: .item {
    90:   padding: 10px 12px;
    91:   border-top: 1px solid var(--row-border, #f1f5f9);
    92:   cursor: pointer;
    93: }
    94: .item:first-child {
    95:   border-top: 0;
    96: }
    97: .item:hover {
    98:   background: rgba(0, 0, 0, 0.04);
    99: }
   100: .itemRow {
   101:   display: flex;
   102:   align-items: center;
   103:   justify-content: space-between;
   104:   gap: 10px;
   105: }
   106: .itemName {
   107:   font-weight: 600;
   108: }
   109: .code {
   110:   font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
   111:     "Liberation Mono", monospace;
   112:   font-size: 12px;
   113:   opacity: 0.75;
   114:   padding: 2px 6px;
   115:   border-radius: 999px;
   116:   border: 1px dashed var(--card-border, #e5e7eb);
   117: }
   118: .itemMeta {
   119:   font-size: 12px;
   120:   opacity: 0.7;
   121:   display: flex;
   122:   gap: 8px;
   123:   margin-top: 2px;
   124: }
   125: .root {
   126:   color: #059669;
   127: }
   128: .parent {
   129:   color: #64748b;
   130: }
   131: 
   132: .empty {
   133:   padding: 12px;
   134:   text-align: center;
   135:   opacity: 0.7;
   136: }
   137: 
   138: /* Dark */
   139: :global([data-theme="dark"]) .control {
   140:   --card-bg: #0f172a;
   141:   --card-border: #243042;
   142: }
   143: :global([data-theme="dark"]) .menu {
   144:   --card-bg: #0f172a;
   145:   --card-border: #243042;
   146: }
   147: :global([data-theme="dark"]) .iconBtn:hover {
   148:   background: rgba(255, 255, 255, 0.06);
   149: }
   150: :global([data-theme="dark"]) .item:hover {
   151:   background: rgba(255, 255, 255, 0.05);
   152: }
   153: :global([data-theme="dark"]) .code {
   154:   border-color: #2f3c52;
   155: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\SessionsPage.jsx
SIZE: 12792 bytes
================================================================================
     1: // src/pages/admin/SessionsPage.jsx
     2: import { useEffect, useMemo, useState } from "react";
     3: import { debugError } from "../../utils/debug";
     4: import {
     5:   listSessions,
     6:   revokeAllForUser,
     7:   revokeDevice,
     8:   getOnlineCount,
     9: } from "../../api/admin";
    10: import { useTheme } from "../../hooks/useTheme";
    11: import styles from "./SessionsPage.module.scss";
    12: import {
    13:   LuActivity,
    14:   LuShieldAlert,
    15:   LuRefreshCw,
    16:   LuTrash2,
    17:   LuMonitorSmartphone,
    18:   LuChevronsUpDown,
    19:   LuSearch,
    20:   LuSmartphoneNfc,
    21: } from "react-icons/lu";
    22: 
    23: function fmt(v) {
    24:   if (!v) return "-";
    25:   const d = new Date(v);
    26:   if (Number.isNaN(+d)) return String(v);
    27:   return d.toLocaleString();
    28: }
    29: 
    30: export default function SessionsPage() {
    31:   const { isDark } = useTheme();
    32: 
    33:   // Jadval ma’lumotlari
    34:   const [rows, setRows] = useState([]);
    35: 
    36:   // Server paginatsiya holati
    37:   const [page, setPage] = useState(0); // zero-based
    38:   const [size, setSize] = useState(10); // default 10
    39:   const [total, setTotal] = useState(0);
    40:   const [totalPagesState, setTotalPagesState] = useState(1);
    41:   const [sortStr] = useState("lastSeenAt,desc"); // removed unused setter
    42: 
    43:   // UI holatlar
    44:   const [online, setOnline] = useState(0);
    45:   const [busy, setBusy] = useState(false);
    46:   const [filter, setFilter] = useState("");
    47:   const [sortBy, setSortBy] = useState({ key: "lastSeenAt", dir: "desc" });
    48: 
    49:   // Admin uchun filtrlar
    50:   const [userId, setUserId] = useState("");
    51:   const [includeRevoked, setIncludeRevoked] = useState(false);
    52:   const [includeExpired, setIncludeExpired] = useState(false);
    53: 
    54:   const [forbidden, setForbidden] = useState(false);
    55: 
    56:   const effectiveTotalPages =
    57:     typeof totalPagesState === "number" && totalPagesState > 0
    58:       ? totalPagesState
    59:       : Math.max(1, Math.ceil(total / Math.max(1, size)));
    60: 
    61:   const fromRow = total ? page * size + (rows.length ? 1 : 0) : 0;
    62:   const toRow = total ? page * size + rows.length : 0;
    63: 
    64:   async function load(p = page) {
    65:     setBusy(true);
    66:     setForbidden(false);
    67:     try {
    68:       const [
    69:         { content, page: rp, size: rs, total: tt, totalPages: tpages },
    70:         oc,
    71:       ] = await Promise.all([
    72:         listSessions({
    73:           userId: userId ? Number(userId) : undefined,
    74:           includeRevoked,
    75:           includeExpired,
    76:           page: p,
    77:           size,
    78:           sort: sortStr,
    79:         }),
    80:         getOnlineCount(),
    81:       ]);
    82: 
    83:       setRows(Array.isArray(content) ? content : []);
    84:       setPage(typeof rp === "number" ? rp : p);
    85:       setSize(typeof rs === "number" ? rs : size);
    86:       setTotal(typeof tt === "number" ? tt : 0);
    87:       setTotalPagesState(
    88:         typeof tpages === "number" && tpages > 0
    89:           ? tpages
    90:           : Math.max(
    91:               1,
    92:               Math.ceil(
    93:                 (typeof tt === "number" ? tt : 0) /
    94:                   Math.max(1, typeof rs === "number" ? rs : size)
    95:               )
    96:             )
    97:       );
    98:       setOnline(oc?.online ?? 0);
    99:     } catch (e) {
   100:       if (e?.response?.status === 403) {
   101:         setForbidden(true);
   102:       } else {
   103:         debugError("Sessions load error", e);
   104:       }
   105:     } finally {
   106:       setBusy(false);
   107:     }
   108:   }
   109: 
   110:   useEffect(() => {
   111:     load(0); // ilk yuklash
   112:     // eslint-disable-next-line react-hooks/exhaustive-deps
   113:   }, []);
   114: 
   115:   // server filtrlari/size/sort o'zgarsa 1-sahifadan qayta yuklash
   116:   useEffect(() => {
   117:     load(0);
   118:     // eslint-disable-next-line react-hooks/exhaustive-deps
   119:   }, [size, sortStr, includeRevoked, includeExpired]);
   120: 
   121:   const filtered = useMemo(() => {
   122:     let r = rows;
   123:     const q = filter.trim().toLowerCase();
   124:     if (q) {
   125:       r = r.filter((x) =>
   126:         [x.username, x.deviceId, x.ip, x.userAgent]
   127:           .filter(Boolean)
   128:           .some((v) => String(v).toLowerCase().includes(q))
   129:       );
   130:     }
   131:     const { key, dir } = sortBy;
   132:     const mul = dir === "asc" ? 1 : -1;
   133:     r = [...r].sort((a, b) => {
   134:       const va = a[key],
   135:         vb = b[key];
   136:       if (va === vb) return 0;
   137:       if (va == null) return -1 * mul;
   138:       if (vb == null) return 1 * mul;
   139:       return (va > vb ? 1 : -1) * mul;
   140:     });
   141:     return r;
   142:   }, [rows, filter, sortBy]);
   143: 
   144:   function changeSort(key) {
   145:     setSortBy((s) =>
   146:       s.key === key
   147:         ? { key, dir: s.dir === "asc" ? "desc" : "asc" }
   148:         : { key, dir: "desc" }
   149:     );
   150:     // Agar serverni ham shu sort bo'yicha yuritmoqchi bo'lsangiz:
   151:     // const nextDir = (sortBy.key === key && sortBy.dir === "asc") ? "desc" : "asc";
   152:     // setSortStr(`${key},${nextDir}`);
   153:   }
   154: 
   155:   return (
   156:     <div className={styles.page} data-theme={isDark ? "dark" : "light"}>
   157:       <div className={styles.header}>
   158:         <div className={styles.title}>
   159:           <LuMonitorSmartphone /> Sessiyalar
   160:           <span
   161:             className={styles.badge}
   162:             title="Taxminiy onlayn foydalanuvchilar soni"
   163:           >
   164:             <LuActivity /> {online}
   165:           </span>
   166:         </div>
   167:         <div className={styles.actions}>
   168:           <button
   169:             className={styles.btn}
   170:             onClick={() => load(page)}
   171:             disabled={busy}
   172:             title="Qayta yuklash"
   173:           >
   174:             <LuRefreshCw />
   175:             Qayta yuklash
   176:           </button>
   177:         </div>
   178:       </div>
   179: 
   180:       <div className={styles.toolbar}>
   181:         <div className={styles.searchBox}>
   182:           <LuSearch />
   183:           <input
   184:             placeholder="Foydalanuvchi / qurilma / IP / UA bo‘yicha qidirish..."
   185:             value={filter}
   186:             onChange={(e) => setFilter(e.target.value)}
   187:           />
   188:         </div>
   189: 
   190:         <div className={styles.filters}>
   191:           <div className={styles.fieldInline}>
   192:             <label>Foydalanuvchi ID</label>
   193:             <input
   194:               className={styles.input}
   195:               placeholder="(joriy)"
   196:               value={userId}
   197:               onChange={(e) => setUserId(e.target.value.replace(/[^\d]/g, ""))}
   198:               inputMode="numeric"
   199:             />
   200:           </div>
   201: 
   202:           <label className={styles.switch}>
   203:             <input
   204:               type="checkbox"
   205:               checked={includeRevoked}
   206:               onChange={(e) => setIncludeRevoked(e.target.checked)}
   207:             />
   208:             <span>Bekor qilinganlarni ham ko‘rsat</span>
   209:           </label>
   210: 
   211:           <label className={styles.switch}>
   212:             <input
   213:               type="checkbox"
   214:               checked={includeExpired}
   215:               onChange={(e) => setIncludeExpired(e.target.checked)}
   216:             />
   217:             <span>Muddati o‘tganlarni ham ko‘rsat</span>
   218:           </label>
   219: 
   220:           <button
   221:             className={styles.btn}
   222:             onClick={() => load(0)}
   223:             disabled={busy}
   224:             title="Filtrlarni qo‘llash"
   225:           >
   226:             <LuChevronsUpDown /> Qo‘llash
   227:           </button>
   228:         </div>
   229:       </div>
   230: 
   231:       {forbidden && (
   232:         <div className={styles.alert}>
   233:           <LuShieldAlert /> Sizda bu sahifani ko‘rish uchun ruxsat yo‘q (403).
   234:         </div>
   235:       )}
   236: 
   237:       <div className={styles.tableWrap}>
   238:         <table className={styles.table}>
   239:           <thead>
   240:             <tr>
   241:               <th onClick={() => changeSort("id")}>№</th>
   242:               <th>Foydalanuvchi</th>
   243:               <th>Qurilma</th>
   244:               <th className={styles.truncate}>Brauzer (User-Agent)</th>
   245:               <th>IP</th>
   246:               <th onClick={() => changeSort("createdAt")}>Yaratilgan</th>
   247:               <th onClick={() => changeSort("lastSeenAt")}>Oxirgi ko‘rildi</th>
   248:               <th onClick={() => changeSort("expiresAt")}>Tugash vaqti</th>
   249:               <th>Harakatlar</th>
   250:             </tr>
   251:           </thead>
   252:           <tbody>
   253:             {filtered.map((r) => (
   254:               <tr
   255:                 key={`${r.userId ?? "me"}:${r.deviceId}:${r.tokenSuffix ?? ""}`}
   256:               >
   257:                 <td>{r.id}</td>
   258:                 <td className={styles.truncate}>
   259:                   <span className={styles.badge}>
   260:                     {r.username ?? "(foydalanuvchi)"}{" "}
   261:                     {r.userId != null && (
   262:                       <small style={{ opacity: 0.7 }}>#{r.userId}</small>
   263:                     )}
   264:                   </span>
   265:                 </td>
   266:                 <td className={styles.truncate} title={r.deviceId}>
   267:                   <span className={styles.badgeOutline}>
   268:                     <LuMonitorSmartphone /> {r.deviceId}
   269:                   </span>
   270:                 </td>
   271:                 <td className={styles.truncate} title={r.userAgent}>
   272:                   {r.userAgent || "-"}
   273:                 </td>
   274:                 <td>{r.ip || "-"}</td>
   275:                 <td>{fmt(r.createdAt)}</td>
   276:                 <td>{fmt(r.lastSeenAt)}</td>
   277:                 <td>{fmt(r.expiresAt)}</td>
   278:                 <td className={styles.rowActions}>
   279:                   <button
   280:                     className={`${styles.btn} ${styles.btnWarn}`}
   281:                     title="Ushbu qurilma sessiyasini bekor qilish"
   282:                     onClick={async () => {
   283:                       if (
   284:                         !confirm(
   285:                           `Qurilma sessiyasi bekor qilinsinmi?\n\nDevice ID: ${r.deviceId}`
   286:                         )
   287:                       )
   288:                         return;
   289:                       await revokeDevice(r.userId, r.deviceId);
   290:                       await load(page);
   291:                     }}
   292:                   >
   293:                     <LuSmartphoneNfc size={16} /> Qurilmani bekor qilish
   294:                   </button>
   295:                   <button
   296:                     className={`${styles.btn} ${styles.btnDanger}`}
   297:                     title="Ushbu foydalanuvchining joriy qurilmadan tashqari barcha sessiyalarini bekor qilish"
   298:                     onClick={async () => {
   299:                       const effectiveUserId =
   300:                         r.userId ?? (userId ? Number(userId) : undefined);
   301:                       if (
   302:                         !confirm(
   303:                           `Foydalanuvchining barcha sessiyalari bekor qilinsinmi? (joriy qurilma saqlanadi)\n\nFoydalanuvchi ID: ${
   304:                             effectiveUserId ?? "(joriy)"
   305:                           }`
   306:                         )
   307:                       )
   308:                         return;
   309:                       await revokeAllForUser(effectiveUserId);
   310:                       await load(0);
   311:                     }}
   312:                   >
   313:                     <LuTrash2 size={16} /> Hammasini bekor qilish
   314:                   </button>
   315:                 </td>
   316:               </tr>
   317:             ))}
   318:             {!filtered.length && (
   319:               <tr>
   320:                 <td
   321:                   colSpan={9}
   322:                   style={{ padding: 16, textAlign: "center", opacity: 0.6 }}
   323:                 >
   324:                   Hech narsa topilmadi.
   325:                 </td>
   326:               </tr>
   327:             )}
   328:           </tbody>
   329:         </table>
   330:       </div>
   331: 
   332:       {/* Pager */}
   333:       <div className={styles.pager}>
   334:         <div className={styles.field}>
   335:           <label>Sahifa hajmi</label>
   336:           <select
   337:             className={styles.input}
   338:             value={size}
   339:             onChange={(e) => {
   340:               const n = Number(e.target.value);
   341:               if (n !== size) {
   342:                 setSize(n);
   343:                 setPage(0);
   344:               }
   345:             }}
   346:           >
   347:             {[10, 20, 50, 100].map((n) => (
   348:               <option key={n} value={n}>
   349:                 {n}
   350:               </option>
   351:             ))}
   352:           </select>
   353:         </div>
   354: 
   355:         <div className={styles.pages}>
   356:           <button
   357:             className={styles.btn}
   358:             disabled={page <= 0 || busy}
   359:             onClick={() => load(0)}
   360:           >
   361:             « Boshiga
   362:           </button>
   363:           <button
   364:             className={styles.btn}
   365:             disabled={page <= 0 || busy}
   366:             onClick={() => load(page - 1)}
   367:           >
   368:             ‹ Oldingi
   369:           </button>
   370:           <span className={styles.muted}>
   371:             Sahifa {page + 1} / {effectiveTotalPages} · Ko‘rsatilmoqda {fromRow}
   372:             –{toRow} / {total}
   373:           </span>
   374:           <button
   375:             className={styles.btn}
   376:             disabled={page >= effectiveTotalPages - 1 || busy}
   377:             onClick={() => load(page + 1)}
   378:           >
   379:             Keyingi ›
   380:           </button>
   381:           <button
   382:             className={styles.btn}
   383:             disabled={page >= effectiveTotalPages - 1 || busy}
   384:             onClick={() => load(effectiveTotalPages - 1)}
   385:           >
   386:             Oxiriga »
   387:           </button>
   388:         </div>
   389:       </div>
   390:     </div>
   391:   );
   392: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\SessionsPage.module.scss
SIZE: 5762 bytes
================================================================================
     1: /* src/pages/admin/SessionsPage.module.scss */
     2: 
     3: /* Tema o'zgaruvchilari */
     4: .page {
     5:   --card-bg: #ffffff;
     6:   --border: #e5e7eb;
     7:   --thead-bg: #f3f4f6;
     8:   --tbody-border: #f1f5f9;
     9:   --text: #111827;
    10:   --muted: #6b7280;
    11:   --btn-bg: #f9fafb;
    12:   --btn-fg: #111827;
    13:   --btn-border: #e5e7eb;
    14:   --badge-bg: #eef2ff;
    15:   --badge-fg: #4338ca;
    16:   --badge-border: #e0e7ff;
    17: 
    18:   &[data-theme="dark"] {
    19:     --card-bg: #0f172a;
    20:     --border: #1f2937;
    21:     --thead-bg: #111827;
    22:     --tbody-border: #0b1220;
    23:     --text: #e5e7eb;
    24:     --muted: #9ca3af;
    25:     --btn-bg: #0b1220;
    26:     --btn-fg: #e5e7eb;
    27:     --btn-border: #1f2937;
    28:     --badge-bg: #0b1220;
    29:     --badge-fg: #93c5fd;
    30:     --badge-border: #1f2937;
    31:   }
    32: 
    33:   color: var(--text);
    34: }
    35: 
    36: /* Header */
    37: .header {
    38:   display: flex;
    39:   align-items: center;
    40:   justify-content: space-between;
    41:   margin-bottom: 16px;
    42: }
    43: .title {
    44:   display: flex;
    45:   align-items: center;
    46:   gap: 12px;
    47:   font-size: 20px;
    48:   font-weight: 600;
    49: }
    50: .badge {
    51:   display: inline-flex;
    52:   align-items: center;
    53:   gap: 6px;
    54:   background: var(--badge-bg);
    55:   color: var(--badge-fg);
    56:   border: 1px solid var(--badge-border);
    57:   border-radius: 999px;
    58:   padding: 4px 10px;
    59:   font-size: 12px;
    60: }
    61: 
    62: /* Toolbar */
    63: .toolbar {
    64:   display: flex;
    65:   flex-wrap: wrap;
    66:   gap: 12px;
    67:   align-items: center;
    68:   justify-content: space-between;
    69:   margin-bottom: 12px;
    70: }
    71: .searchBox {
    72:   display: flex;
    73:   align-items: center;
    74:   gap: 8px;
    75:   border: 1px solid var(--border);
    76:   background: var(--card-bg);
    77:   padding: 6px 10px;
    78:   border-radius: 10px;
    79:   min-width: 280px;
    80: 
    81:   input {
    82:     background: transparent;
    83:     border: none;
    84:     outline: none;
    85:     color: var(--text);
    86:     width: 260px;
    87:   }
    88: }
    89: .filters {
    90:   display: flex;
    91:   align-items: center;
    92:   gap: 12px;
    93: }
    94: .fieldInline {
    95:   display: flex;
    96:   align-items: center;
    97:   gap: 6px;
    98: 
    99:   label {
   100:     font-size: 12px;
   101:     color: var(--muted);
   102:   }
   103:   .input {
   104:     width: 120px;
   105:     border: 1px solid var(--border);
   106:     background: var(--card-bg);
   107:     color: var(--text);
   108:     border-radius: 8px;
   109:     padding: 6px 10px;
   110:   }
   111: }
   112: .switch {
   113:   display: inline-flex;
   114:   align-items: center;
   115:   gap: 8px;
   116:   font-size: 13px;
   117:   color: var(--muted);
   118: 
   119:   input {
   120:     transform: scale(1.1);
   121:   }
   122: }
   123: 
   124: /* Alerts */
   125: .alert {
   126:   display: flex;
   127:   align-items: center;
   128:   gap: 8px;
   129:   border: 1px solid var(--border);
   130:   background: rgba(255, 176, 31, 0.08);
   131:   padding: 10px 12px;
   132:   border-radius: 12px;
   133:   margin-bottom: 12px;
   134: }
   135: 
   136: /* Table */
   137: .tableWrap {
   138:   border: 1px solid var(--border);
   139:   border-radius: 14px;
   140:   overflow: hidden;
   141: }
   142: .table {
   143:   width: 100%;
   144:   border-collapse: collapse;
   145: 
   146:   thead {
   147:     background: var(--thead-bg);
   148:     th {
   149:       text-align: left;
   150:       padding: 12px;
   151:       font-weight: 600;
   152:       font-size: 13px;
   153:       cursor: pointer;
   154:       border-bottom: 1px solid var(--border);
   155:     }
   156:   }
   157:   tbody {
   158:     td {
   159:       padding: 10px 12px;
   160:       border-bottom: 1px solid var(--tbody-border);
   161:       font-size: 13px;
   162:       vertical-align: middle;
   163:     }
   164:   }
   165: }
   166: 
   167: /* Utils */
   168: .truncate {
   169:   max-width: 360px;
   170:   white-space: nowrap;
   171:   overflow: hidden;
   172:   text-overflow: ellipsis;
   173: }
   174: 
   175: .actions {
   176:   display: flex;
   177:   gap: 8px;
   178: }
   179: 
   180: .rowActions {
   181:   display: flex;
   182:   gap: 8px;
   183:   flex-wrap: wrap;
   184: }
   185: 
   186: /* Buttons */
   187: .btn {
   188:   display: inline-flex;
   189:   align-items: center;
   190:   gap: 6px;
   191:   border: 1px solid var(--btn-border);
   192:   background: var(--btn-bg);
   193:   color: var(--btn-fg);
   194:   padding: 6px 10px;
   195:   border-radius: 10px;
   196:   font-size: 13px;
   197:   cursor: pointer;
   198: }
   199: .btnDanger {
   200:   border-color: #fecaca;
   201:   background: #fee2e2;
   202:   color: #991b1b;
   203: 
   204:   [data-theme="dark"] & {
   205:     border-color: #7f1d1d;
   206:     background: #3f1010;
   207:     color: #fecaca;
   208:   }
   209: }
   210: .btnWarn {
   211:   border-color: #fde68a;
   212:   background: #fffbeb;
   213:   color: #92400e;
   214: 
   215:   [data-theme="dark"] & {
   216:     border-color: #7c2d12;
   217:     background: #3c2710;
   218:     color: #fde68a;
   219:   }
   220: }
   221: 
   222: /* --- Pager: clean card look, comfy spacing, nicer buttons --- */
   223: .pager {
   224:   margin-top: 12px;
   225:   display: flex;
   226:   align-items: center;
   227:   justify-content: space-between;
   228:   gap: 12px;
   229:   flex-wrap: wrap;
   230: 
   231:   /* card look */
   232:   background: var(--card-bg);
   233:   border: 1px solid var(--border);
   234:   border-radius: 12px;
   235:   padding: 8px 10px;
   236:   box-shadow: 0 10px 24px rgba(16, 24, 40, 0.06);
   237: }
   238: 
   239: .pager .field {
   240:   display: flex;
   241:   align-items: center;
   242:   gap: 10px;
   243: 
   244:   label {
   245:     font-size: 12px;
   246:     color: var(--muted);
   247:   }
   248: 
   249:   .input {
   250:     height: 34px;
   251:     min-width: 90px;
   252:     border-radius: 10px;
   253:     border: 1px solid var(--border);
   254:     background: var(--card-bg);
   255:     color: var(--text);
   256:     padding: 6px 10px;
   257:     outline: none;
   258:   }
   259: }
   260: 
   261: .pager .pages {
   262:   display: flex;
   263:   align-items: center;
   264:   gap: 8px;
   265:   flex-wrap: wrap;
   266: }
   267: 
   268: .pager .btn {
   269:   display: inline-flex;
   270:   align-items: center;
   271:   gap: 6px;
   272:   height: 32px;
   273:   padding: 0 10px;
   274:   border-radius: 10px;
   275:   border: 1px solid var(--btn-border);
   276:   background: var(--btn-bg);
   277:   color: var(--btn-fg);
   278:   cursor: pointer;
   279:   transition: box-shadow 0.15s ease, transform 0.02s ease, background 0.15s ease;
   280: 
   281:   &:hover:not(:disabled) {
   282:     box-shadow: 0 6px 14px rgba(16, 24, 40, 0.08);
   283:     background: color-mix(in srgb, var(--btn-bg) 85%, var(--text) 15%);
   284:   }
   285:   &:active:not(:disabled) {
   286:     transform: translateY(1px);
   287:   }
   288:   &:disabled {
   289:     opacity: 0.55;
   290:     cursor: not-allowed;
   291:     box-shadow: none;
   292:     transform: none;
   293:   }
   294: }
   295: 
   296: .pager .muted {
   297:   color: var(--muted);
   298:   font-size: 13px;
   299:   padding: 4px 8px;
   300:   border-radius: 8px;
   301:   background: color-mix(in srgb, var(--btn-bg) 92%, transparent);
   302:   border: 1px dashed var(--btn-border);
   303: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\UsersDialog.jsx
SIZE: 1648 bytes
================================================================================
     1: import { useEffect, useRef } from "react";
     2: import styles from "./UsersDialog.module.scss";
     3: import { LuX } from "react-icons/lu";
     4: 
     5: /**
     6:  * Faqat UsersPage uchun mo‘ljallangan dialog (modal).
     7:  * Dropdown’lar portal bilan ishlashi uchun body’ga data-dialog-body atributi qo‘yildi.
     8:  */
     9: export default function UsersDialog({
    10:   open,
    11:   title,
    12:   children,
    13:   onClose,
    14:   footer = null,
    15:   size = "md", // sm | md | lg
    16:   closeOnBackdrop = true,
    17: }) {
    18:   const ref = useRef(null);
    19: 
    20:   useEffect(() => {
    21:     function onKey(e) {
    22:       if (!open) return;
    23:       if (e.key === "Escape") onClose?.();
    24:     }
    25:     document.addEventListener("keydown", onKey);
    26:     return () => document.removeEventListener("keydown", onKey);
    27:   }, [open, onClose]);
    28: 
    29:   if (!open) return null;
    30: 
    31:   function onBackdrop(e) {
    32:     if (closeOnBackdrop && e.target === ref.current) onClose?.();
    33:   }
    34: 
    35:   return (
    36:     <div className={styles.overlay} ref={ref} onMouseDown={onBackdrop}>
    37:       <div
    38:         className={`${styles.dialog} ${styles[size]}`}
    39:         role="dialog"
    40:         aria-modal="true"
    41:       >
    42:         <div className={styles.header}>
    43:           <div className={styles.title}>{title}</div>
    44:           <button
    45:             className={styles.iconBtn}
    46:             onClick={onClose}
    47:             aria-label="Yopish"
    48:           >
    49:             <LuX />
    50:           </button>
    51:         </div>
    52:         {/* ❗ Dropdown pozitsiyalashi uchun belgi */}
    53:         <div className={styles.body} data-dialog-body="">
    54:           {children}
    55:         </div>
    56:         {footer && <div className={styles.footer}>{footer}</div>}
    57:       </div>
    58:     </div>
    59:   );
    60: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\UsersDialog.module.scss
SIZE: 1990 bytes
================================================================================
     1: .overlay {
     2:   position: fixed;
     3:   inset: 0;
     4:   background: rgba(16, 20, 24, 0.48);
     5:   display: grid;
     6:   place-items: center;
     7:   z-index: 1200; /* avval 1000 edi -> dropdown 1500 bo'ladi */
     8:   padding: 24px;
     9: }
    10: 
    11: .dialog {
    12:   width: 100%;
    13:   max-height: 90vh;
    14:   overflow: hidden; /* yumaloq burchaklar uchun saqlaymiz, dropdown portal bo'lgani uchun kesilmaydi */
    15:   background: var(--card-bg, #fff);
    16:   color: var(--card-fg, #111);
    17:   border: 1px solid var(--card-border, #e5e7eb);
    18:   border-radius: 16px;
    19:   box-shadow: 0 24px 64px rgba(0, 0, 0, 0.18);
    20:   display: flex;
    21:   flex-direction: column;
    22:   animation: pop 0.16s ease-out;
    23: }
    24: 
    25: @keyframes pop {
    26:   from {
    27:     transform: translateY(6px) scale(0.98);
    28:     opacity: 0.8;
    29:   }
    30:   to {
    31:     transform: translateY(0) scale(1);
    32:     opacity: 1;
    33:   }
    34: }
    35: 
    36: .sm {
    37:   max-width: 420px;
    38: }
    39: .md {
    40:   max-width: 720px;
    41: }
    42: .lg {
    43:   max-width: 980px;
    44: }
    45: 
    46: .header {
    47:   display: flex;
    48:   align-items: center;
    49:   justify-content: space-between;
    50:   padding: 14px 16px;
    51:   border-bottom: 1px solid var(--card-border, #e5e7eb);
    52:   background: var(--card-head, #fafafa);
    53: }
    54: 
    55: .title {
    56:   font-weight: 600;
    57:   font-size: 16px;
    58: }
    59: 
    60: .iconBtn {
    61:   display: inline-grid;
    62:   place-items: center;
    63:   width: 32px;
    64:   height: 32px;
    65:   border-radius: 10px;
    66:   border: 1px solid var(--card-border, #e5e7eb);
    67:   background: transparent;
    68:   cursor: pointer;
    69: }
    70: .iconBtn:hover {
    71:   background: rgba(0, 0, 0, 0.05);
    72: }
    73: 
    74: .body {
    75:   padding: 16px;
    76:   overflow: auto; /* modal kontenti scroll bo'ladi */
    77: }
    78: 
    79: .footer {
    80:   padding: 12px 16px;
    81:   border-top: 1px solid var(--card-border, #e5e7eb);
    82:   display: flex;
    83:   gap: 8px;
    84:   justify-content: flex-end;
    85:   background: var(--card-head, #fafafa);
    86: }
    87: 
    88: /* Dark mode */
    89: :global([data-theme="dark"]) .dialog {
    90:   --card-bg: #0f172a;
    91:   --card-fg: #e5e7eb;
    92:   --card-border: #243042;
    93:   --card-head: #0b1220;
    94: }
    95: :global([data-theme="dark"]) .iconBtn:hover {
    96:   background: rgba(255, 255, 255, 0.06);
    97: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\UsersPage.jsx
SIZE: 23564 bytes
================================================================================
     1: import { useCallback, useEffect, useMemo, useState } from "react";
     2: import {
     3:   LuFilter,
     4:   LuKeyRound,
     5:   LuMoveRight,
     6:   LuPencil,
     7:   LuPlus,
     8:   LuRefreshCw,
     9:   LuSave,
    10:   LuSearch,
    11:   LuShield,
    12:   LuShieldOff,
    13:   LuTrash2,
    14:   LuUsers,
    15:   LuX,
    16: } from "react-icons/lu";
    17: import { toast } from "react-toastify";
    18: import {
    19:   changeUserStatus,
    20:   createUser,
    21:   moveUser,
    22:   resetUserPassword,
    23:   searchUsers,
    24:   updateUser,
    25: } from "../../api/users";
    26: import { useTheme } from "../../hooks/useTheme";
    27: import OrgUnitSelect from "./OrgUnitSelect";
    28: import UsersDialog from "./UsersDialog";
    29: import styles from "./UsersPage.module.scss";
    30: 
    31: const ROLES = ["ADMIN", "USER"];
    32: const STATUSES = ["ACTIVE", "SUSPENDED", "TERMINATED"];
    33: 
    34: export default function UsersPage() {
    35:   const { isDark } = useTheme();
    36: 
    37:   const [q, setQ] = useState("");
    38:   const [role, setRole] = useState("");
    39:   const [status, setStatus] = useState("");
    40:   const [orgId, setOrgId] = useState(null); // number|null
    41:   const [dept, setDept] = useState("");
    42: 
    43:   const [page, setPage] = useState(0);
    44:   const [size, setSize] = useState(10);
    45:   const [sort] = useState("id,desc"); // removed unused setter
    46: 
    47:   const [busy, setBusy] = useState(false);
    48:   const [rows, setRows] = useState([]);
    49:   const [total, setTotal] = useState(0);
    50: 
    51:   const emptyForm = {
    52:     username: "",
    53:     password: "",
    54:     role: "USER",
    55:     fullName: "",
    56:     position: "",
    57:     title: "",
    58:     phone: "",
    59:     avatarUrl: "",
    60:     orgId: null, // number|null
    61:     department: "",
    62:   };
    63:   const [form, setForm] = useState(emptyForm);
    64:   const [editId, setEditId] = useState(null);
    65:   const [openEdit, setOpenEdit] = useState(false);
    66: 
    67:   const [moveCtx, setMoveCtx] = useState({
    68:     open: false,
    69:     id: null,
    70:     orgId: null,
    71:     department: "",
    72:   });
    73: 
    74:   const [confirm, setConfirm] = useState({
    75:     open: false,
    76:     title: "",
    77:     message: "",
    78:     onApprove: null,
    79:   });
    80: 
    81:   // ===== Data Loading =====
    82:   const load = useCallback(
    83:     async (p = page) => {
    84:       setBusy(true);
    85:       try {
    86:         const res = await searchUsers({
    87:           page: p,
    88:           size,
    89:           sort,
    90:           q: q || undefined,
    91:           role: role || undefined,
    92:           status: status || undefined,
    93:           orgId: orgId ?? undefined,
    94:           department: dept || undefined,
    95:         });
    96:         setRows(res.content || []);
    97:         setTotal(res.totalElements ?? res.total ?? 0);
    98:         setPage(res.page ?? p);
    99:       } finally {
   100:         setBusy(false);
   101:       }
   102:     },
   103:     [page, size, sort, q, role, status, orgId, dept]
   104:   );
   105: 
   106:   useEffect(() => {
   107:     load(0); // size yoki sort o'zgarsa boshidan qidiradi
   108:     // eslint-disable-next-line react-hooks/exhaustive-deps
   109:   }, [size, sort]);
   110: 
   111:   const totalPages = Math.max(1, Math.ceil(total / Math.max(1, size)));
   112: 
   113:   // ===== CRUD =====
   114:   function startCreate() {
   115:     setEditId(null);
   116:     setForm({ ...emptyForm });
   117:     setOpenEdit(true);
   118:   }
   119:   function startEdit(u) {
   120:     setEditId(u.id);
   121:     setForm({
   122:       username: u.username,
   123:       password: "",
   124:       role: u.role || "USER",
   125:       fullName: u.fullName || "",
   126:       position: u.position || "",
   127:       title: u.title || "",
   128:       phone: u.phone || "",
   129:       avatarUrl: u.avatarUrl || "",
   130:       orgId: u.orgId ?? null,
   131:       department: u.department || "",
   132:     });
   133:     setOpenEdit(true);
   134:   }
   135: 
   136:   async function saveUser() {
   137:     setBusy(true);
   138:     try {
   139:       const payload = { ...form };
   140:       if (payload.orgId == null) delete payload.orgId;
   141:       if (editId) {
   142:         if (!payload.password) delete payload.password;
   143:         await updateUser(editId, payload);
   144:       } else {
   145:         if (!payload.username || !payload.password) {
   146:           toast.warn("Login va parol majburiy.");
   147:           return;
   148:         }
   149:         await createUser(payload);
   150:       }
   151:       setOpenEdit(false);
   152:       setForm(emptyForm);
   153:       setEditId(null);
   154:       await load();
   155:     } finally {
   156:       setBusy(false);
   157:     }
   158:   }
   159: 
   160:   function askStatus(u, newStatus) {
   161:     const map = {
   162:       ACTIVE: "Foydalanuvchini faollashtirasizmi?",
   163:       SUSPENDED: "Foydalanuvchini vaqtincha bloklaysizmi?",
   164:       TERMINATED: "Foydalanuvchini bo‘shatasizmi? (kirish huquqi olinadi)",
   165:     };
   166:     setConfirm({
   167:       open: true,
   168:       title: "Tasdiqlash",
   169:       message: `${u.username} → ${newStatus}\n${map[newStatus] || ""}`,
   170:       onApprove: async () => {
   171:         setConfirm({ open: false, title: "", message: "", onApprove: null });
   172:         await changeUserStatus(u.id, newStatus);
   173:         await load();
   174:       },
   175:     });
   176:   }
   177: 
   178:   function startMove(u) {
   179:     setMoveCtx({
   180:       open: true,
   181:       id: u.id,
   182:       orgId: u.orgId ?? null,
   183:       department: u.department || "",
   184:     });
   185:   }
   186:   async function doMove() {
   187:     setBusy(true);
   188:     try {
   189:       const payload = {};
   190:       if (moveCtx.orgId != null) payload.orgId = Number(moveCtx.orgId);
   191:       if (String(moveCtx.department || "").trim())
   192:         payload.department = moveCtx.department;
   193:       await moveUser(moveCtx.id, payload);
   194:       setMoveCtx({ open: false, id: null, orgId: null, department: "" });
   195:       await load();
   196:     } finally {
   197:       setBusy(false);
   198:     }
   199:   }
   200: 
   201:   function askReset(u) {
   202:     setConfirm({
   203:       open: true,
   204:       title: "Vaqtinchalik parol",
   205:       message: `${u.username} uchun vaqtinchalik parol berilsinmi?`,
   206:       onApprove: async () => {
   207:         setConfirm({ open: false, title: "", message: "", onApprove: null });
   208:         const res = await resetUserPassword(u.id);
   209:         const pwd = res?.tempPassword || "(kelmadi)";
   210:         toast.info(`Yangi vaqtinchalik parol: ${pwd}`, { autoClose: 8000 });
   211:       },
   212:     });
   213:   }
   214: 
   215:   // ===== Client-side quick filter =====
   216:   const quick = useMemo(() => {
   217:     const t = (q || "").trim().toLowerCase();
   218:     if (!t) return rows;
   219:     return rows.filter((u) =>
   220:       [u.username, u.fullName, u.phone, u.position, u.title]
   221:         .filter(Boolean)
   222:         .some((v) => String(v).toLowerCase().includes(t))
   223:     );
   224:   }, [rows, q]);
   225: 
   226:   // ===== Filter helpers =====
   227:   const appliedFilters = useMemo(() => {
   228:     const chips = [];
   229:     if (role) chips.push({ key: "role", label: `Rol: ${role}` });
   230:     if (status) chips.push({ key: "status", label: `Holat: ${status}` });
   231:     if (orgId != null) chips.push({ key: "org", label: `Tashk.: #${orgId}` }); // matnda nom bo'lmasa ham ko'rsatamiz
   232:     if (dept) chips.push({ key: "dept", label: `Bo‘lim: ${dept}` });
   233:     return chips;
   234:   }, [role, status, orgId, dept]);
   235: 
   236:   const clearFilters = useCallback(() => {
   237:     setRole("");
   238:     setStatus("");
   239:     setOrgId(null);
   240:     setDept("");
   241:   }, []);
   242: 
   243:   // ===== Handlers =====
   244:   const onSearchKeyDown = (e) => {
   245:     if (e.key === "Enter") load(0);
   246:   };
   247: 
   248:   return (
   249:     <div className={styles.page} data-theme={isDark ? "dark" : "light"}>
   250:       {/* Header */}
   251:       <div className={styles.header}>
   252:         <div className={styles.title}>
   253:           <LuUsers /> Foydalanuvchilar
   254:           <span className={styles.count}>{total}</span>
   255:         </div>
   256:         <div className={styles.actions}>
   257:           <button
   258:             className={styles.btn}
   259:             onClick={() => load(page)}
   260:             disabled={busy}
   261:           >
   262:             <LuRefreshCw /> Qayta yuklash
   263:           </button>
   264:           <button className={styles.btnPrimary} onClick={startCreate}>
   265:             <LuPlus /> Yangi foydalanuvchi
   266:           </button>
   267:         </div>
   268:       </div>
   269: 
   270:       {/* Toolbar */}
   271:       <div className={styles.toolbar} data-sticky>
   272:         <div className={styles.searchBox}>
   273:           <LuSearch />
   274:           <input
   275:             placeholder="Login / FIO / telefon / lavozim bo‘yicha qidirish..."
   276:             value={q}
   277:             onChange={(e) => setQ(e.target.value)}
   278:             onKeyDown={onSearchKeyDown}
   279:           />
   280:           {q && (
   281:             <button
   282:               className={styles.clearInput}
   283:               onClick={() => setQ("")}
   284:               title="Tozalash"
   285:             >
   286:               <LuX />
   287:             </button>
   288:           )}
   289:         </div>
   290: 
   291:         <div className={styles.filters}>
   292:           <div className={styles.field}>
   293:             <label>Rol</label>
   294:             <select
   295:               className={styles.input}
   296:               value={role}
   297:               onChange={(e) => setRole(e.target.value)}
   298:             >
   299:               <option value="">(hammasi)</option>
   300:               {ROLES.map((r) => (
   301:                 <option key={r} value={r}>
   302:                   {r}
   303:                 </option>
   304:               ))}
   305:             </select>
   306:           </div>
   307: 
   308:           <div className={styles.field}>
   309:             <label>Holat</label>
   310:             <select
   311:               className={styles.input}
   312:               value={status}
   313:               onChange={(e) => setStatus(e.target.value)}
   314:             >
   315:               <option value="">(hammasi)</option>
   316:               {STATUSES.map((s) => (
   317:                 <option key={s} value={s}>
   318:                   {s}
   319:                 </option>
   320:               ))}
   321:             </select>
   322:           </div>
   323: 
   324:           <div className={styles.field} style={{ minWidth: 260 }}>
   325:             <label>Tashkilot birligi</label>
   326:             <OrgUnitSelect
   327:               value={orgId}
   328:               onChange={(o) => setOrgId(o?.id ?? null)}
   329:               placeholder="Tashkilotni qidiring..."
   330:               allowClear
   331:             />
   332:           </div>
   333: 
   334:           <div className={styles.field}>
   335:             <label>Bo‘lim</label>
   336:             <input
   337:               className={styles.input}
   338:               value={dept}
   339:               onChange={(e) => setDept(e.target.value)}
   340:               placeholder="Masalan: IT"
   341:             />
   342:           </div>
   343: 
   344:           <div className={styles.actionsRight}>
   345:             <button
   346:               className={styles.btn}
   347:               onClick={() => load(0)}
   348:               disabled={busy}
   349:             >
   350:               <LuFilter /> Qidirish
   351:             </button>
   352:             {(role || status || orgId != null || dept) && (
   353:               <button className={styles.btnGhost} onClick={clearFilters}>
   354:                 <LuX /> Tozalash
   355:               </button>
   356:             )}
   357:           </div>
   358:         </div>
   359: 
   360:         {!!appliedFilters.length && (
   361:           <div className={styles.chips}>
   362:             {appliedFilters.map((c) => (
   363:               <span key={c.key} className={styles.chip}>
   364:                 {c.label}
   365:               </span>
   366:             ))}
   367:           </div>
   368:         )}
   369:       </div>
   370: 
   371:       {/* Jadval */}
   372:       <div className={styles.tableWrap}>
   373:         <table className={styles.table}>
   374:           <thead>
   375:             <tr>
   376:               <th>№</th>
   377:               <th>Login</th>
   378:               <th>FIO</th>
   379:               <th>Rol</th>
   380:               <th>Holat</th>
   381:               <th>Tashk. birligi</th>
   382:               <th>Bo‘lim</th>
   383:               <th>Kontakt</th>
   384:               <th>Harakatlar</th>
   385:             </tr>
   386:           </thead>
   387:           <tbody>
   388:             {quick.map((u, i) => {
   389:               const orgName =
   390:                 u.orgName ||
   391:                 u.orgTitle ||
   392:                 u.org?.name ||
   393:                 u.org?.title ||
   394:                 (u.orgId ? `#${u.orgId}` : null);
   395: 
   396:               return (
   397:                 <tr key={u.id}>
   398:                   <td>{page * size + i + 1}</td>
   399:                   <td>{u.username}</td>
   400:                   <td>{u.fullName || "-"}</td>
   401:                   <td>
   402:                     <span
   403:                       className={`${styles.badge} ${
   404:                         styles["role" + (u.role || "").toLowerCase()]
   405:                       }`}
   406:                     >
   407:                       {u.role}
   408:                     </span>
   409:                   </td>
   410:                   <td>
   411:                     <span
   412:                       className={`${styles.badge} ${
   413:                         styles["st" + (u.status || "").toLowerCase()]
   414:                       }`}
   415:                     >
   416:                       {u.status}
   417:                     </span>
   418:                   </td>
   419:                   <td
   420:                     className={styles.orgCell}
   421:                     title={u.orgId ? `ID: ${u.orgId}` : ""}
   422:                   >
   423:                     {orgName || "-"}
   424:                   </td>
   425:                   <td>{u.department || "-"}</td>
   426:                   <td>
   427:                     <div className={styles.muted}>{u.phone || "-"}</div>
   428:                   </td>
   429:                   <td className={styles.rowActions}>
   430:                     <button
   431:                       className={styles.btn}
   432:                       title="Tahrirlash"
   433:                       onClick={() => startEdit(u)}
   434:                     >
   435:                       <LuPencil />
   436:                     </button>
   437:                     <button
   438:                       className={styles.btn}
   439:                       title="Ko'chirish"
   440:                       onClick={() => startMove(u)}
   441:                     >
   442:                       <LuMoveRight />
   443:                     </button>
   444:                     {u.status !== "ACTIVE" ? (
   445:                       <button
   446:                         className={styles.btnPrimary}
   447:                         title="Aktivlashtirish"
   448:                         onClick={() => askStatus(u, "ACTIVE")}
   449:                       >
   450:                         <LuShield />
   451:                       </button>
   452:                     ) : (
   453:                       <button
   454:                         className={styles.btnWarn}
   455:                         title="Vaqtincha bloklash"
   456:                         onClick={() => askStatus(u, "SUSPENDED")}
   457:                       >
   458:                         <LuShieldOff />
   459:                       </button>
   460:                     )}
   461:                     <button
   462:                       className={styles.btnDanger}
   463:                       title="Bo'shatish"
   464:                       onClick={() => askStatus(u, "TERMINATED")}
   465:                     >
   466:                       <LuTrash2 />
   467:                     </button>
   468:                     <button
   469:                       className={styles.btn}
   470:                       title="Vaqtinchalik parol"
   471:                       onClick={() => askReset(u)}
   472:                     >
   473:                       <LuKeyRound />
   474:                     </button>
   475:                   </td>
   476:                 </tr>
   477:               );
   478:             })}
   479:             {!quick.length && (
   480:               <tr>
   481:                 <td
   482:                   colSpan={9}
   483:                   style={{ padding: 16, textAlign: "center", opacity: 0.6 }}
   484:                 >
   485:                   Hech narsa topilmadi.
   486:                 </td>
   487:               </tr>
   488:             )}
   489:           </tbody>
   490:         </table>
   491:         {busy && <div className={styles.loadingOverlay}>Yuklanmoqda…</div>}
   492:       </div>
   493: 
   494:       {/* Pager */}
   495:       <div className={styles.pager}>
   496:         <div className={styles.field}>
   497:           <label>Sahifa hajmi</label>
   498:           <select
   499:             className={styles.input}
   500:             value={size}
   501:             onChange={(e) => {
   502:               setSize(Number(e.target.value));
   503:               setPage(0);
   504:             }}
   505:           >
   506:             {[10, 20, 50, 100].map((n) => (
   507:               <option key={n} value={n}>
   508:                 {n}
   509:               </option>
   510:             ))}
   511:           </select>
   512:         </div>
   513:         <div className={styles.pages}>
   514:           <button
   515:             className={styles.btn}
   516:             disabled={page <= 0 || busy}
   517:             onClick={() => load(0)}
   518:           >
   519:             « Boshiga
   520:           </button>
   521:           <button
   522:             className={styles.btn}
   523:             disabled={page <= 0 || busy}
   524:             onClick={() => load(page - 1)}
   525:           >
   526:             ‹ Oldingi
   527:           </button>
   528:           <span className={styles.muted}>
   529:             Sahifa {page + 1} /{" "}
   530:             {Math.max(1, Math.ceil(total / Math.max(1, size)))}
   531:           </span>
   532:           <button
   533:             className={styles.btn}
   534:             disabled={page >= totalPages - 1 || busy}
   535:             onClick={() => load(page + 1)}
   536:           >
   537:             Keyingi ›
   538:           </button>
   539:           <button
   540:             className={styles.btn}
   541:             disabled={page >= totalPages - 1 || busy}
   542:             onClick={() => load(totalPages - 1)}
   543:           >
   544:             Oxiriga »
   545:           </button>
   546:         </div>
   547:       </div>
   548: 
   549:       {/* ===== Dialoglar ===== */}
   550: 
   551:       {/* Yaratish/Tahrirlash */}
   552:       <UsersDialog
   553:         open={openEdit}
   554:         onClose={() => setOpenEdit(false)}
   555:         title={editId ? "Foydalanuvchini tahrirlash" : "Yangi foydalanuvchi"}
   556:         size="lg"
   557:         footer={
   558:           <>
   559:             <button className={styles.btn} onClick={() => setOpenEdit(false)}>
   560:               Bekor qilish
   561:             </button>
   562:             <button
   563:               className={styles.btnPrimary}
   564:               onClick={saveUser}
   565:               disabled={busy}
   566:             >
   567:               <LuSave /> Saqlash
   568:             </button>
   569:           </>
   570:         }
   571:       >
   572:         <div className={styles.grid}>
   573:           <div className={styles.field}>
   574:             <label>Login*</label>
   575:             <input
   576:               className={styles.input}
   577:               value={form.username}
   578:               onChange={(e) => setForm({ ...form, username: e.target.value })}
   579:               disabled={!!editId}
   580:             />
   581:           </div>
   582:           <div className={styles.field}>
   583:             <label>Parol{editId ? " (ixtiyoriy)" : "*"}</label>
   584:             <input
   585:               className={styles.input}
   586:               type="password"
   587:               value={form.password}
   588:               onChange={(e) => setForm({ ...form, password: e.target.value })}
   589:             />
   590:           </div>
   591:           <div className={styles.field}>
   592:             <label>Rol</label>
   593:             <select
   594:               className={styles.input}
   595:               value={form.role}
   596:               onChange={(e) => setForm({ ...form, role: e.target.value })}
   597:             >
   598:               {ROLES.map((r) => (
   599:                 <option key={r} value={r}>
   600:                   {r}
   601:                 </option>
   602:               ))}
   603:             </select>
   604:           </div>
   605: 
   606:           <div className={styles.field}>
   607:             <label>F.I.O</label>
   608:             <input
   609:               className={styles.input}
   610:               value={form.fullName}
   611:               onChange={(e) => setForm({ ...form, fullName: e.target.value })}
   612:             />
   613:           </div>
   614:           <div className={styles.field}>
   615:             <label>Lavozim</label>
   616:             <input
   617:               className={styles.input}
   618:               value={form.position}
   619:               onChange={(e) => setForm({ ...form, position: e.target.value })}
   620:             />
   621:           </div>
   622:           <div className={styles.field}>
   623:             <label>Unvon</label>
   624:             <input
   625:               className={styles.input}
   626:               value={form.title}
   627:               onChange={(e) => setForm({ ...form, title: e.target.value })}
   628:             />
   629:           </div>
   630: 
   631:           <div className={styles.field}>
   632:             <label>Telefon</label>
   633:             <input
   634:               className={styles.input}
   635:               value={form.phone}
   636:               onChange={(e) => setForm({ ...form, phone: e.target.value })}
   637:             />
   638:           </div>
   639:           <div className={styles.field}>
   640:             <label>Avatar URL</label>
   641:             <input
   642:               className={styles.input}
   643:               value={form.avatarUrl}
   644:               onChange={(e) => setForm({ ...form, avatarUrl: e.target.value })}
   645:             />
   646:           </div>
   647: 
   648:           <div className={styles.field} style={{ minWidth: 260 }}>
   649:             <label>Tashkilot birligi</label>
   650:             <OrgUnitSelect
   651:               value={form.orgId}
   652:               onChange={(o) => setForm({ ...form, orgId: o?.id ?? null })}
   653:               placeholder="Tashkilotni qidiring..."
   654:               allowClear
   655:             />
   656:           </div>
   657:           <div className={styles.field}>
   658:             <label>Bo‘lim</label>
   659:             <input
   660:               className={styles.input}
   661:               value={form.department}
   662:               onChange={(e) => setForm({ ...form, department: e.target.value })}
   663:             />
   664:           </div>
   665:         </div>
   666:       </UsersDialog>
   667: 
   668:       {/* Ko‘chirish */}
   669:       <UsersDialog
   670:         open={moveCtx.open}
   671:         onClose={() =>
   672:           setMoveCtx({ open: false, id: null, orgId: null, department: "" })
   673:         }
   674:         title="Ko‘chirish (tashk. birligi / bo‘lim)"
   675:         size="md"
   676:         footer={
   677:           <>
   678:             <button
   679:               className={styles.btn}
   680:               onClick={() =>
   681:                 setMoveCtx({
   682:                   open: false,
   683:                   id: null,
   684:                   orgId: null,
   685:                   department: "",
   686:                 })
   687:               }
   688:             >
   689:               Bekor
   690:             </button>
   691:             <button
   692:               className={styles.btnPrimary}
   693:               onClick={doMove}
   694:               disabled={busy}
   695:             >
   696:               Saqlash
   697:             </button>
   698:           </>
   699:         }
   700:       >
   701:         <div className={styles.vstack}>
   702:           <div className={styles.field} style={{ minWidth: 260 }}>
   703:             <label>Yangi tashkilot birligi</label>
   704:             <OrgUnitSelect
   705:               value={moveCtx.orgId}
   706:               onChange={(o) =>
   707:                 setMoveCtx((s) => ({ ...s, orgId: o?.id ?? null }))
   708:               }
   709:               placeholder="Tashkilotni qidiring..."
   710:               allowClear
   711:             />
   712:           </div>
   713:           <div className={styles.field}>
   714:             <label>Yangi bo‘lim</label>
   715:             <input
   716:               className={styles.input}
   717:               value={moveCtx.department}
   718:               onChange={(e) =>
   719:                 setMoveCtx((s) => ({ ...s, department: e.target.value }))
   720:               }
   721:               placeholder="Masalan: IT bo‘limi"
   722:             />
   723:           </div>
   724:           <div className={styles.mutedSm}>
   725:             Ixtiyoriy maydonlar. Bo‘sh qoldirsangiz o‘zgarmaydi.
   726:           </div>
   727:         </div>
   728:       </UsersDialog>
   729: 
   730:       {/* Tasdiqlash */}
   731:       <UsersDialog
   732:         open={confirm.open}
   733:         onClose={() =>
   734:           setConfirm({ open: false, title: "", message: "", onApprove: null })
   735:         }
   736:         title={confirm.title || "Tasdiqlash"}
   737:         size="sm"
   738:         footer={
   739:           <>
   740:             <button
   741:               className={styles.btn}
   742:               onClick={() =>
   743:                 setConfirm({
   744:                   open: false,
   745:                   title: "",
   746:                   message: "",
   747:                   onApprove: null,
   748:                 })
   749:               }
   750:             >
   751:               Bekor
   752:             </button>
   753:             <button
   754:               className={styles.btnDanger}
   755:               onClick={async () => {
   756:                 const cb = confirm.onApprove;
   757:                 setConfirm({
   758:                   open: false,
   759:                   title: "",
   760:                   message: "",
   761:                   onApprove: null,
   762:                 });
   763:                 if (cb) await cb();
   764:               }}
   765:             >
   766:               Tasdiqlayman
   767:             </button>
   768:           </>
   769:         }
   770:       >
   771:         <pre className={styles.pre}>{confirm.message}</pre>
   772:       </UsersDialog>
   773:     </div>
   774:   );
   775: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\admin\UsersPage.module.scss
SIZE: 7491 bytes
================================================================================
     1: .page {
     2:   /* Light */
     3:   --card-bg: #ffffff;
     4:   --border: #e5e7eb;
     5:   --thead-bg: #f8fafc;
     6:   --tbody-border: #eef2f7;
     7:   --text: #0f172a;
     8:   --muted: #64748b;
     9:   --btn-bg: #f8fafc;
    10:   --btn-fg: #0f172a;
    11:   --btn-border: #e5e7eb;
    12: 
    13:   /* Accents */
    14:   --accent: #16a34a; /* yashil */
    15:   --accent-weak: #dcfce7;
    16:   --warn: #f59e0b;
    17:   --warn-weak: #fffbeb;
    18:   --danger: #ef4444;
    19:   --danger-weak: #fee2e2;
    20:   --primary: #2563eb;
    21:   --primary-weak: #dbeafe;
    22: 
    23:   &[data-theme="dark"] {
    24:     --card-bg: #0f172a;
    25:     --border: #1f2937;
    26:     --thead-bg: #111827;
    27:     --tbody-border: #0b1220;
    28:     --text: #e5e7eb;
    29:     --muted: #9ca3af;
    30:     --btn-bg: #0b1220;
    31:     --btn-fg: #e5e7eb;
    32:     --btn-border: #1f2937;
    33: 
    34:     --accent: #22c55e;
    35:     --accent-weak: #052e1a;
    36:     --warn: #fbbf24;
    37:     --warn-weak: #2b1d07;
    38:     --danger: #f87171;
    39:     --danger-weak: #2b0e0e;
    40:     --primary: #60a5fa;
    41:     --primary-weak: #0b1a36;
    42:   }
    43: 
    44:   color: var(--text);
    45: }
    46: 
    47: /* Header */
    48: .header {
    49:   display: flex;
    50:   align-items: center;
    51:   justify-content: space-between;
    52:   margin-bottom: 12px;
    53: }
    54: .title {
    55:   display: flex;
    56:   gap: 10px;
    57:   font-size: 20px;
    58:   font-weight: 700;
    59:   align-items: center;
    60: }
    61: .count {
    62:   display: inline-flex;
    63:   align-items: center;
    64:   padding: 2px 8px;
    65:   border-radius: 999px;
    66:   background: var(--accent-weak);
    67:   color: var(--accent);
    68:   font-size: 12px;
    69:   font-weight: 700;
    70:   margin-left: 4px;
    71: }
    72: .actions {
    73:   display: flex;
    74:   gap: 8px;
    75: }
    76: 
    77: /* Toolbar */
    78: .toolbar {
    79:   display: flex;
    80:   flex-direction: column;
    81:   gap: 10px;
    82:   padding: 10px;
    83:   border: 1px solid var(--border);
    84:   background: var(--card-bg);
    85:   border-radius: 14px;
    86:   margin-bottom: 12px;
    87:   position: relative;
    88: 
    89:   &[data-sticky] {
    90:     position: sticky;
    91:     top: 8px;
    92:     z-index: 30;
    93:     backdrop-filter: saturate(120%) blur(6px);
    94:   }
    95: }
    96: 
    97: .searchBox {
    98:   display: flex;
    99:   align-items: center;
   100:   gap: 8px;
   101:   border: 1px solid var(--border);
   102:   background: var(--card-bg);
   103:   padding: 8px 12px;
   104:   border-radius: 999px;
   105:   min-width: 280px;
   106:   box-shadow: 0 0 0 2px transparent;
   107:   transition: box-shadow 0.15s ease;
   108: 
   109:   input {
   110:     background: transparent;
   111:     border: none;
   112:     outline: none;
   113:     color: var(--text);
   114:     width: 100%;
   115:     font-size: 14px;
   116:   }
   117: }
   118: .clearInput {
   119:   border: none;
   120:   background: transparent;
   121:   color: var(--muted);
   122:   cursor: pointer;
   123:   display: inline-flex;
   124:   align-items: center;
   125: }
   126: 
   127: .filters {
   128:   display: grid;
   129:   grid-template-columns: repeat(12, 1fr);
   130:   gap: 10px;
   131:   align-items: end;
   132: 
   133:   @media (max-width: 1024px) {
   134:     grid-template-columns: repeat(6, 1fr);
   135:   }
   136:   @media (max-width: 640px) {
   137:     grid-template-columns: repeat(2, 1fr);
   138:   }
   139: }
   140: 
   141: .field {
   142:   display: flex;
   143:   flex-direction: column;
   144:   gap: 6px;
   145:   grid-column: span 2;
   146: 
   147:   label {
   148:     font-size: 12px;
   149:     color: var(--muted);
   150:   }
   151:   .input {
   152:     width: 100%;
   153:     border: 1px solid var(--border);
   154:     background: var(--card-bg);
   155:     color: var(--text);
   156:     border-radius: 10px;
   157:     padding: 8px 10px;
   158:     font-size: 14px;
   159:     outline: none;
   160:   }
   161: }
   162: 
   163: .actionsRight {
   164:   grid-column: span 2;
   165:   display: flex;
   166:   gap: 8px;
   167:   justify-content: flex-end;
   168:   align-items: center;
   169: }
   170: 
   171: .chips {
   172:   display: flex;
   173:   flex-wrap: wrap;
   174:   gap: 6px;
   175:   margin-top: -2px;
   176: }
   177: .chip {
   178:   display: inline-flex;
   179:   align-items: center;
   180:   gap: 6px;
   181:   padding: 4px 10px;
   182:   border-radius: 999px;
   183:   background: var(--thead-bg);
   184:   border: 1px solid var(--border);
   185:   font-size: 12px;
   186:   color: var(--text);
   187: }
   188: 
   189: /* Editor / Dialog grid */
   190: .editor {
   191:   border: 1px solid var(--border);
   192:   border-radius: 14px;
   193:   background: var(--card-bg);
   194:   margin-bottom: 12px;
   195: }
   196: .editorHeader {
   197:   display: flex;
   198:   align-items: center;
   199:   justify-content: space-between;
   200:   padding: 10px 12px;
   201:   border-bottom: 1px solid var(--border);
   202: }
   203: .titleSm {
   204:   display: flex;
   205:   align-items: center;
   206:   gap: 8px;
   207:   font-weight: 600;
   208: }
   209: .grid {
   210:   display: grid;
   211:   gap: 10px;
   212:   padding: 10px;
   213:   grid-template-columns: repeat(4, minmax(160px, 1fr));
   214: }
   215: @media (max-width: 1024px) {
   216:   .grid {
   217:     grid-template-columns: repeat(2, minmax(160px, 1fr));
   218:   }
   219: }
   220: 
   221: .vstack {
   222:   display: flex;
   223:   flex-direction: column;
   224:   gap: 10px;
   225: }
   226: 
   227: /* Table */
   228: .tableWrap {
   229:   border: 1px solid var(--border);
   230:   border-radius: 14px;
   231:   overflow: hidden;
   232:   background: var(--card-bg);
   233:   position: relative;
   234: }
   235: .table {
   236:   width: 100%;
   237:   border-collapse: collapse;
   238: 
   239:   thead {
   240:     background: var(--thead-bg);
   241:     th {
   242:       text-align: left;
   243:       padding: 12px;
   244:       font-weight: 700;
   245:       font-size: 13px;
   246:       border-bottom: 1px solid var(--border);
   247:       letter-spacing: 0.02em;
   248:     }
   249:   }
   250:   tbody td {
   251:     padding: 10px 12px;
   252:     border-bottom: 1px solid var(--tbody-border);
   253:     font-size: 13px;
   254:     vertical-align: middle;
   255:   }
   256: }
   257: .orgCell {
   258:   font-weight: 600;
   259: }
   260: .rowActions {
   261:   display: flex;
   262:   gap: 6px;
   263:   flex-wrap: wrap;
   264: }
   265: 
   266: /* Badges */
   267: .badge {
   268:   display: inline-flex;
   269:   align-items: center;
   270:   padding: 2px 8px;
   271:   border-radius: 999px;
   272:   font-size: 12px;
   273:   font-weight: 700;
   274:   border: 1px solid var(--border);
   275: }
   276: 
   277: /* Role badges */
   278: .roleadmin {
   279:   background: var(--primary-weak);
   280:   color: var(--primary);
   281: }
   282: .roleuser {
   283:   background: var(--accent-weak);
   284:   color: var(--accent);
   285: }
   286: 
   287: /* Status badges */
   288: .stactive {
   289:   background: #eafbe7;
   290:   color: #107d2c;
   291:   border-color: #c9f7c9;
   292: }
   293: .stsuspended {
   294:   background: var(--warn-weak);
   295:   color: var(--warn);
   296: }
   297: .stterminated {
   298:   background: var(--danger-weak);
   299:   color: var(--danger);
   300: }
   301: 
   302: /* Buttons */
   303: .btn {
   304:   display: inline-flex;
   305:   align-items: center;
   306:   gap: 6px;
   307:   border: 1px solid var(--btn-border);
   308:   background: var(--btn-bg);
   309:   color: var(--btn-fg);
   310:   padding: 8px 12px;
   311:   border-radius: 10px;
   312:   font-size: 13px;
   313:   cursor: pointer;
   314:   transition: transform 0.05s ease, box-shadow 0.15s ease;
   315: 
   316:   &:hover {
   317:     box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
   318:   }
   319:   &:active {
   320:     transform: translateY(1px);
   321:   }
   322: }
   323: .btnPrimary {
   324:   @extend .btn;
   325:   border-color: color-mix(in oklab, var(--primary) 30%, var(--btn-border));
   326:   background: var(--primary-weak);
   327:   color: var(--primary);
   328: }
   329: .btnWarn {
   330:   @extend .btn;
   331:   border-color: color-mix(in oklab, var(--warn) 30%, var(--btn-border));
   332:   background: var(--warn-weak);
   333:   color: var(--warn);
   334: }
   335: .btnDanger {
   336:   @extend .btn;
   337:   border-color: color-mix(in oklab, var(--danger) 30%, var(--btn-border));
   338:   background: var(--danger-weak);
   339:   color: var(--danger);
   340: }
   341: .btnGhost {
   342:   @extend .btn;
   343:   background: transparent;
   344: }
   345: 
   346: /* Text helpers */
   347: .muted {
   348:   color: var(--muted);
   349:   font-size: 12px;
   350: }
   351: .mutedSm {
   352:   color: var(--muted);
   353:   font-size: 11px;
   354: }
   355: 
   356: /* NEW: pre formatted text in confirm dialog */
   357: .pre {
   358:   white-space: pre-wrap;
   359:   font-family: inherit;
   360:   background: var(--thead-bg);
   361:   padding: 8px 10px;
   362:   border-radius: 10px;
   363:   border: 1px solid var(--border);
   364:   font-size: 13px;
   365:   line-height: 1.35;
   366: }
   367: 
   368: /* Pager */
   369: .pager {
   370:   display: flex;
   371:   align-items: center;
   372:   justify-content: space-between;
   373:   margin-top: 12px;
   374:   gap: 10px;
   375: }
   376: .pages {
   377:   display: flex;
   378:   align-items: center;
   379:   gap: 8px;
   380: }
   381: 
   382: /* Loading overlay */
   383: .loadingOverlay {
   384:   position: absolute;
   385:   inset: 0;
   386:   background: rgba(0, 0, 0, 0.04);
   387:   display: grid;
   388:   place-items: center;
   389:   font-weight: 600;
   390:   font-size: 14px;
   391:   color: var(--muted);
   392: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\Dashboard.jsx
SIZE: 23332 bytes
================================================================================
     1: import { useEffect, useMemo, useRef, useState } from "react";
     2: import Chart from "react-apexcharts";
     3: import { BiBarChart, BiPieChart } from "react-icons/bi";
     4: import { FiAlertTriangle } from "react-icons/fi";
     5: import { LuRotateCw, LuTrendingUp } from "react-icons/lu";
     6: import { api, httpGet } from "../api/http";
     7: import { debugError } from "../utils/debug";
     8: import s from "./Dashboard.module.scss";
     9: import OrgUnitSelect from "./admin/OrgUnitSelect";
    10: 
    11: // CSV eksport vaqtincha o'chirildi
    12: const EXPORT_ENABLED = false;
    13: const MONTHS = [
    14:   "Yan",
    15:   "Fev",
    16:   "Mar",
    17:   "Apr",
    18:   "May",
    19:   "Iyun",
    20:   "Iyul",
    21:   "Avg",
    22:   "Sen",
    23:   "Okt",
    24:   "Noy",
    25:   "Dek",
    26: ];
    27: 
    28: // ✅ To'liq o'zbekcha mapping (11 tur)
    29: const mapType = (t) => {
    30:   const M = {
    31:     GREENHOUSE: "Issiqxona",
    32:     POULTRY_MEAT: "Tovuqxona (go‘sht)",
    33:     POULTRY_EGG: "Tovuqxona (tuxum)",
    34:     TURKEY: "Kurkaxona",
    35:     COWSHED: "Molxona",
    36:     SHEEPFOLD: "Qo‘yxona",
    37:     WORKSHOP_SAUSAGE: "Ishlab chiqarish sexi (kolbasa)",
    38:     WORKSHOP_COOKIE: "Ishlab chiqarish sexi (pechenye)",
    39:     AUX_LAND: "Yordamchi xo‘jalik yeri",
    40:     BORDER_LAND: "Chegara oldi yeri",
    41:     FISHPOND: "Baliqchilik ko‘li",
    42:   };
    43:   return (
    44:     M[t] ??
    45:     (t || "")
    46:       .toLowerCase()
    47:       .replace(/_/g, " ")
    48:       .replace(/(^|\s)\S/g, (c) => c.toUpperCase())
    49:   );
    50: };
    51: 
    52: const fmtNum = (v) => new Intl.NumberFormat("uz-UZ").format(v ?? 0);
    53: const fmtMoney = (v) =>
    54:   `${new Intl.NumberFormat("uz-UZ").format(Math.round(v ?? 0))} so‘m`;
    55: const fmtPct = (v) => (v == null ? "—" : `${v.toFixed(1)}%`);
    56: 
    57: export default function Dashboard({ dark = false }) {
    58:   const rootRef = useRef(null);
    59: 
    60:   const thisYear = new Date().getFullYear();
    61:   const [year, setYear] = useState(thisYear);
    62:   const [range, setRange] = useState("year");
    63:   const [quarter, setQuarter] = useState(1);
    64:   const [from, setFrom] = useState("");
    65:   const [to, setTo] = useState("");
    66: 
    67:   const [loading, setLoading] = useState(false);
    68:   const [err, setErr] = useState("");
    69:   const [data, setData] = useState(null);
    70:   const [exporting, setExporting] = useState(false);
    71: 
    72:   const [apx, setApx] = useState({
    73:     fg: "#0f172a",
    74:     muted: "#6b7280",
    75:     border: "#e5e7eb",
    76:     card: "#ffffff",
    77:   });
    78:   useEffect(() => {
    79:     const el = rootRef.current;
    80:     if (!el) return;
    81:     const cs = getComputedStyle(el);
    82:     const read = (v, fb) => cs.getPropertyValue(v)?.trim() || fb;
    83:     setApx({
    84:       fg: read("--db-fg", dark ? "#e6eef9" : "#0f172a"),
    85:       muted: read("--db-muted", dark ? "#94a3b8" : "#6b7280"),
    86:       border: read("--db-border", dark ? "#223046" : "#e5e7eb"),
    87:       card: read("--db-card", dark ? "#0f172a" : "#ffffff"),
    88:     });
    89:   }, [dark]);
    90: 
    91:   const [selectedTypes, setSelectedTypes] = useState(() => new Set());
    92:   const [orgId, setOrgId] = useState(null); // tanlangan org (id yoki null)
    93:   const typesCsv = useMemo(
    94:     () =>
    95:       selectedTypes.size ? Array.from(selectedTypes).join(",") : undefined,
    96:     [selectedTypes]
    97:   );
    98: 
    99:   const buildParams = () => {
   100:     const p = { year, range };
   101:     if (typesCsv) p.types = typesCsv;
   102:     if (orgId != null) p.orgId = orgId;
   103:     if (range === "quarter") p.quarter = quarter;
   104:     if (range === "custom" && from && to) {
   105:       p.from = `${from}-01`;
   106:       const [yy, mm] = to.split("-").map(Number);
   107:       const lastDay = new Date(yy, mm, 0).getDate();
   108:       p.to = `${to}-${String(lastDay).padStart(2, "0")}`;
   109:     }
   110:     return p;
   111:   };
   112: 
   113:   const load = async () => {
   114:     setLoading(true);
   115:     setErr("");
   116:     try {
   117:       const res = await httpGet("/stats/overview", buildParams());
   118:       setData(res);
   119:     } catch (e) {
   120:       debugError("Dashboard stats load failed", e);
   121:       setErr(e?.message || "Statistikani yuklashda xatolik");
   122:     } finally {
   123:       setLoading(false);
   124:     }
   125:   };
   126: 
   127:   const handleExport = async () => {
   128:     if (exporting) return;
   129:     setExporting(true);
   130:     try {
   131:       const p = buildParams();
   132:       const params = new URLSearchParams();
   133:       Object.entries(p).forEach(([k, v]) => {
   134:         if (v !== undefined && v !== null && String(v).length) {
   135:           params.set(k, String(v));
   136:         }
   137:       });
   138:       const res = await api.get(`/stats/export?${params.toString()}`, {
   139:         responseType: "blob",
   140:       });
   141:       const blob = res.data;
   142:       const url = URL.createObjectURL(blob);
   143:       const a = document.createElement("a");
   144:       const stamp = new Date().toISOString().slice(0, 10);
   145:       const base = `stats_${p.range}`;
   146:       const orgPart = p.orgId ? `_org-${p.orgId}` : "";
   147:       a.href = url;
   148:       a.download = `${base}${orgPart}_${stamp}.csv`;
   149:       document.body.appendChild(a);
   150:       a.click();
   151:       setTimeout(() => {
   152:         document.body.removeChild(a);
   153:         URL.revokeObjectURL(url);
   154:       }, 0);
   155:     } catch (e) {
   156:       debugError("Export error", e);
   157:       setErr(e?.message || "Eksport xatosi");
   158:     } finally {
   159:       setExporting(false);
   160:     }
   161:   };
   162: 
   163:   useEffect(() => {
   164:     load(); /* eslint-disable-next-line */
   165:   }, [year, range, quarter, typesCsv, from, to, orgId]);
   166: 
   167:   const years = useMemo(
   168:     () => Array.from({ length: 6 }, (_, i) => thisYear - i),
   169:     [thisYear]
   170:   );
   171: 
   172:   const total = data?.total ?? 0;
   173:   const active = data?.active ?? 0;
   174:   const inactive = Math.max(0, total - active);
   175:   const typeAgg = data?.types ?? [];
   176:   const distinctTypes = typeAgg.length;
   177: 
   178:   const rawTypes = typeAgg.map((t) => t.type);
   179:   // Barcha turlar ro'yxati (doimiy ko'rinsin). Agar backend yangi qo'shsa, shu yerga qo'shish kifoya.
   180:   const ALL_TYPES = [
   181:     "GREENHOUSE",
   182:     "POULTRY_MEAT",
   183:     "POULTRY_EGG",
   184:     "TURKEY",
   185:     "COWSHED",
   186:     "SHEEPFOLD",
   187:     "WORKSHOP_SAUSAGE",
   188:     "WORKSHOP_COOKIE",
   189:     "AUX_LAND",
   190:     "BORDER_LAND",
   191:     "FISHPOND",
   192:   ];
   193:   const donutSeries = typeAgg.map((t) => t.count);
   194:   const donutLabelsLocalized = rawTypes.map(mapType);
   195: 
   196:   const toggleType = (enumVal) =>
   197:     setSelectedTypes((s0) => {
   198:       const s = new Set(s0);
   199:       s.has(enumVal) ? s.delete(enumVal) : s.add(enumVal);
   200:       return s;
   201:     });
   202:   const clearTypes = () => setSelectedTypes(new Set());
   203: 
   204:   const monthlyThis = (data?.monthly ?? Array(12).fill({ count: 0 })).map(
   205:     (m) => m.count
   206:   );
   207:   const monthlyPrev = (data?.prevMonthly ?? Array(12).fill({ count: 0 })).map(
   208:     (m) => m.count
   209:   );
   210: 
   211:   const revThis = (data?.revenueMonthly ?? Array(12).fill({ amount: 0 })).map(
   212:     (m) => m.amount
   213:   );
   214:   const revPrev = (
   215:     data?.revenuePrevMonthly ?? Array(12).fill({ amount: 0 })
   216:   ).map((m) => m.amount);
   217:   const profThis = (data?.profitMonthly ?? Array(12).fill({ amount: 0 })).map(
   218:     (m) => m.amount
   219:   );
   220:   const profPrev = (
   221:     data?.profitPrevMonthly ?? Array(12).fill({ amount: 0 })
   222:   ).map((m) => m.amount);
   223: 
   224:   const typeKpis = data?.typeKpis ?? [];
   225:   const typesCatsLocalized = typeKpis.map((t) => mapType(t.type));
   226:   const typeRevenue = typeKpis.map((t) => t.revenue ?? 0);
   227:   const typeProfit = typeKpis.map((t) => t.profit ?? 0);
   228:   const typeCapacity = typeKpis.map((t) => t.capacity ?? 0);
   229:   const typeCurrent = typeKpis.map((t) => t.current ?? 0);
   230:   const typeUtilPct = typeKpis.map((t) => t.utilPct ?? 0);
   231: 
   232:   const topOrg = data?.topOrgRevenue ?? [];
   233: 
   234:   // Removed unused KPI fields (can be re-added when UI uses them):
   235:   // yoyNewPct, revenueYtd, yoyRevenuePct, profitYtd, yoyProfitPct,
   236:   // capacityUtilPct, productivity
   237: 
   238:   const themeKey = dark ? "dark" : "light";
   239:   const baseArea = {
   240:     theme: { mode: themeKey },
   241:     chart: {
   242:       background: "transparent",
   243:       toolbar: { show: false },
   244:       foreColor: apx.fg,
   245:     },
   246:     xaxis: {
   247:       categories: MONTHS,
   248:       axisBorder: { show: true, color: apx.border },
   249:       axisTicks: { show: true, color: apx.border },
   250:       labels: { style: { colors: MONTHS.map(() => apx.muted) } },
   251:     },
   252:     yaxis: { labels: { style: { colors: [apx.muted] } } },
   253:     stroke: { curve: "smooth", width: 3 },
   254:     markers: { size: 0, strokeColors: apx.card },
   255:     fill: {
   256:       type: "gradient",
   257:       gradient: { opacityFrom: 0.35, opacityTo: 0.05 },
   258:     },
   259:     grid: { strokeDashArray: 4, borderColor: apx.border },
   260:     tooltip: { theme: themeKey },
   261:     dataLabels: { enabled: false },
   262:     legend: { position: "top", labels: { colors: apx.muted } },
   263:     noData: { text: "Ma’lumot yo‘q" },
   264:   };
   265:   const baseDonut = {
   266:     theme: { mode: themeKey },
   267:     chart: { background: "transparent", foreColor: apx.fg },
   268:     labels: donutLabelsLocalized,
   269:     legend: { position: "bottom", labels: { colors: apx.muted } },
   270:     dataLabels: { enabled: true },
   271:     stroke: { colors: [apx.card] },
   272:     noData: { text: "Ma’lumot yo‘q" },
   273:   };
   274:   const baseBar = {
   275:     theme: { mode: themeKey },
   276:     chart: {
   277:       background: "transparent",
   278:       foreColor: apx.fg,
   279:       stacked: false,
   280:       toolbar: { show: false },
   281:     },
   282:     grid: { borderColor: apx.border },
   283:     xaxis: {
   284:       labels: { style: { colors: typesCatsLocalized.map(() => apx.muted) } },
   285:       categories: typesCatsLocalized,
   286:     },
   287:     yaxis: { labels: { style: { colors: [apx.muted] } } },
   288:     dataLabels: { enabled: false },
   289:     legend: { position: "top", labels: { colors: apx.muted } },
   290:     noData: { text: "Ma’lumot yo‘q" },
   291:   };
   292:   const baseStacked = {
   293:     ...baseBar,
   294:     chart: { ...baseBar.chart, stacked: true },
   295:   };
   296: 
   297:   const yoyBadge = (pct) =>
   298:     pct == null ? null : (
   299:       <span className={`${s.badge} ${pct >= 0 ? s.badgeUp : s.badgeDown}`}>
   300:         <LuTrendingUp size={14} /> {pct.toFixed(1)}%
   301:       </span>
   302:     );
   303: 
   304:   return (
   305:     <div ref={rootRef} className={s.root} data-theme={dark ? "dark" : "light"}>
   306:       <div className={s.header}>
   307:         <div className={s.titleWrap}>
   308:           <h1 className={s.title}>Boshqaruv paneli</h1>
   309:           <span className={s.sub}>
   310:             {loading ? "Yuklanmoqda…" : `${fmtNum(total)} ta obyekt`}
   311:           </span>
   312:         </div>
   313:         <div className={s.toolbar}>
   314:           <div className={s.filterRow}>
   315:             <select
   316:               value={range}
   317:               onChange={(e) => setRange(e.target.value)}
   318:               className={s.select}
   319:               aria-label="Davr"
   320:             >
   321:               <option value="year">Yil</option>
   322:               <option value="quarter">Chorak</option>
   323:               <option value="custom">Maxsus davr</option>
   324:             </select>
   325: 
   326:             {(range === "year" || range === "quarter") && (
   327:               <select
   328:                 value={year}
   329:                 onChange={(e) => setYear(Number(e.target.value))}
   330:                 className={s.select}
   331:                 aria-label="Yil"
   332:               >
   333:                 {years.map((y) => (
   334:                   <option key={y} value={y}>
   335:                     {y}
   336:                   </option>
   337:                 ))}
   338:               </select>
   339:             )}
   340: 
   341:             {range === "quarter" && (
   342:               <select
   343:                 value={quarter}
   344:                 onChange={(e) => setQuarter(Number(e.target.value))}
   345:                 className={s.select}
   346:                 aria-label="Chorak"
   347:               >
   348:                 <option value={1}>1-chorak</option>
   349:                 <option value={2}>2-chorak</option>
   350:                 <option value={3}>3-chorak</option>
   351:                 <option value={4}>4-chorak</option>
   352:               </select>
   353:             )}
   354: 
   355:             {range === "custom" && (
   356:               <>
   357:                 <input
   358:                   type="month"
   359:                   value={from}
   360:                   onChange={(e) => setFrom(e.target.value)}
   361:                   className={s.select}
   362:                   aria-label="Boshlanish (oy)"
   363:                 />
   364:                 <input
   365:                   type="month"
   366:                   value={to}
   367:                   onChange={(e) => setTo(e.target.value)}
   368:                   className={s.select}
   369:                   aria-label="Tugash (oy)"
   370:                 />
   371:               </>
   372:             )}
   373: 
   374:             <div style={{ minWidth: 260 }}>
   375:               <OrgUnitSelect
   376:                 value={orgId}
   377:                 onChange={(opt) => setOrgId(opt ? opt.id : null)}
   378:                 placeholder="Tashkilot bo'yicha filtr..."
   379:                 allowClear
   380:               />
   381:             </div>
   382:           </div>
   383: 
   384:           <div className={s.filterRow}>
   385:             <div className={s.typeChips}>
   386:               {ALL_TYPES.map((enumVal) => {
   387:                 const on = selectedTypes.has(enumVal);
   388:                 const present = rawTypes.includes(enumVal);
   389:                 return (
   390:                   <button
   391:                     key={enumVal}
   392:                     onClick={() => (present ? toggleType(enumVal) : null)}
   393:                     className={`${s.chip} ${on ? s.chipActive : ""} ${
   394:                       !present ? s.chipDisabled : ""
   395:                     }`}
   396:                     aria-pressed={on}
   397:                     title={mapType(enumVal)}
   398:                     disabled={!present}
   399:                   >
   400:                     {mapType(enumVal)}
   401:                   </button>
   402:                 );
   403:               })}
   404:               {selectedTypes.size > 0 && (
   405:                 <button
   406:                   onClick={clearTypes}
   407:                   className={`${s.btn} ${s.btnSoft}`}
   408:                   title="Tur filtrlarini tozalash"
   409:                 >
   410:                   Tozalash
   411:                 </button>
   412:               )}
   413:             </div>
   414:             <div className={s.actions}>
   415:               <button
   416:                 onClick={load}
   417:                 className={s.btn}
   418:                 title="Yangilash"
   419:                 disabled={loading}
   420:               >
   421:                 <LuRotateCw size={16} />
   422:               </button>
   423:               {EXPORT_ENABLED && (
   424:                 <button
   425:                   className={s.btn}
   426:                   title="CSVga eksport"
   427:                   disabled={exporting}
   428:                   onClick={handleExport}
   429:                 >
   430:                   {exporting ? "Eksport..." : "CSV"}
   431:                 </button>
   432:               )}
   433:             </div>
   434:           </div>
   435:         </div>
   436:       </div>
   437: 
   438:       {err && (
   439:         <div className={s.error}>
   440:           <FiAlertTriangle /> {err}
   441:         </div>
   442:       )}
   443: 
   444:       <div className={s.kpiGrid}>
   445:         <Kpi
   446:           icon={<BiBarChart size={18} />}
   447:           label="Jami obyektlar"
   448:           value={fmtNum(total)}
   449:         />
   450:         <Kpi
   451:           icon={<LuTrendingUp size={18} />}
   452:           label="Faol"
   453:           value={fmtNum(active)}
   454:           tone="good"
   455:         />
   456:         <Kpi
   457:           icon={<FiAlertTriangle size={18} />}
   458:           label="Faol emas"
   459:           value={fmtNum(inactive)}
   460:           tone="warn"
   461:         />
   462:         <Kpi
   463:           icon={<BiPieChart size={18} />}
   464:           label="Turlar"
   465:           value={fmtNum(distinctTypes)}
   466:         />
   467:       </div>
   468: 
   469:       <div className={s.card}>
   470:         <div className={s.cardHead}>
   471:           <span>Yangi obyektlar — joriy yil boshidan hozirgacha</span>
   472:           {yoyBadge(data?.yoyNewPct)}
   473:         </div>
   474:         <div
   475:           className={s.kpiGrid}
   476:           style={{ gridTemplateColumns: "repeat(2,1fr)" }}
   477:         >
   478:           <Kpi
   479:             icon={<LuTrendingUp size={18} />}
   480:             label={`${data?.year ?? year}`}
   481:             value={fmtNum(data?.yearNewCount ?? 0)}
   482:             tone="good"
   483:           />
   484:           <Kpi
   485:             icon={<LuTrendingUp size={18} />}
   486:             label={`${(data?.year ?? year) - 1}`}
   487:             value={fmtNum(data?.prevYearNewCount ?? 0)}
   488:           />
   489:         </div>
   490:       </div>
   491: 
   492:       <div className={s.kpiGrid} style={{ marginTop: 12 }}>
   493:         <Kpi
   494:           icon={<LuTrendingUp size={18} />}
   495:           label="Tushum — joriy yil boshidan hozirgacha"
   496:           value={fmtMoney(data?.revenueYtd ?? 0)}
   497:           extra={yoyBadge(data?.yoyRevenuePct)}
   498:         />
   499:         <Kpi
   500:           icon={<LuTrendingUp size={18} />}
   501:           label="Sof foyda — joriy yil boshidan hozirgacha"
   502:           value={fmtMoney(data?.profitYtd ?? 0)}
   503:           extra={yoyBadge(data?.yoyProfitPct)}
   504:         />
   505:         <Kpi
   506:           icon={<LuTrendingUp size={18} />}
   507:           label="Sig‘imdan foydalanish"
   508:           value={fmtPct(data?.capacityUtilPct ?? 0)}
   509:         />
   510:         <Kpi
   511:           icon={<LuTrendingUp size={18} />}
   512:           label="Hosildorlik"
   513:           value={
   514:             data?.productivityKgPerM2 == null
   515:               ? "—"
   516:               : `${data.productivityKgPerM2.toFixed(2)} kg/m²`
   517:           }
   518:         />
   519:       </div>
   520: 
   521:       <div className={s.gridWide}>
   522:         <div className={s.card}>
   523:           <div className={s.cardHead}>
   524:             <span>Oylar bo‘yicha qo‘shilish</span>
   525:           </div>
   526:           <Chart
   527:             type="area"
   528:             height={300}
   529:             series={[
   530:               { name: `${data?.year ?? year} / Yangi`, data: monthlyThis },
   531:               {
   532:                 name: `${(data?.year ?? year) - 1} / Yangi`,
   533:                 data: monthlyPrev,
   534:               },
   535:             ]}
   536:             options={{
   537:               ...baseArea,
   538:               tooltip: {
   539:                 ...baseArea.tooltip,
   540:                 y: { formatter: (v) => `${v} ta` },
   541:               },
   542:             }}
   543:           />
   544:         </div>
   545: 
   546:         <div className={s.card}>
   547:           <div className={s.cardHead}>
   548:             <span>Tushum oylar bo‘yicha</span>
   549:           </div>
   550:           <Chart
   551:             type="area"
   552:             height={300}
   553:             series={[
   554:               { name: `${data?.year ?? year} / Tushum`, data: revThis },
   555:               { name: `${(data?.year ?? year) - 1} / Tushum`, data: revPrev },
   556:             ]}
   557:             options={{
   558:               ...baseArea,
   559:               tooltip: {
   560:                 ...baseArea.tooltip,
   561:                 y: { formatter: (v) => fmtMoney(v) },
   562:               },
   563:             }}
   564:           />
   565:         </div>
   566: 
   567:         <div className={s.card}>
   568:           <div className={s.cardHead}>
   569:             <span>Sof foyda oylar bo‘yicha</span>
   570:           </div>
   571:           <Chart
   572:             type="area"
   573:             height={300}
   574:             series={[
   575:               { name: `${data?.year ?? year} / Sof foyda`, data: profThis },
   576:               {
   577:                 name: `${(data?.year ?? year) - 1} / Sof foyda`,
   578:                 data: profPrev,
   579:               },
   580:             ]}
   581:             options={{
   582:               ...baseArea,
   583:               tooltip: {
   584:                 ...baseArea.tooltip,
   585:                 y: { formatter: (v) => fmtMoney(v) },
   586:               },
   587:             }}
   588:           />
   589:         </div>
   590: 
   591:         <div className={s.card}>
   592:           <div className={s.cardHead}>
   593:             <span>Sig‘im va joriy bandlik — turlar</span>
   594:           </div>
   595:           <Chart
   596:             type="bar"
   597:             height={320}
   598:             series={[
   599:               { name: "Sig‘im", data: typeCapacity },
   600:               { name: "Joriy bandlik", data: typeCurrent },
   601:             ]}
   602:             options={baseStacked}
   603:           />
   604:         </div>
   605: 
   606:         <div className={s.card}>
   607:           <div className={s.cardHead}>
   608:             <span>Tushum / Sof foyda — turlar</span>
   609:           </div>
   610:           <Chart
   611:             type="bar"
   612:             height={320}
   613:             series={[
   614:               { name: "Tushum", data: typeRevenue },
   615:               { name: "Sof foyda", data: typeProfit },
   616:             ]}
   617:             options={baseBar}
   618:           />
   619:         </div>
   620: 
   621:         <div className={s.card}>
   622:           <div className={s.cardHead}>
   623:             <span>Turlar bo‘yicha foydalanish (%)</span>
   624:           </div>
   625:           <Chart
   626:             type="bar"
   627:             height={320}
   628:             series={[{ name: "Foydalanish %", data: typeUtilPct }]}
   629:             options={{
   630:               ...baseBar,
   631:               yaxis: {
   632:                 ...baseBar.yaxis,
   633:                 labels: {
   634:                   style: { colors: [apx.muted] },
   635:                   formatter: (v) => `${v.toFixed(0)}%`,
   636:                 },
   637:               },
   638:               dataLabels: { enabled: false },
   639:             }}
   640:           />
   641:         </div>
   642: 
   643:         <div className={s.card}>
   644:           <div className={s.cardHead}>
   645:             <span>Bo'linmalar TOP-10 — Tushum</span>
   646:           </div>
   647:           <Chart
   648:             type="bar"
   649:             height={320}
   650:             series={[
   651:               {
   652:                 name: "Tushum",
   653:                 data: (topOrg ?? []).map((o) => o.revenue ?? 0),
   654:               },
   655:             ]}
   656:             options={{
   657:               ...baseBar,
   658:               plotOptions: { bar: { horizontal: true } },
   659:               xaxis: {
   660:                 ...baseBar.xaxis,
   661:                 categories: (topOrg ?? []).map((o) => o.orgName),
   662:               },
   663:               tooltip: {
   664:                 theme: themeKey,
   665:                 y: { formatter: (v) => fmtMoney(v) },
   666:               },
   667:             }}
   668:           />
   669:         </div>
   670: 
   671:         <div className={s.card}>
   672:           <div className={s.cardHead}>
   673:             <span>Turlar bo‘yicha taqsimot (soni)</span>
   674:           </div>
   675:           <Chart
   676:             type="donut"
   677:             height={320}
   678:             series={donutSeries}
   679:             options={baseDonut}
   680:           />
   681:         </div>
   682:       </div>
   683: 
   684:       <div className={s.card} style={{ marginTop: 12 }}>
   685:         <div className={s.cardHead}>
   686:           <span>Bo'linmalar kesimida (soni)</span>
   687:           {!loading && (
   688:             <span className={s.sub}>{(data?.orgs ?? []).length} ta</span>
   689:           )}
   690:         </div>
   691:         {loading ? (
   692:           <div className={s.loading}>Yuklanmoqda…</div>
   693:         ) : (
   694:           <div className={s.tableWrap}>
   695:             <table className={s.table}>
   696:               <thead>
   697:                 <tr>
   698:                   <th>#</th>
   699:                   <th>Tashkilot</th>
   700:                   <th className={s.right}>Obyektlar</th>
   701:                 </tr>
   702:               </thead>
   703:               <tbody>
   704:                 {(data?.orgs ?? []).map((o, i) => (
   705:                   <tr key={`${o.orgId}-${i}`}>
   706:                     <td>{i + 1}</td>
   707:                     <td>{o.orgName}</td>
   708:                     <td className={s.right}>{fmtNum(o.count)}</td>
   709:                   </tr>
   710:                 ))}
   711:                 {(!data?.orgs || data.orgs.length === 0) && (
   712:                   <tr>
   713:                     <td colSpan={3}>Ma’lumot yo‘q</td>
   714:                   </tr>
   715:                 )}
   716:               </tbody>
   717:             </table>
   718:           </div>
   719:         )}
   720:       </div>
   721:     </div>
   722:   );
   723: }
   724: 
   725: function Kpi({ icon, label, value, tone, extra }) {
   726:   const toneClass =
   727:     tone === "good"
   728:       ? "good"
   729:       : tone === "warn"
   730:       ? "warn"
   731:       : tone === "danger"
   732:       ? "danger"
   733:       : "";
   734:   return (
   735:     <div className={`${s.kpi} ${toneClass ? s[toneClass] : ""}`}>
   736:       <div className={s.kpiIcon}>{icon}</div>
   737:       <div className={s.kpiMeta}>
   738:         <div className={s.kpiLabel}>{label}</div>
   739:         <div className={s.kpiValue}>{value}</div>
   740:         {extra ? <div className={s.kpiExtra}>{extra}</div> : null}
   741:       </div>
   742:     </div>
   743:   );
   744: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\Dashboard.module.scss
SIZE: 5756 bytes
================================================================================
     1: /* src/pages/Dashboard.module.scss */
     2: /* Qo'shimcha styling: filters, wide grid, badges, kpi extra */
     3: 
     4: .root {
     5:   --db-bg: var(--bg);
     6:   --db-card: var(--card);
     7:   --db-fg: var(--text);
     8:   --db-muted: var(--muted);
     9:   --db-border: var(--border);
    10:   --db-row: color-mix(in srgb, var(--card) 90%, transparent);
    11:   --db-accent: var(--brand);
    12:   --db-accent-2: var(--brand-2);
    13:   --db-shadow: var(--shadow-md);
    14:   color: var(--db-fg);
    15: }
    16: 
    17: .header {
    18:   display: flex;
    19:   align-items: baseline;
    20:   justify-content: space-between;
    21:   gap: 12px;
    22:   margin-bottom: 12px;
    23: }
    24: .titleWrap {
    25:   display: flex;
    26:   align-items: baseline;
    27:   gap: 10px;
    28: }
    29: .title {
    30:   margin: 0;
    31:   font-size: 22px;
    32:   font-weight: 800;
    33:   letter-spacing: 0.2px;
    34:   background: linear-gradient(135deg, var(--db-accent), var(--db-accent-2));
    35:   -webkit-background-clip: text;
    36:   background-clip: text;
    37:   color: transparent;
    38: }
    39: .sub {
    40:   font-size: 12px;
    41:   color: var(--db-muted);
    42: }
    43: 
    44: .toolbar {
    45:   display: flex;
    46:   gap: 8px;
    47:   align-items: center;
    48:   justify-content: flex-end;
    49:   flex-wrap: wrap;
    50: }
    51: 
    52: /* New structured filter layout */
    53: .filterRow {
    54:   display: flex;
    55:   flex-wrap: wrap;
    56:   gap: 8px;
    57:   align-items: center;
    58:   justify-content: flex-end;
    59:   width: 100%;
    60: }
    61: .filterRow + .filterRow {
    62:   margin-top: 6px;
    63: }
    64: 
    65: .typeChips {
    66:   display: flex;
    67:   flex: 1 1 auto;
    68:   flex-wrap: wrap;
    69:   gap: 6px;
    70:   min-height: 38px;
    71: }
    72: .actions {
    73:   display: flex;
    74:   gap: 8px;
    75:   flex-shrink: 0;
    76:   align-items: center;
    77: }
    78: @media (max-width: 900px) {
    79:   .toolbar {
    80:     flex-direction: column;
    81:     align-items: stretch;
    82:   }
    83:   .filterRow {
    84:     justify-content: flex-start;
    85:   }
    86:   .actions {
    87:     justify-content: flex-start;
    88:   }
    89: }
    90: .select,
    91: .btn {
    92:   height: 38px;
    93:   padding: 0 12px;
    94:   border-radius: 12px;
    95:   border: 1px solid var(--db-border);
    96:   background: var(--db-card);
    97:   color: var(--db-fg);
    98:   outline: none;
    99: }
   100: .btn {
   101:   cursor: pointer;
   102:   transition: background 0.15s ease, transform 0.03s ease-in-out;
   103: }
   104: .btn:hover {
   105:   filter: brightness(0.98);
   106: }
   107: .btn:active {
   108:   transform: translateY(1px);
   109: }
   110: .btnSoft {
   111:   background: var(--db-row);
   112: }
   113: 
   114: .chips {
   115:   display: flex;
   116:   gap: 6px;
   117:   align-items: center;
   118:   flex-wrap: wrap;
   119: }
   120: .chip {
   121:   border: 1px solid var(--db-border);
   122:   background: var(--db-card);
   123:   color: var(--db-fg);
   124:   padding: 8px 10px;
   125:   border-radius: 999px;
   126:   font-size: 12px;
   127:   cursor: pointer;
   128:   transition: background 0.15s ease, border-color 0.15s ease;
   129: }
   130: .chipActive {
   131:   background: color-mix(in srgb, var(--db-accent) 12%, transparent);
   132:   border-color: color-mix(in srgb, var(--db-accent) 35%, transparent);
   133: }
   134: .chipDisabled {
   135:   opacity: 0.45;
   136:   filter: grayscale(0.15);
   137:   cursor: not-allowed;
   138:   text-decoration: line-through;
   139: }
   140: 
   141: .error {
   142:   background: #fee2e2;
   143:   color: #991b1b;
   144:   border: 1px solid #fecaca;
   145:   padding: 10px 12px;
   146:   border-radius: 12px;
   147:   margin-bottom: 12px;
   148: }
   149: 
   150: .kpiGrid {
   151:   display: grid;
   152:   grid-template-columns: repeat(4, minmax(0, 1fr));
   153:   gap: 12px;
   154:   margin-bottom: 12px;
   155: }
   156: @media (max-width: 1200px) {
   157:   .kpiGrid {
   158:     grid-template-columns: repeat(2, 1fr);
   159:   }
   160: }
   161: 
   162: .kpi {
   163:   display: grid;
   164:   grid-template-columns: 44px 1fr;
   165:   gap: 10px;
   166:   padding: 14px;
   167:   border-radius: 16px;
   168:   border: 1px solid var(--db-border);
   169:   background: var(--db-card);
   170:   box-shadow: var(--db-shadow);
   171: }
   172: .kpiIcon {
   173:   width: 44px;
   174:   height: 44px;
   175:   display: grid;
   176:   place-items: center;
   177:   border-radius: 12px;
   178:   color: #fff;
   179:   background: linear-gradient(135deg, var(--db-accent), var(--db-accent-2));
   180: }
   181: .kpiMeta {
   182:   display: grid;
   183:   gap: 4px;
   184:   align-content: center;
   185: }
   186: .kpiLabel {
   187:   font-size: 12.5px;
   188:   color: var(--db-muted);
   189: }
   190: .kpiValue {
   191:   font-size: 20px;
   192:   font-weight: 800;
   193:   letter-spacing: 0.2px;
   194: }
   195: .kpiExtra {
   196:   font-size: 12px;
   197: }
   198: 
   199: .good .kpiIcon {
   200:   background: linear-gradient(135deg, #22c55e, #16a34a);
   201: }
   202: .warn .kpiIcon {
   203:   background: linear-gradient(135deg, #f59e0b, #d97706);
   204: }
   205: .danger .kpiIcon {
   206:   background: linear-gradient(135deg, #ef4444, #b91c1c);
   207: }
   208: 
   209: .card {
   210:   border: 1px solid var(--db-border);
   211:   background: var(--db-card);
   212:   border-radius: 16px;
   213:   box-shadow: var(--db-shadow);
   214:   padding: 12px;
   215: }
   216: .cardHead {
   217:   display: flex;
   218:   align-items: center;
   219:   justify-content: space-between;
   220:   font-weight: 700;
   221:   margin-bottom: 6px;
   222:   color: var(--db-fg);
   223: }
   224: 
   225: /* Wide grid for many charts */
   226: .gridWide {
   227:   display: grid;
   228:   grid-template-columns: repeat(2, minmax(0, 1fr));
   229:   gap: 12px;
   230: }
   231: @media (max-width: 1200px) {
   232:   .gridWide {
   233:     grid-template-columns: 1fr;
   234:   }
   235: }
   236: 
   237: /* Table */
   238: .tableWrap {
   239:   margin-top: 8px;
   240:   overflow-x: auto;
   241: }
   242: .table {
   243:   width: 100%;
   244:   border-collapse: separate;
   245:   border-spacing: 0;
   246:   font-size: 14px;
   247:   color: var(--db-fg);
   248: }
   249: .table thead th {
   250:   text-align: left;
   251:   padding: 10px 12px;
   252:   border-bottom: 1px solid var(--db-border);
   253:   background: var(--db-card);
   254:   position: sticky;
   255:   top: 0;
   256: }
   257: .table tbody td {
   258:   padding: 10px 12px;
   259:   border-bottom: 1px solid var(--db-border);
   260:   background: var(--db-card);
   261: }
   262: .table tbody tr:nth-child(2n) td {
   263:   background: var(--db-row);
   264: }
   265: .right {
   266:   text-align: right;
   267: }
   268: 
   269: /* YoY badge */
   270: .badge {
   271:   display: inline-flex;
   272:   align-items: center;
   273:   gap: 6px;
   274:   font-size: 12px;
   275:   padding: 4px 8px;
   276:   border-radius: 999px;
   277:   border: 1px solid var(--db-border);
   278: }
   279: .badgeUp {
   280:   color: #065f46;
   281:   background: #ecfdf5;
   282:   border-color: #a7f3d0aa;
   283: }
   284: .badgeDown {
   285:   color: #991b1b;
   286:   background: #fef2f2;
   287:   border-color: #fecacaaa;
   288: }
   289: 
   290: .loading {
   291:   margin-top: 10px;
   292:   font-size: 14px;
   293:   color: var(--db-muted);
   294:   display: inline-flex;
   295:   align-items: center;
   296:   gap: 8px;
   297: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\AuxiliaryLandsPage.jsx
SIZE: 277 bytes
================================================================================
     1: // src/pages/facilities/AuxiliaryLandsPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function AuxiliaryLandsPage() {
     4:   return (
     5:     <FacilityCrudTable type="AUX_LAND" title="Yordamchi xo‘jalik yerlari" />
     6:   );
     7: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\BorderLandsPage.jsx
SIZE: 254 bytes
================================================================================
     1: // src/pages/facilities/BorderLandsPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function BorderLandsPage() {
     4:   return <FacilityCrudTable type="BORDER_LAND" title="Chegara oldi yerlari" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\CowshedPage.jsx
SIZE: 229 bytes
================================================================================
     1: // src/pages/facilities/CowshedPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function CowshedPage() {
     4:   return <FacilityCrudTable type="COWSHED" title="Molxona" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\FishPondsPage.jsx
SIZE: 249 bytes
================================================================================
     1: // src/pages/facilities/FishPondsPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function FishPondsPage() {
     4:   return <FacilityCrudTable type="FISHPOND" title="Baliqchilik ko‘llari" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\FurFarmPage.jsx
SIZE: 230 bytes
================================================================================
     1: // src/pages/facilities/FurFarmPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function FurFarmPage() {
     4:   return <FacilityCrudTable type="TURKEY" title="Kurkaxona" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\GenericFacilityPage.jsx
SIZE: 14051 bytes
================================================================================
     1: import { useEffect, useMemo, useState } from "react";
     2: import { debugError } from "../../utils/debug";
     3: import { useParams } from "react-router-dom";
     4: import {
     5:   createFacility,
     6:   deleteFacility,
     7:   listFacilitiesPage,
     8:   putFacility,
     9: } from "../../api/facilities";
    10: import FacilityForm from "../../components/facilities/FacilityForm";
    11: import { toast } from "react-toastify";
    12: import Modal from "../../components/ui/Modal";
    13: import "../../styles/_facility_modal.scss";
    14: import { TYPE_LABELS } from "../../constants/facilityTypes";
    15: 
    16: /** URL slug -> enum (kanonik + legacy aliaslar) */
    17: const SLUG_TO_ENUM = {
    18:   greenhouse: "GREENHOUSE",
    19:   "poultry-meat": "POULTRY_MEAT",
    20:   "poultry-egg": "POULTRY_EGG",
    21:   poultry: "POULTRY_MEAT", // legacy: eski bookmarklar
    22:   turkey: "TURKEY",
    23:   cowshed: "COWSHED",
    24:   sheepfold: "SHEEPFOLD",
    25:   "workshops-sausage": "WORKSHOP_SAUSAGE",
    26:   "workshops-cookie": "WORKSHOP_COOKIE",
    27:   workshops: "WORKSHOP_SAUSAGE", // legacy
    28:   "aux-lands": "AUX_LAND",
    29:   "border-lands": "BORDER_LAND",
    30:   "fish-ponds": "FISHPOND",
    31:   "fish-farm": "FISHPOND", // legacy
    32:   "aux-land": "AUX_LAND",
    33:   "border-land": "BORDER_LAND",
    34: };
    35: 
    36: const ROUTE_LABELS = {
    37:   "poultry-meat": "Tovuqxona (go‘sht)",
    38:   "poultry-egg": "Tovuqxona (tuxum)",
    39:   "workshops-sausage": "Ishlab chiqarish sexi (kolbasa)",
    40:   "workshops-cookie": "Ishlab chiqarish sexi (pechenye)",
    41: };
    42: 
    43: export default function GenericFacilityPage() {
    44:   const { type: typeSlug } = useParams();
    45:   const [items, setItems] = useState([]);
    46:   const [q, setQ] = useState("");
    47:   const [type, setType] = useState("");
    48:   const [loading, setLoading] = useState(false);
    49: 
    50:   const [modalOpen, setModalOpen] = useState(false);
    51:   const [editing, setEditing] = useState(null);
    52:   const [mode, setMode] = useState("create");
    53:   const [deleteTarget, setDeleteTarget] = useState(null); // facility object for delete confirm
    54:   const [deleting, setDeleting] = useState(false);
    55: 
    56:   // Pagination state
    57:   const [page, setPage] = useState(0); // zero-based
    58:   const [size, setSize] = useState(10);
    59:   const [total, setTotal] = useState(0);
    60:   const totalPages = Math.max(1, Math.ceil(total / size));
    61: 
    62:   const from = total ? page * size + 1 : 0;
    63:   const to = Math.min(total, (page + 1) * size);
    64: 
    65:   const lockedByRoute = !!typeSlug;
    66: 
    67:   const typeOptions = useMemo(() => {
    68:     const allOpts = Object.entries(TYPE_LABELS).map(([v, l]) => ({
    69:       value: v,
    70:       label: l,
    71:     }));
    72:     if (lockedByRoute && type) {
    73:       return [{ value: type, label: TYPE_LABELS[type] || type }];
    74:     }
    75:     return [{ value: "", label: "Barchasi" }, ...allOpts];
    76:   }, [lockedByRoute, type]);
    77: 
    78:   const fetchData = async (over = {}) => {
    79:     setLoading(true);
    80:     try {
    81:       const res = await listFacilitiesPage({
    82:         q: over.q !== undefined ? over.q : q || undefined,
    83:         type:
    84:           over.type !== undefined ? over.type || undefined : type || undefined,
    85:         page: over.page ?? page,
    86:         size: over.size ?? size,
    87:         // kerak bo‘lsa boshqa sortlar ham qo‘shish mumkin:
    88:         sort: ["createdAt,desc"],
    89:       });
    90: 
    91:       setItems(res?.content ?? []);
    92:       setTotal(res?.totalElements ?? 0);
    93:     } catch (e) {
    94:       debugError("GenericFacilityPage listFacilitiesPage failed", e);
    95:       toast.error("Ma’lumot yuklashda xatolik");
    96:     } finally {
    97:       setLoading(false);
    98:     }
    99:   };
   100: 
   101:   useEffect(() => {
   102:     if (!typeSlug) {
   103:       setType("");
   104:       fetchData({ type: "" });
   105:       return;
   106:     }
   107:     const enumVal = SLUG_TO_ENUM[(typeSlug || "").toLowerCase()] || "";
   108:     setType(enumVal);
   109:     fetchData({ type: enumVal });
   110:     // eslint-disable-next-line react-hooks/exhaustive-deps
   111:   }, [typeSlug]);
   112: 
   113:   useEffect(() => {
   114:     if (!typeSlug) fetchData();
   115:     // eslint-disable-next-line react-hooks/exhaustive-deps
   116:   }, []);
   117: 
   118:   useEffect(() => {
   119:     // type (filtr), page, size o'zgarganda ro'yxatni qayta yuklaymiz
   120:     fetchData();
   121:     // eslint-disable-next-line react-hooks/exhaustive-deps
   122:   }, [type, page, size]);
   123: 
   124:   const onSearch = (e) => {
   125:     e.preventDefault();
   126:     setPage(0);
   127:     fetchData({ page: 0 });
   128:   };
   129: 
   130:   const openCreate = () => {
   131:     setEditing(null);
   132:     setMode("create");
   133:     setModalOpen(true);
   134:   };
   135:   const openEdit = (row) => {
   136:     setEditing(row);
   137:     setMode("edit");
   138:     setModalOpen(true);
   139:   };
   140:   const requestDelete = (row) => setDeleteTarget(row);
   141:   const cancelDelete = () => {
   142:     if (deleting) return;
   143:     setDeleteTarget(null);
   144:   };
   145:   const confirmDelete = async () => {
   146:     if (!deleteTarget) return;
   147:     setDeleting(true);
   148:     try {
   149:       await deleteFacility(deleteTarget.id);
   150:       setDeleteTarget(null);
   151:       await fetchData();
   152:     } catch (e) {
   153:       toast.error(e.message || "O‘chirishda xatolik");
   154:     } finally {
   155:       setDeleting(false);
   156:     }
   157:   };
   158: 
   159:   const submitCreate = async (payload) => {
   160:     try {
   161:       await createFacility(payload);
   162:       setModalOpen(false);
   163:       await fetchData();
   164:     } catch (e) {
   165:       toast.error(e.message || "Saqlashda xatolik");
   166:     }
   167:   };
   168:   const submitEdit = async (payload) => {
   169:     try {
   170:       await putFacility(editing.id, { ...payload });
   171:       setModalOpen(false);
   172:       await fetchData();
   173:     } catch (e) {
   174:       toast.error(e.message || "Yangilashda xatolik");
   175:     }
   176:   };
   177: 
   178:   const headerLabel =
   179:     ROUTE_LABELS[(typeSlug || "").toLowerCase()] ||
   180:     (type ? TYPE_LABELS[type] : "Barchasi");
   181: 
   182:   return (
   183:     <div className="org-table-page">
   184:       <div className="page-header">
   185:         <h2>Inshootlar</h2>
   186:         <div className="muted">
   187:           Jadval URL turiga mos ravishda: {headerLabel}
   188:         </div>
   189:       </div>
   190: 
   191:       <div className="org-table-wrap">
   192:         <form className="toolbar" onSubmit={onSearch}>
   193:           <input
   194:             className="search"
   195:             placeholder="Qidiruv (nomi bo‘yicha)"
   196:             value={q}
   197:             onChange={(e) => setQ(e.target.value)}
   198:           />
   199:           <select
   200:             className="parent-filter"
   201:             value={type}
   202:             onChange={(e) => setType(e.target.value)}
   203:             disabled={lockedByRoute}
   204:             title={
   205:               lockedByRoute
   206:                 ? "URL bo‘yicha tur tanlangan"
   207:                 : "Tur bo‘yicha filtr"
   208:             }
   209:           >
   210:             {typeOptions.map((o) => (
   211:               <option key={`${o.value}_${o.label}`} value={o.value}>
   212:                 {o.label}
   213:               </option>
   214:             ))}
   215:           </select>
   216: 
   217:           <button type="submit" className="btn">
   218:             Qidirish
   219:           </button>
   220:           <div className="spacer" />
   221:           <button type="button" className="btn primary" onClick={openCreate}>
   222:             Yangi qo‘shish
   223:           </button>
   224:         </form>
   225: 
   226:         <div className="table-card">
   227:           <table className="org-table">
   228:             <thead>
   229:               <tr>
   230:                 <th style={{ width: 60 }}>ID</th>
   231:                 <th>Nomi</th>
   232:                 <th>Turi</th>
   233:                 <th>Tashk. ID</th>
   234:                 <th>Koordinata</th>
   235:                 <th style={{ width: 220 }}>Amallar</th>
   236:               </tr>
   237:             </thead>
   238:             <tbody>
   239:               {loading && (
   240:                 <tr>
   241:                   <td colSpan={6}>
   242:                     <div className="overlay">
   243:                       <div className="spinner" />
   244:                     </div>
   245:                   </td>
   246:                 </tr>
   247:               )}
   248:               {!loading && items.length === 0 && (
   249:                 <tr>
   250:                   <td colSpan={6} className="empty">
   251:                     Ma’lumot topilmadi
   252:                   </td>
   253:                 </tr>
   254:               )}
   255:               {!loading &&
   256:                 items.map((row) => (
   257:                   <tr key={row.id}>
   258:                     <td className="num">{row.id}</td>
   259:                     <td>{row.name}</td>
   260:                     <td>{TYPE_LABELS[row.type] || row.type}</td>
   261:                     <td className="num">{row.orgId}</td>
   262:                     <td className="muted">
   263:                       {row.lat != null && row.lng != null
   264:                         ? `${row.lat.toFixed(4)}, ${row.lng.toFixed(4)}`
   265:                         : "—"}
   266:                     </td>
   267:                     <td className="actions">
   268:                       <button className="btn" onClick={() => openEdit(row)}>
   269:                         Tahrirlash
   270:                       </button>
   271:                       <button
   272:                         className="btn danger"
   273:                         onClick={() => requestDelete(row)}
   274:                       >
   275:                         O‘chirish
   276:                       </button>
   277:                     </td>
   278:                   </tr>
   279:                 ))}
   280:             </tbody>
   281:           </table>
   282:           {/* Paginator */}
   283:           <div className="paginator">
   284:             <button
   285:               className="btn"
   286:               disabled={page === 0}
   287:               onClick={() => setPage(0)}
   288:               title="Birinchi sahifa"
   289:             >
   290:               «
   291:             </button>
   292:             <button
   293:               className="btn"
   294:               disabled={page === 0}
   295:               onClick={() => setPage((p) => Math.max(0, p - 1))}
   296:               title="Oldingi sahifa"
   297:             >
   298:               ‹
   299:             </button>
   300: 
   301:             <span className="muted">
   302:               Sahifa {page + 1} / {totalPages}
   303:             </span>
   304: 
   305:             <button
   306:               className="btn"
   307:               disabled={page >= totalPages - 1}
   308:               onClick={() => setPage((p) => Math.min(totalPages - 1, p + 1))}
   309:               title="Keyingi sahifa"
   310:             >
   311:               ›
   312:             </button>
   313:             <button
   314:               className="btn"
   315:               disabled={page >= totalPages - 1}
   316:               onClick={() => setPage(totalPages - 1)}
   317:               title="Oxirgi sahifa"
   318:             >
   319:               »
   320:             </button>
   321: 
   322:             <div className="spacer" />
   323: 
   324:             <span className="muted">
   325:               Ko‘rsatilmoqda {from}–{to} / {total}
   326:             </span>
   327: 
   328:             <select
   329:               className="select"
   330:               value={size}
   331:               onChange={(e) => {
   332:                 setSize(Number(e.target.value));
   333:                 setPage(0);
   334:               }}
   335:               title="Sahifadagi qatorlar"
   336:             >
   337:               <option value={10}>10</option>
   338:               <option value={25}>25</option>
   339:               <option value={50}>50</option>
   340:               <option value={100}>100</option>
   341:               <option value={500}>500</option>
   342:             </select>
   343:           </div>
   344:         </div>
   345: 
   346:         <div className="paginator">
   347:           <span className="muted">Topildi: {total}</span>
   348:         </div>
   349:       </div>
   350: 
   351:       <Modal
   352:         open={modalOpen}
   353:         onClose={() => setModalOpen(false)}
   354:         title={mode === "create" ? "Yangi inshoot" : "Inshootni tahrirlash"}
   355:         size="lg"
   356:         className="facility-create-modal"
   357:       >
   358:         <div className="facility-form">
   359:           <FacilityForm
   360:             initial={editing}
   361:             onCancel={() => setModalOpen(false)}
   362:             onSubmit={mode === "create" ? submitCreate : submitEdit}
   363:           />
   364:         </div>
   365:       </Modal>
   366: 
   367:       {/* Delete confirm modal */}
   368:       <Modal
   369:         open={!!deleteTarget}
   370:         onClose={cancelDelete}
   371:         title="O‘chirishni tasdiqlang"
   372:         size="sm"
   373:         className="facility-delete-modal"
   374:         preventCloseOnBackdrop={deleting}
   375:         disableEscapeClose={deleting}
   376:       >
   377:         {deleteTarget && (
   378:           <div className="confirm-body">
   379:             <div style={{ display: "flex", gap: 16 }}>
   380:               <div className="danger-icon">⚠️</div>
   381:               <div style={{ display: "grid", gap: 8 }}>
   382:                 <h3 className="headline">{deleteTarget.name}</h3>
   383:                 <p className="desc">
   384:                   Ushbu inshootni o‘chirmoqchisiz. Bu amal{" "}
   385:                   <b>bekor qilinmaydi</b>.
   386:                 </p>
   387:               </div>
   388:             </div>
   389:             <div className="meta-box">
   390:               <div className="row">
   391:                 <span className="k">ID:</span>
   392:                 <span>{deleteTarget.id}</span>
   393:               </div>
   394:               <div className="row">
   395:                 <span className="k">Tur:</span>
   396:                 <span>
   397:                   {TYPE_LABELS[deleteTarget.type] || deleteTarget.type}
   398:                 </span>
   399:               </div>
   400:               <div className="row">
   401:                 <span className="k">Org:</span>
   402:                 <span>{deleteTarget.orgId}</span>
   403:               </div>
   404:               {deleteTarget.lat != null && deleteTarget.lng != null && (
   405:                 <div className="row">
   406:                   <span className="k">Loc:</span>
   407:                   <span>
   408:                     {deleteTarget.lat.toFixed(4)}, {deleteTarget.lng.toFixed(4)}
   409:                   </span>
   410:                 </div>
   411:               )}
   412:             </div>
   413:             <div className="warn-box">
   414:               <span>⚠️</span>
   415:               <span>
   416:                 Agar ushbu obyekt xaritada qatlamlarga bog‘langan bo‘lsa, vizual
   417:                 komponentlar ham yo‘qoladi.
   418:               </span>
   419:             </div>
   420:             <div className="modal-actions">
   421:               <button
   422:                 className="btn"
   423:                 disabled={deleting}
   424:                 onClick={cancelDelete}
   425:               >
   426:                 Bekor
   427:               </button>
   428:               <button
   429:                 className="btn danger"
   430:                 disabled={deleting}
   431:                 onClick={confirmDelete}
   432:               >
   433:                 {deleting ? "O‘chirilmoqda…" : "Ha, o‘chirish"}
   434:               </button>
   435:             </div>
   436:           </div>
   437:         )}
   438:       </Modal>
   439:     </div>
   440:   );
   441: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\GreenhousePage.jsx
SIZE: 240 bytes
================================================================================
     1: // src/pages/facilities/GreenhousePage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function GreenhousePage() {
     4:   return <FacilityCrudTable type="GREENHOUSE" title="Issiqxona" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\index.jsx
SIZE: 588 bytes
================================================================================
     1: // src/pages/facilities/index.jsx
     2: export { default as GreenhousePage } from "./GreenhousePage";
     3: export { default as PoultryPage } from "./PoultryPage";
     4: export { default as CowshedPage } from "./CowshedPage";
     5: export { default as FurFarmPage } from "./FurFarmPage";
     6: export { default as SheepfoldPage } from "./SheepfoldPage";
     7: export { default as WorkshopsPage } from "./WorkshopsPage";
     8: export { default as AuxiliaryLandsPage } from "./AuxiliaryLandsPage";
     9: export { default as BorderLandsPage } from "./BorderLandsPage";
    10: export { default as FishPondsPage } from "./FishPondsPage";


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\PoultryPage.jsx
SIZE: 231 bytes
================================================================================
     1: // src/pages/facilities/PoultryPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function PoultryPage() {
     4:   return <FacilityCrudTable type="POULTRY" title="Tovuqxona" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\SheepfoldPage.jsx
SIZE: 238 bytes
================================================================================
     1: // src/pages/facilities/SheepfoldPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function SheepfoldPage() {
     4:   return <FacilityCrudTable type="SHEEPFOLD" title="Qo‘yxona" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\facilities\WorkshopsPage.jsx
SIZE: 251 bytes
================================================================================
     1: // src/pages/facilities/WorkshopsPage.jsx
     2: import FacilityCrudTable from "../../components/facilities/FacilityCrudTable";
     3: export default function WorkshopsPage() {
     4:   return <FacilityCrudTable type="WORKSHOP" title="Ishlab chiqarish sexlari" />;
     5: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\FacilitiesPage.jsx
SIZE: 9762 bytes
================================================================================
     1: // src/pages/FacilitiesPage.jsx
     2: import { useEffect, useMemo, useState } from "react";
     3: import {
     4:   createFacility,
     5:   deleteFacility,
     6:   listFacilities,
     7:   putFacility,
     8: } from "../api/facilities";
     9: import FacilityForm from "../components/facilities/FacilityForm";
    10: import { toast } from "react-toastify";
    11: import Modal from "../components/ui/Modal";
    12: import "../styles/_facility_modal.scss"; // styling for facility modal
    13: import { TYPE_LABELS } from "../constants/facilityTypes";
    14: 
    15: export default function FacilitiesPage() {
    16:   const [items, setItems] = useState([]);
    17:   const [q, setQ] = useState("");
    18:   const [type, setType] = useState("");
    19:   const [loading, setLoading] = useState(false);
    20: 
    21:   // Modal
    22:   const [modalOpen, setModalOpen] = useState(false);
    23:   const [editing, setEditing] = useState(null); // FacilityRes yoki null
    24:   const [mode, setMode] = useState("create"); // "create" | "edit"
    25:   const [deleteTarget, setDeleteTarget] = useState(null);
    26:   const [deleting, setDeleting] = useState(false);
    27: 
    28:   const typeOptions = useMemo(
    29:     () => [
    30:       { value: "", label: "Barchasi" },
    31:       ...Object.entries(TYPE_LABELS).map(([v, l]) => ({ value: v, label: l })),
    32:     ],
    33:     []
    34:   );
    35: 
    36:   const fetchData = async () => {
    37:     setLoading(true);
    38:     try {
    39:       const res = await listFacilities({
    40:         q: q || undefined,
    41:         type: type || undefined,
    42:       });
    43:       setItems(res);
    44:     } catch (e) {
    45:       toast.error(e.message || "Yuklashda xatolik");
    46:     } finally {
    47:       setLoading(false);
    48:     }
    49:   };
    50: 
    51:   useEffect(() => {
    52:     fetchData();
    53:     // eslint-disable-next-line react-hooks/exhaustive-deps
    54:   }, []); // first load
    55: 
    56:   const onSearch = (e) => {
    57:     e.preventDefault();
    58:     fetchData();
    59:   };
    60: 
    61:   const openCreate = () => {
    62:     setEditing(null);
    63:     setMode("create");
    64:     setModalOpen(true);
    65:   };
    66: 
    67:   const openEdit = (row) => {
    68:     setEditing(row);
    69:     setMode("edit");
    70:     setModalOpen(true);
    71:   };
    72: 
    73:   const requestDelete = (row) => setDeleteTarget(row);
    74:   const cancelDelete = () => {
    75:     if (!deleting) setDeleteTarget(null);
    76:   };
    77:   const confirmDelete = async () => {
    78:     if (!deleteTarget) return;
    79:     setDeleting(true);
    80:     try {
    81:       await deleteFacility(deleteTarget.id);
    82:       setDeleteTarget(null);
    83:       await fetchData();
    84:     } catch (e) {
    85:       toast.error(e.message || "O‘chirishda xatolik");
    86:     } finally {
    87:       setDeleting(false);
    88:     }
    89:   };
    90: 
    91:   const submitCreate = async (payload) => {
    92:     try {
    93:       // create -> PUT semantics optional, backend POST bor
    94:       await createFacility(payload);
    95:       setModalOpen(false);
    96:       await fetchData();
    97:     } catch (e) {
    98:       toast.error(e.message || "Saqlashda xatolik");
    99:     }
   100:   };
   101: 
   102:   const submitEdit = async (payload) => {
   103:     try {
   104:       // PUT to‘liq almashtirish uchun qulay; xohlasangiz patchFacility ham ishlaydi
   105:       await putFacility(editing.id, {
   106:         ...payload,
   107:         // PUT talablarida orgId, name, type, status bo‘lishi kerak (formda bor)
   108:       });
   109:       setModalOpen(false);
   110:       await fetchData();
   111:     } catch (e) {
   112:       toast.error(e.message || "Yangilashda xatolik");
   113:     }
   114:   };
   115: 
   116:   return (
   117:     <div className="org-table-page">
   118:       <div className="page-header">
   119:         <h2>Inshootlar</h2>
   120:         <div className="muted">
   121:           9 tur bo‘yicha CRUD — Issiqxona, Tovuqxona, Molxona, Kurkaxona,
   122:           Qo‘yxona, Sexlar, Yordamchi va Chegara yerlari, Baliqchilik ko‘llari.
   123:         </div>
   124:       </div>
   125: 
   126:       <div className="org-table-wrap">
   127:         <form className="toolbar" onSubmit={onSearch}>
   128:           <input
   129:             className="search"
   130:             placeholder="Qidiruv (nomi bo‘yicha)"
   131:             value={q}
   132:             onChange={(e) => setQ(e.target.value)}
   133:           />
   134:           <select
   135:             className="parent-filter"
   136:             value={type}
   137:             onChange={(e) => setType(e.target.value)}
   138:           >
   139:             {typeOptions.map((o) => (
   140:               <option key={o.value} value={o.value}>
   141:                 {o.label}
   142:               </option>
   143:             ))}
   144:           </select>
   145:           <button type="submit" className="btn">
   146:             Qidirish
   147:           </button>
   148:           <div className="spacer" />
   149:           <button type="button" className="btn primary" onClick={openCreate}>
   150:             Yangi qo‘shish
   151:           </button>
   152:         </form>
   153: 
   154:         <div className="table-card">
   155:           <table className="org-table">
   156:             <thead>
   157:               <tr>
   158:                 <th style={{ width: 60 }}>ID</th>
   159:                 <th>Nomi</th>
   160:                 <th>Turi</th>
   161:                 <th>Bo'linma</th>
   162:                 <th>Koordinata</th>
   163:                 <th style={{ width: 220 }}>Amallar</th>
   164:               </tr>
   165:             </thead>
   166:             <tbody>
   167:               {loading && (
   168:                 <tr>
   169:                   <td colSpan={6}>
   170:                     <div className="overlay">
   171:                       <div className="spinner" />
   172:                     </div>
   173:                   </td>
   174:                 </tr>
   175:               )}
   176:               {!loading && items.length === 0 && (
   177:                 <tr>
   178:                   <td colSpan={6} className="empty">
   179:                     Ma’lumot topilmadi
   180:                   </td>
   181:                 </tr>
   182:               )}
   183:               {!loading &&
   184:                 items.map((row) => (
   185:                   <tr key={row.id}>
   186:                     <td className="num">{row.id}</td>
   187:                     <td>{row.name}</td>
   188:                     <td>{TYPE_LABELS[row.type] || row.type}</td>
   189:                     <td className="num">{row.orgName || row.orgId}</td>
   190:                     <td className="muted">
   191:                       {row.lat != null && row.lng != null
   192:                         ? `${row.lat.toFixed(4)}, ${row.lng.toFixed(4)}`
   193:                         : "—"}
   194:                     </td>
   195:                     <td className="actions">
   196:                       <button className="btn" onClick={() => openEdit(row)}>
   197:                         Tahrirlash
   198:                       </button>
   199:                       <button
   200:                         className="btn danger"
   201:                         onClick={() => requestDelete(row)}
   202:                       >
   203:                         O‘chirish
   204:                       </button>
   205:                     </td>
   206:                   </tr>
   207:                 ))}
   208:             </tbody>
   209:           </table>
   210:         </div>
   211: 
   212:         <div className="paginator">
   213:           <span className="muted">Topildi: {items.length}</span>
   214:         </div>
   215:       </div>
   216: 
   217:       {/* Modal */}
   218:       <Modal
   219:         open={modalOpen}
   220:         onClose={() => setModalOpen(false)}
   221:         title={mode === "create" ? "Yangi inshoot" : "Inshootni tahrirlash"}
   222:         size="lg"
   223:         className="facility-create-modal"
   224:       >
   225:         <div className="facility-form">
   226:           <FacilityForm
   227:             initial={editing}
   228:             onCancel={() => setModalOpen(false)}
   229:             onSubmit={mode === "create" ? submitCreate : submitEdit}
   230:           />
   231:         </div>
   232:       </Modal>
   233: 
   234:       <Modal
   235:         open={!!deleteTarget}
   236:         onClose={cancelDelete}
   237:         title="O‘chirishni tasdiqlang"
   238:         size="sm"
   239:         className="facility-delete-modal"
   240:         preventCloseOnBackdrop={deleting}
   241:         disableEscapeClose={deleting}
   242:       >
   243:         {deleteTarget && (
   244:           <div className="confirm-body">
   245:             <div style={{ display: "flex", gap: 16 }}>
   246:               <div className="danger-icon">⚠️</div>
   247:               <div style={{ display: "grid", gap: 8 }}>
   248:                 <h3 className="headline">{deleteTarget.name}</h3>
   249:                 <p className="desc">
   250:                   Ushbu inshootni o‘chirmoqchisiz. Bu amal{" "}
   251:                   <b>bekor qilinmaydi</b>.
   252:                 </p>
   253:               </div>
   254:             </div>
   255:             <div className="meta-box">
   256:               <div className="row">
   257:                 <span className="k">ID:</span>
   258:                 <span>{deleteTarget.id}</span>
   259:               </div>
   260:               <div className="row">
   261:                 <span className="k">Tur:</span>
   262:                 <span>
   263:                   {TYPE_LABELS[deleteTarget.type] || deleteTarget.type}
   264:                 </span>
   265:               </div>
   266:               <div className="row">
   267:                 <span className="k">Org:</span>
   268:                 <span>{deleteTarget.orgId}</span>
   269:               </div>
   270:               {deleteTarget.lat != null && deleteTarget.lng != null && (
   271:                 <div className="row">
   272:                   <span className="k">Loc:</span>
   273:                   <span>
   274:                     {deleteTarget.lat.toFixed(4)}, {deleteTarget.lng.toFixed(4)}
   275:                   </span>
   276:                 </div>
   277:               )}
   278:             </div>
   279:             <div className="warn-box">
   280:               <span>⚠️</span>
   281:               <span>
   282:                 Agar obyekt xaritada qatlamlarga bog‘langan bo‘lsa, vizual
   283:                 komponentlar ham yo‘qoladi.
   284:               </span>
   285:             </div>
   286:             <div className="modal-actions">
   287:               <button
   288:                 className="btn"
   289:                 disabled={deleting}
   290:                 onClick={cancelDelete}
   291:               >
   292:                 Bekor
   293:               </button>
   294:               <button
   295:                 className="btn danger"
   296:                 disabled={deleting}
   297:                 onClick={confirmDelete}
   298:               >
   299:                 {deleting ? "O‘chirilmoqda…" : "Ha, o‘chirish"}
   300:               </button>
   301:             </div>
   302:           </div>
   303:         )}
   304:       </Modal>
   305:     </div>
   306:   );
   307: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\LoginPage.jsx
SIZE: 13645 bytes
================================================================================
     1: import { useEffect, useState, useCallback } from "react";
     2: import {
     3:   useLocation,
     4:   useNavigate,
     5:   Navigate,
     6:   useSearchParams,
     7: } from "react-router-dom";
     8: import { isAuthenticated, login, logout, decodeJWT } from "../api/auth";
     9: import { verifyCaptcha } from "../api/captcha";
    10: import CaptchaBox from "../components/common/CaptchaBox.jsx";
    11: import { toast } from "react-toastify";
    12: import styles from "./LoginPage.module.scss";
    13: 
    14: // ⚠️ Logoni shu yo‘lga qo‘ying: src/assets/zamin-logo.png
    15: import appLogo from "../assets/zamin-logo.png";
    16: 
    17: export default function LoginPage() {
    18:   const navigate = useNavigate();
    19:   const location = useLocation();
    20:   const [searchParams] = useSearchParams();
    21: 
    22:   const authed = isAuthenticated();
    23:   const from = location.state?.from?.pathname || "/dashboard";
    24: 
    25:   // /login?logout=1 -> darhol chiqish
    26:   useEffect(() => {
    27:     if (searchParams.get("logout") === "1") {
    28:       (async () => {
    29:         try {
    30:           await logout();
    31:           toast.info("Sessiya yakunlandi");
    32:         } finally {
    33:           navigate("/login", { replace: true });
    34:         }
    35:       })();
    36:     }
    37:     const reason = searchParams.get("reason");
    38:     if (reason === "expired")
    39:       toast.info("Sessiya muddati tugagan edi. Qayta kiring.");
    40:     else if (reason === "revoked") toast.warn("Sessiya bekor qilingan.");
    41:     else if (reason === "replay")
    42:       toast.error("Xavfsizlik: qayta ishlatilgan sessiya.");
    43:   }, [searchParams, navigate]);
    44: 
    45:   // Agar foydalanuvchi login sahifasini ko‘rmoqchi bo‘lsa:
    46:   // /login?switch=1 bo‘lsa — majburan formani ko‘rsatamiz (authed bo‘lsa ham)
    47:   const forceSwitch = searchParams.get("switch") === "1";
    48: 
    49:   // UI: login form holati
    50:   const [username, setUsername] = useState("");
    51:   const [password, setPassword] = useState("");
    52:   const [showPwd, setShowPwd] = useState(false);
    53:   const [busy, setBusy] = useState(false);
    54:   const [error, setError] = useState("");
    55:   // CAPTCHA state
    56:   const [captchaId, setCaptchaId] = useState("");
    57:   const [captchaAnswer, setCaptchaAnswer] = useState("");
    58:   // near-expiry flag removed (unused)
    59:   // const [captchaNearExpiry, setCaptchaNearExpiry] = useState(false);
    60: 
    61:   const onCaptchaChange = useCallback(({ id, answer }) => {
    62:     setCaptchaId(id || "");
    63:     setCaptchaAnswer(answer || "");
    64:   }, []);
    65: 
    66:   const onCaptchaExpired = useCallback(() => {
    67:     /* no-op for now */
    68:   }, []);
    69: 
    70:   const onSubmit = async (e) => {
    71:     e.preventDefault();
    72:     setBusy(true);
    73:     setError("");
    74:     try {
    75:       // 1) Verify CAPTCHA first (today's flow)
    76:       if (!captchaId || !captchaAnswer) {
    77:         setBusy(false);
    78:         setError("Iltimos, CAPTCHA javobini kiriting");
    79:         return;
    80:       }
    81: 
    82:       const verifyOnce = async () =>
    83:         verifyCaptcha({ id: captchaId, answer: captchaAnswer }).then(
    84:           (v) => !!v?.ok,
    85:           (err) => {
    86:             if (err?.response?.status === 429) return null; // signal retry
    87:             throw err;
    88:           }
    89:         );
    90:       let verified = await verifyOnce();
    91:       if (verified === null) {
    92:         await new Promise((r) => setTimeout(r, 1200));
    93:         verified = await verifyOnce();
    94:       }
    95:       verified = !!verified;
    96: 
    97:       if (!verified) {
    98:         setError("CAPTCHA noto‘g‘ri yoki muddati tugagan");
    99:         toast.error("CAPTCHA xato. Qaytadan urinib ko‘ring.");
   100:         // CaptchaBox will refresh on demand via its button; we keep answer cleared via onChange on refresh
   101:         return;
   102:       }
   103: 
   104:       // 2) Proceed with existing login call
   105:       const ok = await login(username.trim(), password, {
   106:         captchaId,
   107:         captchaAnswer,
   108:       });
   109:       if (ok) {
   110:         toast.success("Muvaffaqiyatli kirildi");
   111:         navigate(from, { replace: true });
   112:       } else {
   113:         setError("Kirish amalga oshmadi");
   114:         toast.error("Kirish amalga oshmadi");
   115:       }
   116:     } catch (err) {
   117:       const msg =
   118:         err?.response?.data?.message || err?.message || "Kirish amalga oshmadi";
   119:       setError(msg);
   120:       toast.error(msg);
   121:     } finally {
   122:       setBusy(false);
   123:     }
   124:   };
   125: 
   126:   // 1) Agar login bo‘lmagan bo‘lsa — oddiy login formani ko‘rsatamiz
   127:   if (!authed) {
   128:     return (
   129:       <div className={styles.auth}>
   130:         <div className={styles.decor1} />
   131:         <div className={styles.decor2} />
   132: 
   133:         <div className={styles.split}>
   134:           {/* Chap — Hero */}
   135:           <div className={styles.left}>
   136:             <div className={styles.hero}>
   137:               <div className={styles.logoWrap}>
   138:                 <img
   139:                   className={styles.logo}
   140:                   src={appLogo}
   141:                   alt="Agro Map logo"
   142:                 />
   143:               </div>
   144: 
   145:               <h1 className={styles.heroTitle}>
   146:                 Avtomatlashtirilgan axborot tizimi
   147:               </h1>
   148:               <p className={styles.tagline}>
   149:                 Qishloq xo‘jaligi va yordamchi xo‘jalik resurslarini{" "}
   150:                 <span>interaktiv xarita</span> orqali kuzatish, boshqarish va
   151:                 tahlil qilish.
   152:               </p>
   153:             </div>
   154:           </div>
   155: 
   156:           {/* O‘ng — Forma */}
   157:           <div className={styles.right}>
   158:             <div className={styles.card}>
   159:               <div className={styles.brandSmall}>
   160:                 <span className={styles.brandTextSmall}>Tizimga kirish</span>
   161:               </div>
   162: 
   163:               {error && <div className={styles.error}>{error}</div>}
   164: 
   165:               <form className={styles.form} onSubmit={onSubmit}>
   166:                 <div className={styles.field}>
   167:                   <label>Login</label>
   168:                   <input
   169:                     autoFocus
   170:                     placeholder="admin"
   171:                     value={username}
   172:                     onChange={(e) => setUsername(e.target.value)}
   173:                     autoComplete="username"
   174:                     inputMode="email"
   175:                     spellCheck={false}
   176:                     autoCapitalize="none"
   177:                   />
   178:                 </div>
   179: 
   180:                 <div className={`${styles.field} ${styles.pwd}`}>
   181:                   <label>Parol</label>
   182:                   <input
   183:                     placeholder="••••••••"
   184:                     type={showPwd ? "text" : "password"}
   185:                     value={password}
   186:                     onChange={(e) => setPassword(e.target.value)}
   187:                     autoComplete="current-password"
   188:                   />
   189:                   <button
   190:                     type="button"
   191:                     className={styles.toggle}
   192:                     onClick={() => setShowPwd((s) => !s)}
   193:                     aria-label={showPwd ? "Yopish" : "Ko‘rsatish"}
   194:                     title={showPwd ? "Yopish" : "Ko‘rsatish"}
   195:                   >
   196:                     {showPwd ? "🙈" : "👁️"}
   197:                   </button>
   198:                 </div>
   199: 
   200:                 {/* CAPTCHA */}
   201:                 <CaptchaBox
   202:                   onChange={onCaptchaChange}
   203:                   onExpired={onCaptchaExpired}
   204:                 />
   205: 
   206:                 <button
   207:                   type="submit"
   208:                   className={`${styles.btn} ${styles.primary} ${styles.full}`}
   209:                   disabled={busy}
   210:                 >
   211:                   {busy ? "Kutilmoqda..." : "Kirish"}
   212:                 </button>
   213:               </form>
   214: 
   215:               <div className={styles.foot}>
   216:                 <p className={styles.muted}>
   217:                   © {new Date().getFullYear()} Zamin
   218:                 </p>
   219:               </div>
   220:             </div>
   221:           </div>
   222:         </div>
   223:       </div>
   224:     );
   225:   }
   226: 
   227:   // 2) Agar login bo‘lgan bo‘lsa va switch=1 bo‘lsa — majburan formani ko‘rsatamiz (akkaunt almashtirish)
   228:   if (authed && forceSwitch) {
   229:     return (
   230:       <div className={styles.auth}>
   231:         <div className={styles.decor1} />
   232:         <div className={styles.decor2} />
   233: 
   234:         <div className={styles.split}>
   235:           {/* Chap — Hero */}
   236:           <div className={styles.left}>
   237:             <div className={styles.hero}>
   238:               <div className={styles.logoWrap}>
   239:                 <img
   240:                   className={styles.logo}
   241:                   src={appLogo}
   242:                   alt="Agro Map logo"
   243:                 />
   244:               </div>
   245: 
   246:               <h1 className={styles.heroTitle}>Akkaunt almashtirish</h1>
   247:               <p className={styles.tagline}>
   248:                 Hozirgi sessiyani o‘chirmasdan boshqa foydalanuvchi sifatida
   249:                 kirishingiz mumkin.
   250:               </p>
   251:             </div>
   252:           </div>
   253: 
   254:           {/* O‘ng — Forma */}
   255:           <div className={styles.right}>
   256:             <div className={styles.card}>
   257:               <div className={styles.brandSmall}>
   258:                 <span className={styles.brandTextSmall}>Yangi login</span>
   259:               </div>
   260: 
   261:               {error && <div className={styles.error}>{error}</div>}
   262: 
   263:               <form className={styles.form} onSubmit={onSubmit}>
   264:                 <div className={styles.field}>
   265:                   <label>Login</label>
   266:                   <input
   267:                     autoFocus
   268:                     placeholder="username"
   269:                     value={username}
   270:                     onChange={(e) => setUsername(e.target.value)}
   271:                     autoComplete="username"
   272:                     spellCheck={false}
   273:                     autoCapitalize="none"
   274:                   />
   275:                 </div>
   276: 
   277:                 <div className={`${styles.field} ${styles.pwd}`}>
   278:                   <label>Parol</label>
   279:                   <input
   280:                     placeholder="••••••••"
   281:                     type={showPwd ? "text" : "password"}
   282:                     value={password}
   283:                     onChange={(e) => setPassword(e.target.value)}
   284:                     autoComplete="current-password"
   285:                   />
   286:                   <button
   287:                     type="button"
   288:                     className={styles.toggle}
   289:                     onClick={() => setShowPwd((s) => !s)}
   290:                   >
   291:                     {showPwd ? "🙈" : "👁️"}
   292:                   </button>
   293:                 </div>
   294: 
   295:                 {/* CAPTCHA */}
   296:                 <CaptchaBox
   297:                   onChange={onCaptchaChange}
   298:                   onExpired={onCaptchaExpired}
   299:                 />
   300: 
   301:                 <div style={{ display: "flex", gap: 8 }}>
   302:                   <button
   303:                     type="button"
   304:                     className={`${styles.btn}`}
   305:                     onClick={() => navigate(from, { replace: true })}
   306:                   >
   307:                     Bekor qilish
   308:                   </button>
   309:                   <button
   310:                     type="submit"
   311:                     className={`${styles.btn} ${styles.primary}`}
   312:                     disabled={busy}
   313:                   >
   314:                     {busy ? "Kutilmoqda..." : "Kirish"}
   315:                   </button>
   316:                 </div>
   317:               </form>
   318:             </div>
   319:           </div>
   320:         </div>
   321:       </div>
   322:     );
   323:   }
   324: 
   325:   // 3) Agar login bo‘lgan bo‘lsa va switch=1 YO‘Q — "allaqachon tizimdasiz" ekrani (logout / continue / switch)
   326:   const payload = decodeJWT();
   327:   const who =
   328:     payload?.username || payload?.sub || payload?.name || "foydalanuvchi";
   329: 
   330:   return (
   331:     <div className={styles.auth}>
   332:       <div className={styles.decor1} />
   333:       <div className={styles.decor2} />
   334: 
   335:       <div className={styles.split}>
   336:         {/* Chap — Hero */}
   337:         <div className={styles.left}>
   338:           <div className={styles.hero}>
   339:             <div className={styles.logoWrap}>
   340:               <img className={styles.logo} src={appLogo} alt="Agro Map logo" />
   341:             </div>
   342: 
   343:             <h1 className={styles.heroTitle}>Siz tizimdasiz</h1>
   344:             <p className={styles.tagline}>
   345:               Hozir <b>{who}</b> sifatida tizimdasiz. Davom etishingiz yoki
   346:               boshqa akkaunt bilan kirishingiz mumkin.
   347:             </p>
   348:           </div>
   349:         </div>
   350: 
   351:         {/* O‘ng — Tanlovlar */}
   352:         <div className={styles.right}>
   353:           <div className={styles.card}>
   354:             <div className={styles.brandSmall}>
   355:               <span className={styles.brandTextSmall}>Hisob boshqaruvi</span>
   356:             </div>
   357: 
   358:             <div style={{ display: "grid", gap: 10 }}>
   359:               <button
   360:                 className={`${styles.btn} ${styles.primary}`}
   361:                 onClick={() => navigate(from, { replace: true })}
   362:               >
   363:                 Davom etish (Dashboard)
   364:               </button>
   365: 
   366:               <button
   367:                 className={styles.btn}
   368:                 onClick={() => navigate("/login?switch=1", { replace: true })}
   369:               >
   370:                 Boshqa akkaunt bilan kirish
   371:               </button>
   372: 
   373:               <button
   374:                 className={`${styles.btn} ${styles.danger || ""}`}
   375:                 onClick={async () => {
   376:                   try {
   377:                     await logout();
   378:                     toast.info("Chiqildi");
   379:                   } finally {
   380:                     navigate("/login", { replace: true });
   381:                   }
   382:                 }}
   383:               >
   384:                 Chiqish
   385:               </button>
   386:             </div>
   387: 
   388:             <div className={styles.foot}>
   389:               <p className={styles.muted}>© {new Date().getFullYear()} Zamin</p>
   390:             </div>
   391:           </div>
   392:         </div>
   393:       </div>
   394:     </div>
   395:   );
   396: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\LoginPage.module.scss
SIZE: 7577 bytes
================================================================================
     1: /* LoginPage.module.scss
     2:    Dark/Light theming with scoped tokens
     3:    ------------------------------------ */
     4: 
     5: /* 1) Theme tokens (LIGHT defaults) — scoped to .auth only */
     6: .auth {
     7:   --am-bg: #f6f9fc;
     8:   --am-card: #ffffff;
     9:   --am-text: #0f172a;
    10:   --am-muted: #64748b;
    11:   --am-border: #e5e7eb;
    12:   --am-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    13:   --am-ring: 0 0 0 4px rgba(34, 197, 94, 0.18);
    14: 
    15:   --brand-1: #22c55e;
    16:   --brand-2: #16a34a;
    17: 
    18:   --danger-1: #ef4444;
    19:   --danger-2: #dc2626;
    20: 
    21:   min-height: 100vh;
    22:   display: grid;
    23:   place-items: center;
    24:   position: relative;
    25:   overflow: hidden;
    26: 
    27:   /* soft brandy background */
    28:   background: radial-gradient(
    29:       1200px 600px at 80% -10%,
    30:       rgba(34, 197, 94, 0.12),
    31:       transparent 60%
    32:     ),
    33:     radial-gradient(
    34:       800px 400px at -10% 110%,
    35:       rgba(22, 163, 74, 0.12),
    36:       transparent 60%
    37:     ),
    38:     var(--am-bg);
    39: }
    40: 
    41: /* 2) Auto dark (OS preference) */
    42: @media (prefers-color-scheme: dark) {
    43:   .auth {
    44:     --am-bg: #0b1220;
    45:     --am-card: #0f172a;
    46:     --am-text: #e6eef9;
    47:     --am-muted: #9aa5b1;
    48:     --am-border: #1f2937;
    49:     --am-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);
    50:     --am-ring: 0 0 0 4px rgba(34, 197, 94, 0.25);
    51:   }
    52: }
    53: 
    54: /* 3) App toggle dark (takes precedence) */
    55: :where(.dark, [data-theme="dark"], .theme-dark) .auth {
    56:   --am-bg: #0b1220;
    57:   --am-card: #0f172a;
    58:   --am-text: #e6eef9;
    59:   --am-muted: #9aa5b1;
    60:   --am-border: #1f2937;
    61:   --am-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);
    62:   --am-ring: 0 0 0 4px rgba(34, 197, 94, 0.25);
    63: }
    64: 
    65: /* 4) Decorative blurs (non-interactive) */
    66: .decor1,
    67: .decor2 {
    68:   position: absolute;
    69:   filter: blur(60px);
    70:   opacity: 0.35;
    71:   pointer-events: none;
    72: }
    73: .decor1 {
    74:   width: 380px;
    75:   height: 380px;
    76:   background: radial-gradient(closest-side, var(--brand-1), transparent);
    77:   top: -80px;
    78:   right: -60px;
    79:   border-radius: 50%;
    80: }
    81: .decor2 {
    82:   width: 460px;
    83:   height: 460px;
    84:   background: radial-gradient(closest-side, var(--brand-2), transparent);
    85:   bottom: -120px;
    86:   left: -90px;
    87:   border-radius: 50%;
    88: }
    89: 
    90: /* 5) Split layout */
    91: .split {
    92:   width: min(1280px, 94vw);
    93:   margin: 0 auto;
    94:   min-height: 100vh;
    95:   display: grid;
    96:   grid-template-columns: 1fr 1fr;
    97:   gap: clamp(56px, 9vw, 180px);
    98:   position: relative;
    99: }
   100: .split::after {
   101:   content: "";
   102:   position: absolute;
   103:   left: 50%;
   104:   top: 10vh;
   105:   bottom: 10vh;
   106:   width: 1px;
   107:   background: var(--am-border);
   108:   opacity: 0.7;
   109:   pointer-events: none;
   110: }
   111: .left,
   112: .right {
   113:   display: flex;
   114:   align-items: center;
   115:   justify-content: center;
   116:   padding: 36px 28px;
   117: }
   118: @media (max-width: 900px) {
   119:   .split {
   120:     grid-template-columns: 1fr;
   121:     gap: 24px;
   122:     padding: 24px 0;
   123:   }
   124:   .split::after {
   125:     display: none;
   126:   }
   127: }
   128: 
   129: /* 6) Hero (left) */
   130: .hero {
   131:   text-align: center;
   132:   max-width: 560px;
   133:   color: var(--am-text);
   134: }
   135: .logoWrap {
   136:   display: grid;
   137:   place-items: center;
   138:   margin-bottom: 18px;
   139: }
   140: .logo {
   141:   width: clamp(200px, 40vw, 500px);
   142:   height: auto;
   143:   filter: drop-shadow(
   144:     0 0 24px color-mix(in srgb, var(--brand-1) 35%, transparent)
   145:   );
   146: }
   147: .heroTitle {
   148:   margin: 0 0 10px 0;
   149:   font-size: clamp(30px, 4vw, 36px);
   150:   font-weight: 800;
   151:   letter-spacing: 0.2px;
   152:   background: linear-gradient(135deg, var(--brand-1), var(--brand-2));
   153:   -webkit-background-clip: text;
   154:   background-clip: text;
   155:   color: transparent;
   156: }
   157: .tagline {
   158:   margin: 0 auto 16px auto;
   159:   max-width: 560px;
   160:   font-size: clamp(16px, 1.6vw, 18px);
   161:   line-height: 1.6;
   162:   color: var(--am-muted);
   163: }
   164: .tagline span {
   165:   font-weight: 700;
   166:   color: var(--am-text);
   167:   background: linear-gradient(
   168:     135deg,
   169:     color-mix(in srgb, var(--brand-1) 13%, transparent),
   170:     transparent
   171:   );
   172:   padding: 0 4px;
   173:   border-radius: 6px;
   174: }
   175: 
   176: .pills {
   177:   display: flex;
   178:   gap: 8px;
   179:   flex-wrap: wrap;
   180:   justify-content: center;
   181: }
   182: .pill {
   183:   font-size: 12.5px;
   184:   padding: 6px 10px;
   185:   border-radius: 999px;
   186:   color: var(--brand-2);
   187:   background: color-mix(in srgb, var(--brand-1) 18%, transparent);
   188:   border: 1px solid color-mix(in srgb, var(--brand-1) 38%, transparent);
   189: }
   190: 
   191: /* 7) Card (right) */
   192: .card {
   193:   width: min(92vw, 420px);
   194:   background: var(--am-card);
   195:   color: var(--am-text);
   196:   border: 1px solid var(--am-border);
   197:   border-radius: 20px;
   198:   box-shadow: var(--am-shadow);
   199:   padding: 28px;
   200:   position: relative;
   201: }
   202: .brandSmall {
   203:   margin-bottom: 12px;
   204: }
   205: .brandTextSmall {
   206:   font-weight: 700;
   207:   letter-spacing: 0.2px;
   208:   font-size: 18px;
   209:   color: var(--am-text);
   210: }
   211: .muted {
   212:   color: var(--am-muted);
   213:   margin: 0;
   214: }
   215: 
   216: /* 8) Form */
   217: .form {
   218:   display: grid;
   219:   gap: 14px;
   220:   margin-top: 8px;
   221: }
   222: .field {
   223:   display: grid;
   224:   gap: 6px;
   225: }
   226: .field label {
   227:   font-size: 13px;
   228:   color: var(--am-muted);
   229: }
   230: .field input {
   231:   width: 100%;
   232:   padding: 12px 14px;
   233:   border-radius: 12px;
   234:   border: 1px solid var(--am-border);
   235:   outline: none;
   236:   background: transparent;
   237:   color: var(--am-text);
   238:   transition: box-shadow 0.15s, border-color 0.15s, background 0.15s;
   239: }
   240: .field input:focus {
   241:   border-color: color-mix(in srgb, var(--brand-1) 40%, var(--am-border));
   242:   box-shadow: var(--am-ring);
   243: }
   244: .field input[aria-invalid="true"] {
   245:   border-color: color-mix(in srgb, var(--danger-1) 70%, var(--am-border));
   246:   box-shadow: 0 0 0 4px color-mix(in srgb, var(--danger-1) 22%, transparent);
   247: }
   248: 
   249: /* password visibility toggle */
   250: .pwd {
   251:   position: relative;
   252: }
   253: .pwd input {
   254:   padding-right: 40px;
   255: }
   256: .toggle {
   257:   position: absolute;
   258:   right: 8px;
   259:   top: 50%;
   260:   // transform: translateY(-50%);
   261:   background: none;
   262:   border: none;
   263:   cursor: pointer;
   264:   font-size: 16px;
   265:   opacity: 0.8;
   266:   color: var(--am-muted);
   267: }
   268: 
   269: /* 9) Buttons (unified, theme-aware) */
   270: .btn {
   271:   border: 1px solid var(--am-border);
   272:   background: color-mix(in srgb, var(--am-card) 96%, var(--am-text) 4%);
   273:   color: var(--am-text);
   274:   padding: 12px 14px;
   275:   border-radius: 12px;
   276:   cursor: pointer;
   277:   transition: transform 0.03s ease-in-out, box-shadow 0.15s, background 0.15s;
   278: }
   279: .btn:hover {
   280:   background: color-mix(in srgb, var(--am-card) 90%, var(--am-text) 10%);
   281: }
   282: .btn:focus {
   283:   outline: none;
   284:   box-shadow: var(--am-ring);
   285: }
   286: .btn:active {
   287:   transform: translateY(1px);
   288: }
   289: .btn:disabled {
   290:   opacity: 0.7;
   291:   cursor: not-allowed;
   292: }
   293: 
   294: .primary {
   295:   background: linear-gradient(135deg, var(--brand-1), var(--brand-2));
   296:   border-color: transparent;
   297:   color: #fff;
   298:   font-weight: 600;
   299:   box-shadow: 0 6px 20px color-mix(in srgb, var(--brand-1) 25%, transparent);
   300: }
   301: .primary:hover {
   302:   filter: brightness(1.02);
   303: }
   304: 
   305: .danger {
   306:   background: linear-gradient(135deg, var(--danger-1), var(--danger-2));
   307:   border-color: transparent;
   308:   color: #fff;
   309:   font-weight: 600;
   310:   box-shadow: 0 6px 18px color-mix(in srgb, var(--danger-1) 22%, transparent);
   311: }
   312: 
   313: .ghost {
   314:   background: transparent;
   315:   color: var(--am-text);
   316:   border: 1px solid var(--am-border);
   317: }
   318: 
   319: .full {
   320:   width: 100%;
   321: }
   322: 
   323: /* 10) Error alert (theme aware via tokens) */
   324: .error {
   325:   background: color-mix(in srgb, var(--danger-1) 8%, transparent);
   326:   color: color-mix(in srgb, var(--danger-2) 85%, var(--am-text));
   327:   border: 1px solid color-mix(in srgb, var(--danger-1) 35%, var(--am-border));
   328:   padding: 10px 12px;
   329:   border-radius: 12px;
   330:   font-size: 14px;
   331:   margin-bottom: 10px;
   332: }
   333: 
   334: /* 11) Footer */
   335: .foot {
   336:   margin-top: 16px;
   337:   text-align: center;
   338: }
   339: 
   340: /* 12) Small polish for reduced motion users */
   341: @media (prefers-reduced-motion: reduce) {
   342:   .btn,
   343:   .field input {
   344:     transition: none;
   345:   }
   346: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\MapPage.jsx
SIZE: 1210 bytes
================================================================================
     1: //src/pages/MapPages.jsx
     2: import { useEffect, useState } from "react";
     3: import { debugError } from "../utils/debug";
     4: import MapView from "../components/map/MapView";
     5: import { getOrgTree } from "../api/org";
     6: 
     7: export default function MapPage({ dark }) {
     8:   const [orgTree, setOrgTree] = useState([]);
     9:   const [error, setError] = useState("");
    10: 
    11:   useEffect(() => {
    12:     (async () => {
    13:       try {
    14:         const data = await getOrgTree();
    15:         setOrgTree(Array.isArray(data) ? data : []);
    16:       } catch (e) {
    17:         debugError("MapPage getOrgTree failed", e);
    18:         setError(e.message || "Tashkilot daraxtini yuklashda xato");
    19:       }
    20:     })();
    21:   }, []);
    22: 
    23:   return (
    24:     <div style={{ height: "100vh" }}>
    25:       {error && (
    26:         <div
    27:           style={{
    28:             position: "absolute",
    29:             top: 12,
    30:             left: 12,
    31:             zIndex: 9999,
    32:             background: "#fff0f0",
    33:             border: "1px solid #ffd6d6",
    34:             color: "#b91c1c",
    35:             padding: "8px 10px",
    36:             borderRadius: 8,
    37:           }}
    38:         >
    39:           API xato: {error}
    40:         </div>
    41:       )}
    42:       <MapView orgTree={orgTree} dark={dark} />
    43:     </div>
    44:   );
    45: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\OrgManager.jsx
SIZE: 480 bytes
================================================================================
     1: // src/pages/OrgManager.jsx
     2: import OrgTreeEditor from "../components/org/OrgTreeEditor";
     3: import "../styles/_org_tree.scss";
     4: 
     5: export default function OrgManager() {
     6:   return (
     7:     <div className="page org-manager">
     8:       <div className="page-header">
     9:         <h2>Tashkilot tuzilmasi</h2>
    10:         <div className="muted">
    11:           Bo‘limlarni yaratish, tahrirlash, ko‘chirish va o‘chirish
    12:         </div>
    13:       </div>
    14:       <OrgTreeEditor />
    15:     </div>
    16:   );
    17: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\pages\OrgTablePage.jsx
SIZE: 635 bytes
================================================================================
     1: // src/pages/OrgTablePage.jsx
     2: import { useLocation } from "react-router-dom";
     3: import OrgTable from "../components/org/OrgTable";
     4: import { useAuth } from "../hooks/useAuth";
     5: import "../styles/_org_table.scss";
     6: 
     7: export default function OrgTablePage() {
     8:   const { isAdmin } = useAuth();
     9:   const loc = useLocation();
    10:   const params = new URLSearchParams(loc.search);
    11:   const focusId = params.get("focus");
    12:   return (
    13:     <div className="page org-table-page">
    14:       <div className="page-header">
    15:         <h2>Bo'linmalar (Jadval)</h2>
    16:       </div>
    17:       <OrgTable isAdmin={isAdmin} focusId={focusId} />
    18:     </div>
    19:   );
    20: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\routes\AdminRoute.jsx
SIZE: 333 bytes
================================================================================
     1: import { Navigate } from "react-router-dom";
     2: import { useAuth } from "../hooks/useAuth";
     3: 
     4: export default function AdminRoute({ children }) {
     5:   const { isAdmin, isAuthed } = useAuth();
     6:   if (!isAuthed) return <Navigate to="/login" replace />;
     7:   if (!isAdmin) return <Navigate to="/dashboard" replace />;
     8:   return children;
     9: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\routes\ProtectedRoute.jsx
SIZE: 1097 bytes
================================================================================
     1: import { Outlet, Navigate, useLocation } from "react-router-dom";
     2: import { useEffect, useState } from "react";
     3: import { isAuthenticated, refreshAccessToken } from "../api/auth";
     4: 
     5: export default function ProtectedRoute() {
     6:   const location = useLocation();
     7:   const [status, setStatus] = useState(() =>
     8:     isAuthenticated() ? "ok" : "pending"
     9:   );
    10: 
    11:   useEffect(() => {
    12:     let alive = true;
    13:     async function trySilent() {
    14:       if (isAuthenticated()) {
    15:         setStatus("ok");
    16:         return;
    17:       }
    18:       // Bir marta refresh cookie asosida access olishga urinib ko'ramiz
    19:       try {
    20:         await refreshAccessToken();
    21:         if (!alive) return;
    22:         setStatus(isAuthenticated() ? "ok" : "fail");
    23:       } catch {
    24:         if (!alive) return;
    25:         setStatus("fail");
    26:       }
    27:     }
    28:     trySilent();
    29:     return () => {
    30:       alive = false;
    31:     };
    32:   }, []);
    33: 
    34:   if (status === "ok") return <Outlet />;
    35:   if (status === "pending") return null; // yoki skeleton/loader qo'yish mumkin
    36:   return <Navigate to="/login" replace state={{ from: location }} />;
    37: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles.css
SIZE: 1093 bytes
================================================================================
     1: /* src/styles.css */
     2: /* Layout */
     3: .layout {
     4:   display: grid;
     5:   grid-template-columns: 260px 1fr;
     6:   height: 100vh;
     7:   overflow: hidden;
     8: }
     9: 
    10: .sidebar {
    11:   height: 100vh;
    12:   overflow: hidden;
    13:   border-right: 1px solid #eaeaea;
    14:   background: #fff;
    15:   display: flex;
    16:   flex-direction: column;
    17: }
    18: 
    19: .sidebar-header {
    20:   padding: 16px;
    21:   border-bottom: 1px solid #eee;
    22: }
    23: .sidebar-footer {
    24:   margin-top: auto;
    25:   padding: 12px 16px;
    26:   border-top: 1px solid #eee;
    27:   font-size: 12px;
    28:   color: #666;
    29: }
    30: 
    31: .content {
    32:   background: #f7f8fa;
    33:   height: 100vh;
    34:   overflow: auto;
    35: }
    36: 
    37: .page {
    38:   padding: 16px;
    39: }
    40: 
    41: /* Map panel */
    42: .map-wrapper .panel {
    43:   display: grid;
    44:   grid-template-columns: 1fr 1fr;
    45:   gap: 12px;
    46:   background: #f6f7f9;
    47:   border-top: 1px solid #e6e6e6;
    48:   padding: 12px;
    49: }
    50: 
    51: .map-wrapper .panel textarea {
    52:   width: 100%;
    53:   height: 200px;
    54:   font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    55:     "Liberation Mono", monospace;
    56:   font-size: 12px;
    57: }
    58: 
    59: .map-wrapper .panel-actions {
    60:   margin-top: 8px;
    61:   display: flex;
    62:   gap: 8px;
    63: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_auth.scss
SIZE: 3237 bytes
================================================================================
     1: // src/styles/_auth.scss
     2: @use "./themes"; /* tokensni yuklaydi (side-effect) */
     3: @use "./variables" as *; /* $bg, $text, ... ni globalga chiqaradi */
     4: 
     5: .auth-screen {
     6:   min-height: 100vh;
     7:   display: grid;
     8:   place-items: center;
     9:   background: radial-gradient(
    10:       1200px 600px at 80% -10%,
    11:       rgba(34, 197, 94, 0.12),
    12:       transparent 60%
    13:     ),
    14:     radial-gradient(
    15:       800px 400px at -10% 110%,
    16:       rgba(22, 163, 74, 0.12),
    17:       transparent 60%
    18:     ),
    19:     $bg;
    20:   position: relative;
    21:   overflow: hidden;
    22: }
    23: 
    24: .decor {
    25:   position: absolute;
    26:   filter: blur(60px);
    27:   opacity: 0.35;
    28:   pointer-events: none;
    29: }
    30: .decor-1 {
    31:   width: 380px;
    32:   height: 380px;
    33:   background: radial-gradient(closest-side, #22c55e, transparent);
    34:   top: -80px;
    35:   right: -60px;
    36:   border-radius: 50%;
    37: }
    38: .decor-2 {
    39:   width: 460px;
    40:   height: 460px;
    41:   background: radial-gradient(closest-side, #16a34a, transparent);
    42:   bottom: -120px;
    43:   left: -90px;
    44:   border-radius: 50%;
    45: }
    46: 
    47: .auth-card {
    48:   width: min(92vw, 420px);
    49:   background: $card;
    50:   color: $text;
    51:   border: 1px solid $border;
    52:   border-radius: 20px;
    53:   box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    54:   padding: 28px;
    55:   position: relative;
    56: }
    57: 
    58: .brand {
    59:   display: flex;
    60:   align-items: center;
    61:   gap: 12px;
    62:   margin-bottom: 18px;
    63:   h1 {
    64:     font-size: 20px;
    65:     margin: 0;
    66:     letter-spacing: 0.3px;
    67:   }
    68:   .muted {
    69:     color: $muted;
    70:     margin: 0;
    71:   }
    72: }
    73: .brand-text {
    74:   line-height: 1.2;
    75: }
    76: 
    77: .form {
    78:   display: grid;
    79:   gap: 14px;
    80:   margin-top: 8px;
    81: }
    82: .field {
    83:   display: grid;
    84:   gap: 6px;
    85:   label {
    86:     font-size: 13px;
    87:     color: $muted;
    88:   }
    89:   input {
    90:     width: 100%;
    91:     padding: 12px 14px;
    92:     border-radius: 12px;
    93:     border: 1px solid $border;
    94:     outline: none;
    95:     background: transparent;
    96:     color: $text;
    97:     &:focus {
    98:       border-color: #93c5aa;
    99:       box-shadow: 0 0 0 4px rgba(34, 197, 94, 0.12);
   100:     }
   101:   }
   102:   .pwd {
   103:     position: relative;
   104:     .toggle {
   105:       position: absolute;
   106:       right: 8px;
   107:       top: 50%;
   108:       transform: translateY(-50%);
   109:       background: none;
   110:       border: none;
   111:       cursor: pointer;
   112:       font-size: 16px;
   113:       opacity: 0.8;
   114:     }
   115:   }
   116: }
   117: 
   118: .btn {
   119:   border: 1px solid $border;
   120:   background: #fff;
   121:   color: $text;
   122:   padding: 12px 14px;
   123:   border-radius: 12px;
   124:   cursor: pointer;
   125:   transition: transform 0.03s ease-in-out, box-shadow 0.15s;
   126:   &:active {
   127:     transform: translateY(1px);
   128:   }
   129:   &.primary {
   130:     background: linear-gradient(135deg, $brand, $brand2);
   131:     border-color: transparent;
   132:     color: #fff;
   133:     font-weight: 600;
   134:     box-shadow: 0 6px 20px rgba(34, 197, 94, 0.25);
   135:   }
   136:   &.full {
   137:     width: 100%;
   138:   }
   139:   &:disabled {
   140:     opacity: 0.7;
   141:     cursor: not-allowed;
   142:   }
   143: }
   144: 
   145: .error {
   146:   background: $danger-bg;
   147:   color: $danger-text;
   148:   border: 1px solid $danger-border;
   149:   padding: 10px 12px;
   150:   border-radius: 12px;
   151:   font-size: 14px;
   152: }
   153: 
   154: .foot-note {
   155:   margin-top: 16px;
   156:   text-align: center;
   157:   .muted {
   158:     color: $muted;
   159:   }
   160: }
   161: 
   162: /* Autofill fix */
   163: input:-webkit-autofill {
   164:   -webkit-box-shadow: 0 0 0 30px $card inset !important;
   165:   -webkit-text-fill-color: $text !important;
   166:   caret-color: $text;
   167: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_facility_modal.scss
SIZE: 6308 bytes
================================================================================
     1: /* =============================================
     2:    Facility Create/Edit Modal (shared styling)
     3:    - Uses portal Modal tokens (Modal.module.scss)
     4:    - Consistent with org-table modal aesthetic
     5:    - Light/Dark aware via CSS variables
     6: ==============================================*/
     7: 
     8: .facility-create-modal {
     9:   /* Allow wider card on large screens */
    10:   --card-w: 760px;
    11: }
    12: 
    13: /* Root form */
    14: .facility-create-modal .facility-form {
    15:   display: grid;
    16:   gap: 20px;
    17: }
    18: 
    19: .facility-create-modal .facility-form .form-grid {
    20:   display: grid;
    21:   gap: 20px;
    22: }
    23: 
    24: /* Generic field container */
    25: .facility-create-modal .facility-form .field {
    26:   position: relative;
    27:   display: grid;
    28:   gap: 6px;
    29:   background: color-mix(in srgb, var(--card-bg) 94%, var(--card-fg) 6%);
    30:   border: 1px solid var(--border);
    31:   padding: 10px 12px 14px;
    32:   border-radius: 14px;
    33:   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
    34:   transition: background 0.18s, border-color 0.18s, box-shadow 0.18s;
    35: }
    36: 
    37: .facility-create-modal .facility-form .field:focus-within {
    38:   border-color: var(--brand);
    39:   box-shadow: 0 0 0 3px var(--ring, 0 0 0 4px rgba(34, 197, 94, 0.25));
    40: }
    41: 
    42: .facility-create-modal .facility-form .field label {
    43:   font-size: 11px;
    44:   font-weight: 600;
    45:   letter-spacing: 0.5px;
    46:   text-transform: uppercase;
    47:   opacity: 0.8;
    48:   color: var(--card-fg);
    49: }
    50: 
    51: .facility-create-modal .facility-form .field .hint {
    52:   font-size: 11px;
    53:   line-height: 1.3;
    54:   opacity: 0.75;
    55: }
    56: 
    57: /* ================= Delete Confirmation Variant ================= */
    58: .facility-delete-modal {
    59:   --card-w: 480px;
    60: }
    61: .facility-delete-modal .danger-icon {
    62:   width: 54px;
    63:   height: 54px;
    64:   border-radius: 14px;
    65:   background: linear-gradient(135deg, #ef4444, #dc2626);
    66:   display: grid;
    67:   place-items: center;
    68:   color: #fff;
    69:   font-size: 30px;
    70:   box-shadow: 0 6px 18px rgba(239, 68, 68, 0.35);
    71:   border: 1px solid #dc2626;
    72: }
    73: .facility-delete-modal .confirm-body {
    74:   display: grid;
    75:   gap: 18px;
    76:   padding: 6px 4px 4px;
    77: }
    78: .facility-delete-modal .confirm-body .headline {
    79:   font-size: 18px;
    80:   font-weight: 700;
    81:   margin: 0;
    82: }
    83: .facility-delete-modal .confirm-body .desc {
    84:   font-size: 14px;
    85:   line-height: 1.5;
    86:   opacity: 0.85;
    87: }
    88: .facility-delete-modal .meta-box {
    89:   background: color-mix(in srgb, var(--card-bg) 94%, var(--card-fg) 6%);
    90:   border: 1px solid var(--border);
    91:   border-radius: 12px;
    92:   padding: 10px 12px;
    93:   display: grid;
    94:   gap: 6px;
    95:   font-size: 13px;
    96: }
    97: .facility-delete-modal .meta-box .row {
    98:   display: flex;
    99:   gap: 6px;
   100: }
   101: .facility-delete-modal .meta-box .k {
   102:   opacity: 0.65;
   103:   min-width: 70px;
   104: }
   105: .facility-delete-modal .warn-box {
   106:   margin-top: 4px;
   107:   display: flex;
   108:   gap: 8px;
   109:   align-items: flex-start;
   110:   font-size: 12px;
   111:   line-height: 1.4;
   112:   padding: 10px 12px;
   113:   border: 1px solid #fca5a5;
   114:   background: #fff5f5;
   115:   color: #b91c1c;
   116:   border-radius: 10px;
   117: }
   118: [data-theme="dark"] .facility-delete-modal .warn-box {
   119:   background: #2a1212;
   120:   border-color: #7f1d1d;
   121:   color: #fca5a5;
   122: }
   123: .facility-delete-modal .modal-actions {
   124:   display: flex;
   125:   flex-wrap: wrap;
   126:   gap: 12px;
   127:   justify-content: flex-end;
   128:   margin-top: 6px;
   129:   padding-top: 14px;
   130:   border-top: 1px solid var(--border);
   131: }
   132: .facility-delete-modal .modal-actions .btn {
   133:   min-width: 110px;
   134:   border-radius: 12px;
   135:   height: 40px;
   136:   font-weight: 500;
   137: }
   138: .facility-delete-modal .modal-actions .btn.danger {
   139:   background: linear-gradient(135deg, #ef4444, #dc2626);
   140:   color: #fff;
   141:   border: none;
   142:   box-shadow: 0 6px 18px rgba(239, 68, 68, 0.25);
   143: }
   144: .facility-delete-modal .modal-actions .btn.danger:disabled {
   145:   opacity: 0.6;
   146: }
   147: /* 3-column responsive sections */
   148: .facility-create-modal .facility-form .grid3 {
   149:   display: grid;
   150:   grid-template-columns: repeat(3, minmax(0, 1fr));
   151:   gap: 14px;
   152: }
   153: @media (max-width: 860px) {
   154:   .facility-create-modal .facility-form .grid3 {
   155:     grid-template-columns: 1fr;
   156:   }
   157: }
   158: 
   159: /* Nested attribute fields (schema-driven) */
   160: .facility-create-modal .facility-form .field .grid3 .field {
   161:   padding: 8px 10px 12px;
   162: }
   163: 
   164: /* Inputs & selects inside modal override (inherit from Modal tokens) */
   165: .facility-create-modal .facility-form input,
   166: .facility-create-modal .facility-form select {
   167:   background: color-mix(in srgb, var(--card-bg) 96%, var(--card-fg) 4%);
   168:   border: 1px solid color-mix(in srgb, var(--border) 85%, transparent);
   169:   border-radius: 10px;
   170:   padding: 10px 12px;
   171:   color: var(--card-fg);
   172:   font: inherit;
   173:   outline: none;
   174:   transition: background 0.15s, border-color 0.15s, box-shadow 0.15s;
   175:   min-height: 40px;
   176: }
   177: .facility-create-modal .facility-form input:focus,
   178: .facility-create-modal .facility-form select:focus {
   179:   border-color: var(--brand);
   180:   box-shadow: var(--ring);
   181:   background: color-mix(in srgb, var(--card-bg) 88%, var(--card-fg) 12%);
   182: }
   183: 
   184: /* Actions row */
   185: .facility-create-modal .facility-form .modal-actions {
   186:   display: flex;
   187:   flex-wrap: wrap;
   188:   gap: 14px;
   189:   justify-content: flex-end;
   190:   padding-top: 8px;
   191:   border-top: 1px solid var(--border);
   192: }
   193: .facility-create-modal .facility-form .modal-actions .btn {
   194:   min-width: 110px;
   195:   font-weight: 500;
   196:   letter-spacing: 0.3px;
   197:   border-radius: 12px;
   198:   height: 40px;
   199: }
   200: .facility-create-modal .facility-form .modal-actions .btn.primary {
   201:   font-weight: 600;
   202:   box-shadow: 0 6px 16px rgba(34, 197, 94, 0.25);
   203: }
   204: 
   205: /* Dark fine-tune (relies on data-theme=dark on portal root) */
   206: [data-theme="dark"] .facility-create-modal .facility-form .field {
   207:   background: color-mix(in srgb, var(--card-bg) 85%, #ffffff 5%);
   208:   border-color: var(--border);
   209: }
   210: [data-theme="dark"] .facility-create-modal .facility-form input,
   211: [data-theme="dark"] .facility-create-modal .facility-form select {
   212:   background: color-mix(in srgb, var(--card-bg) 92%, #ffffff 8%);
   213: }
   214: [data-theme="dark"] .facility-create-modal .facility-form input:focus,
   215: [data-theme="dark"] .facility-create-modal .facility-form select:focus {
   216:   background: color-mix(in srgb, var(--card-bg) 84%, #ffffff 16%);
   217: }
   218: 
   219: /* Scroll improvement */
   220: .facility-create-modal [data-dialog-body] {
   221:   scrollbar-gutter: stable;
   222: }
   223: 
   224: /* Required indicator helper (add .req span inside label if needed) */
   225: .facility-create-modal .facility-form .field label .req {
   226:   color: #ef4444;
   227: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_layout.scss
SIZE: 1541 bytes
================================================================================
     1: // src/styles/_layout.scss
     2: @use "./variables" as *;
     3: @use "./mixins" as *;
     4: @use "./org_table";
     5: 
     6: .app-layout {
     7:   display: grid;
     8:   grid-template-columns: var(--sidebar-w, #{$sidebar-w}) 1fr;
     9:   height: 100vh;
    10:   overflow: hidden;
    11: 
    12:   @media (max-width: $bp-lg) {
    13:     grid-template-columns: 1fr; // mobile — sidebar overlay bo'ladi
    14:   }
    15: }
    16: 
    17: .app-main {
    18:   height: 100vh;
    19:   overflow: auto;
    20:   background: $bg-body;
    21: 
    22:   .app-header {
    23:     position: sticky;
    24:     top: 0;
    25:     z-index: $z-header;
    26:     height: 60px;
    27:     display: flex;
    28:     align-items: center;
    29:     gap: 12px;
    30:     padding: 0 16px;
    31:     background: $surface;
    32:     border-bottom: 1px solid $border;
    33: 
    34:     .hamburger {
    35:       @include button-reset;
    36:       width: 38px;
    37:       height: 38px;
    38:       display: grid;
    39:       place-items: center;
    40:       font-size: 18px;
    41:     }
    42:     .brand {
    43:       font-weight: 700;
    44:       letter-spacing: 0.2px;
    45:     }
    46:     .spacer {
    47:       margin-left: auto;
    48:       color: $muted;
    49:       font-size: 13px;
    50:     }
    51:   }
    52: 
    53:   .app-content {
    54:     padding: 16px;
    55:   }
    56: }
    57: 
    58: /* Mobile overlay */
    59: .mobile-overlay {
    60:   position: fixed;
    61:   inset: 0;
    62:   z-index: $z-overlay;
    63:   pointer-events: none;
    64: 
    65:   &__backdrop {
    66:     position: absolute;
    67:     inset: 0;
    68:     background: rgba(16, 24, 40, 0.35);
    69:     opacity: 0;
    70:     transition: 0.2s;
    71:   }
    72:   &__panel {
    73:     position: absolute;
    74:     height: 100vh;
    75:     left: 0;
    76:     top: 0;
    77:   }
    78: 
    79:   &.is-open {
    80:     pointer-events: auto;
    81:     .mobile-overlay__backdrop {
    82:       opacity: 1;
    83:     }
    84:   }
    85: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_map.scss
SIZE: 3138 bytes
================================================================================
     1: /* src/styles/map.scss */
     2: 
     3: /* Katta konteyner: 2 qator — [map-canvas] / [panel] */
     4: .map-wrapper {
     5:   /* Header balandligini React’dan kiritamiz: style={{ '--header-h': '60px' }} */
     6:   --header-h: 60px;
     7: 
     8:   display: grid;
     9:   grid-template-rows: 1fr auto;
    10:   height: calc(100vh - var(--header-h));
    11:   background: var(--bg);
    12:   color: var(--text);
    13:   gap: 0; /* qat’iy bo‘lsin */
    14: 
    15:   /* Map qatori */
    16:   .map-canvas {
    17:     position: relative;
    18:     min-height: 320px; /* kichik ekranlar uchun kafolat */
    19:     /* Leaflet konteyneri to‘liq to‘lsin */
    20:     .leaflet-container {
    21:       position: absolute;
    22:       inset: 0;
    23:       height: 100%;
    24:       width: 100%;
    25:       background: var(--bg) !important;
    26:       border-bottom: 1px solid var(--border);
    27:     }
    28:   }
    29: 
    30:   /* Pastki panel (GeoJSON/controls) */
    31:   .panel {
    32:     flex: 0 0 auto;
    33:     position: relative;
    34:     z-index: 1; /* xaritaning ustida, lekin ustma-ust emas */
    35:     display: grid;
    36:     grid-template-columns: 1fr 1fr;
    37:     gap: 12px;
    38:     background: var(--card);
    39:     border-top: 1px solid var(--border);
    40:     padding: 12px;
    41: 
    42:     @media (max-width: 900px) {
    43:       grid-template-columns: 1fr;
    44:     }
    45: 
    46:     .panel-col {
    47:       background: var(--card);
    48:       border: 1px solid var(--border);
    49:       border-radius: 12px;
    50:       padding: 10px;
    51:       color: var(--text);
    52:       box-shadow: var(--shadow-sm);
    53:       min-height: 120px;
    54:     }
    55: 
    56:     textarea {
    57:       width: 100%;
    58:       height: 220px;
    59:       background: var(--card);
    60:       color: var(--text);
    61:       border: 1px solid var(--border);
    62:       border-radius: 10px;
    63:       outline: none;
    64:       padding: 10px 12px;
    65:       font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    66:         "Liberation Mono", monospace;
    67:       font-size: 12px;
    68:       transition: box-shadow 0.15s, border-color 0.15s, background 0.15s;
    69:     }
    70:     textarea:focus {
    71:       border-color: transparent;
    72:       box-shadow: 0 0 0 4px color-mix(in srgb, var(--brand) 28%, transparent);
    73:       background: color-mix(in srgb, var(--brand) 6%, var(--card));
    74:     }
    75: 
    76:     .panel-actions {
    77:       margin-top: 8px;
    78:       display: flex;
    79:       gap: 8px;
    80:       flex-wrap: wrap;
    81: 
    82:       button {
    83:         background: var(--card);
    84:         color: var(--text);
    85:         border: 1px solid var(--border);
    86:         border-radius: 10px;
    87:         padding: 8px 10px;
    88:         cursor: pointer;
    89:         transition: background 0.15s, transform 0.03s;
    90:       }
    91:       button:hover {
    92:         background: color-mix(in srgb, var(--brand) 8%, var(--card));
    93:       }
    94:       button:active {
    95:         transform: translateY(1px);
    96:       }
    97:     }
    98:   }
    99: }
   100: 
   101: /* Leaflet boshqaruvlari */
   102: .leaflet-control-zoom a,
   103: .leaflet-control-layers-toggle {
   104:   background: var(--card) !important;
   105:   color: var(--text) !important;
   106:   border: 1px solid var(--border) !important;
   107: }
   108: .leaflet-bar a:hover {
   109:   background: color-mix(in srgb, var(--brand) 8%, var(--card)) !important;
   110: }
   111: 
   112: /* Popuplar */
   113: .leaflet-popup-content-wrapper,
   114: .leaflet-popup-tip {
   115:   background: var(--card);
   116:   color: var(--text);
   117:   border: 1px solid var(--border);
   118: }
   119: 


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_mixins.scss
SIZE: 636 bytes
================================================================================
     1: // src/styles/_mixins.scss
     2: @use "./variables" as *;
     3: 
     4: @mixin focus-ring {
     5:   outline: none;
     6:   box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
     7: }
     8: 
     9: @mixin button-reset {
    10:   appearance: none;
    11:   border: 1px solid #e9ecf1;
    12:   background: #ffffff;
    13:   border-radius: 10px;
    14:   padding: 8px 12px;
    15:   cursor: pointer;
    16:   transition: 0.15s ease;
    17:   &:hover {
    18:     background: #fafafa;
    19:   }
    20:   &:active {
    21:     transform: translateY(1px);
    22:   }
    23:   &:focus-visible {
    24:     @include focus-ring;
    25:   }
    26: }
    27: 
    28: @mixin card {
    29:   background: $surface;
    30:   border: 1px solid $border;
    31:   border-radius: 14px;
    32:   box-shadow: $shadow-sm;
    33:   padding: 16px;
    34: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_org_popup.scss
SIZE: 5184 bytes
================================================================================
     1: /* src/styles/_org_popup.scss */
     2: /* org popup silliq ko‘rinishi uchun */
     3: .leaflet-popup.org-popup,
     4: .org-popup .leaflet-popup-content-wrapper {
     5:   border-radius: 12px;
     6:   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
     7: }
     8: .orgp__title {
     9:   font-weight: 700;
    10:   margin-bottom: 6px;
    11: }
    12: /* Yangi layout */
    13: .orgp__head {
    14:   margin-bottom: 6px;
    15: }
    16: .orgp__titleLine {
    17:   display: flex;
    18:   align-items: center;
    19:   gap: 8px;
    20:   margin-bottom: 4px;
    21: }
    22: .orgp__name {
    23:   font-size: 15px;
    24:   line-height: 1.2;
    25: }
    26: .orgp__quick {
    27:   display: grid;
    28:   grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));
    29:   gap: 6px;
    30:   margin: 6px 0 8px;
    31: }
    32: .orgp__quick .q-item {
    33:   background: rgba(255, 255, 255, 0.05);
    34:   padding: 6px 8px;
    35:   border-radius: 8px;
    36:   font-size: 11px;
    37:   line-height: 1.3;
    38:   display: flex;
    39:   flex-direction: column;
    40:   gap: 2px;
    41: }
    42: .orgp__quick .q-item .lbl {
    43:   opacity: 0.65;
    44:   font-weight: 500;
    45:   font-size: 10px;
    46:   text-transform: uppercase;
    47:   letter-spacing: 0.5px;
    48: }
    49: .orgp__quick .q-item b {
    50:   font-weight: 600;
    51:   font-size: 12px;
    52: }
    53: 
    54: /* Eski olib tashlangan seksiyalar (metrics/more) endi kerak emas */
    55: .orgp__metrics,
    56: .orgp__more,
    57: .orgp__row {
    58:   display: none !important;
    59: }
    60: .orgp__meta {
    61:   font-size: 12px;
    62:   opacity: 0.8;
    63:   margin-bottom: 8px;
    64: }
    65: .orgp__grid {
    66:   display: grid;
    67:   grid-template-columns: 1fr 1fr;
    68:   gap: 6px 12px;
    69:   font-size: 13px;
    70: }
    71: .orgp__actions {
    72:   margin-top: 10px;
    73:   display: flex;
    74:   gap: 8px;
    75: }
    76: /* Popup action buttonlari (light + dark) */
    77: .orgp__actions .btn {
    78:   background: rgba(0, 0, 0, 0.04);
    79:   color: #0f172a;
    80:   border: 1px solid rgba(0, 0, 0, 0.12);
    81:   padding: 8px 12px;
    82:   border-radius: 10px;
    83:   font-size: 12px;
    84:   font-weight: 500;
    85:   cursor: pointer;
    86:   transition: background 0.15s, color 0.15s, border-color 0.15s;
    87: }
    88: .orgp__actions .btn:hover {
    89:   background: rgba(0, 0, 0, 0.08);
    90: }
    91: .orgp__actions .btn:active {
    92:   transform: translateY(1px);
    93: }
    94: .orgp__actions .btn.ghost {
    95:   background: rgba(0, 0, 0, 0.03);
    96: }
    97: .orgp__actions .btn.primary {
    98:   background: linear-gradient(135deg, #16a34a, #15803d);
    99:   color: #fff;
   100:   border: none;
   101: }
   102: .orgp__actions .btn.primary:hover {
   103:   filter: brightness(1.05);
   104: }
   105: 
   106: /* Dark theme (data-theme yoki umumiy konteyner orqali) */
   107: :where(.dark, [data-theme="dark"]) .orgp__actions .btn {
   108:   background: rgba(255, 255, 255, 0.08);
   109:   color: #e6eef9;
   110:   border: 1px solid rgba(255, 255, 255, 0.18);
   111: }
   112: :where(.dark, [data-theme="dark"]) .orgp__actions .btn:hover {
   113:   background: rgba(255, 255, 255, 0.16);
   114: }
   115: :where(.dark, [data-theme="dark"]) .orgp__actions .btn.ghost {
   116:   background: rgba(255, 255, 255, 0.05);
   117: }
   118: :where(.dark, [data-theme="dark"]) .orgp__actions .btn.primary {
   119:   background: linear-gradient(135deg, #16a34a, #0d7a32);
   120:   border: none;
   121: }
   122: 
   123: // Qo'shimcha stil (popup kengaytirilgan)
   124: .orgp__crumbs {
   125:   margin: 4px 0 6px;
   126:   font-size: 11px;
   127:   line-height: 1.3;
   128:   display: flex;
   129:   flex-wrap: wrap;
   130:   gap: 4px;
   131: }
   132: .orgp__crumbs .crumb {
   133:   background: rgba(255, 255, 255, 0.06);
   134:   padding: 2px 6px;
   135:   border-radius: 10px;
   136: }
   137: .orgp__crumbs .crumb.current {
   138:   background: var(--db-accent, #2563eb);
   139:   color: #fff;
   140:   font-weight: 600;
   141: }
   142: .orgp__crumbs .crumb-sep {
   143:   opacity: 0.4;
   144:   padding: 0 2px;
   145: }
   146: 
   147: .orgp__dist {
   148:   margin: 8px 0 4px;
   149: }
   150: .orgp__dist .dist-head {
   151:   font-size: 11px;
   152:   font-weight: 600;
   153:   text-transform: uppercase;
   154:   opacity: 0.7;
   155:   margin-bottom: 4px;
   156: }
   157: .orgp__dist .dist-list {
   158:   display: flex;
   159:   flex-wrap: wrap;
   160:   gap: 4px;
   161: }
   162: .orgp__dist .dist-item {
   163:   display: flex;
   164:   align-items: center;
   165:   gap: 4px;
   166:   background: rgba(255, 255, 255, 0.05);
   167:   padding: 3px 6px;
   168:   border-radius: 8px;
   169:   font-size: 11px;
   170: }
   171: .orgp__dist .dist-item .sw {
   172:   width: 10px;
   173:   height: 10px;
   174:   border-radius: 3px;
   175:   box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.2) inset;
   176: }
   177: .orgp__dist .dist-item em {
   178:   font-style: normal;
   179:   opacity: 0.8;
   180: }
   181: 
   182: .orgp__statuses {
   183:   display: flex;
   184:   flex-wrap: wrap;
   185:   gap: 4px;
   186:   margin: 6px 0 4px;
   187: }
   188: .orgp__statuses .status-item {
   189:   display: flex;
   190:   align-items: center;
   191:   gap: 4px;
   192:   background: rgba(255, 255, 255, 0.05);
   193:   padding: 3px 6px;
   194:   border-radius: 8px;
   195:   font-size: 11px;
   196: }
   197: .orgp__statuses .status-item.ok {
   198:   background: rgba(16, 185, 129, 0.15);
   199: }
   200: .orgp__statuses .status-item.warn {
   201:   background: rgba(234, 179, 8, 0.18);
   202: }
   203: .orgp__statuses .status-item.danger {
   204:   background: rgba(239, 68, 68, 0.18);
   205: }
   206: .orgp__statuses .status-item b {
   207:   font-weight: 600;
   208: }
   209: 
   210: .orgp__siblings {
   211:   display: flex;
   212:   flex-wrap: wrap;
   213:   align-items: center;
   214:   gap: 4px;
   215:   margin: 10px 0 6px;
   216: }
   217: .orgp__siblings .lbl {
   218:   font-size: 11px;
   219:   font-weight: 600;
   220:   opacity: 0.75;
   221:   margin-right: 2px;
   222: }
   223: .orgp__siblings .sib {
   224:   cursor: pointer;
   225:   border: 1px solid rgba(255, 255, 255, 0.15);
   226:   background: rgba(255, 255, 255, 0.05);
   227:   color: inherit;
   228:   font-size: 11px;
   229:   padding: 3px 6px;
   230:   border-radius: 8px;
   231:   transition: background 0.15s, border-color 0.15s;
   232: }
   233: .orgp__siblings .sib:hover {
   234:   background: rgba(255, 255, 255, 0.12);
   235: }
   236: .orgp__siblings .sib:active {
   237:   transform: translateY(1px);
   238: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_org_table.scss
SIZE: 22206 bytes
================================================================================
     1: /* ============================== */
     2: /*   AgriMap — Org Table (SCSS)   */
     3: /*   Scoped, dark-aware, clean    */
     4: /* ============================== */
     5: 
     6: /* 1) LIGHT THEME TOKENS (scoped to page) */
     7: .org-table-page {
     8:   --bg: #f6f9fc;
     9:   --card: #ffffff;
    10:   --text: #0f172a;
    11:   --muted: #64748b;
    12:   --border: #e5e7eb;
    13:   --ring: rgba(34, 197, 94, 0.25);
    14: 
    15:   --thead-bg: #f1f5f9;
    16:   --thead-text: #0f172a;
    17: 
    18:   --row: #ffffff;
    19:   --row-hover: #f8fafc;
    20:   --input-bg: #ffffff;
    21: 
    22:   --primary-1: #22c55e;
    23:   --primary-2: #16a34a;
    24: 
    25:   --danger-1: #ef4444;
    26:   --danger-2: #dc2626;
    27: 
    28:   --thead-hover: #f5f7fb;
    29: 
    30:   .page-header {
    31:     margin: 8px 0 12px;
    32:     h2 {
    33:       margin: 0 0 4px;
    34:       color: var(--text);
    35:     }
    36:     .muted {
    37:       color: var(--muted);
    38:     }
    39:   }
    40: }
    41: 
    42: /* 2) ASOSIY UI BLOKLAR */
    43: .org-table-page {
    44:   .toolbar {
    45:     display: flex;
    46:     align-items: center;
    47:     gap: 10px;
    48:     background: var(--card);
    49:     border: 1px solid var(--border);
    50:     border-radius: 14px;
    51:     padding: 10px;
    52:     box-shadow: 0 6px 20px rgba(0, 0, 0, 0.04);
    53: 
    54:     .spacer {
    55:       flex: 1;
    56:     }
    57: 
    58:     .search,
    59:     .parent-filter,
    60:     .size {
    61:       appearance: none;
    62:       background: var(--input-bg);
    63:       color: var(--text);
    64:       border: 1px solid var(--border);
    65:       border-radius: 10px;
    66:       padding: 8px 10px;
    67:       outline: none;
    68:     }
    69: 
    70:     .search {
    71:       min-width: 240px;
    72:     }
    73:     input::placeholder {
    74:       color: var(--muted);
    75:     }
    76: 
    77:     .btn {
    78:       border: 1px solid var(--border);
    79:       background: var(--card);
    80:       color: var(--text);
    81:       padding: 8px 12px;
    82:       border-radius: 10px;
    83:       cursor: pointer;
    84:       transition: box-shadow 0.15s, transform 0.03s;
    85: 
    86:       &:focus {
    87:         box-shadow: 0 0 0 4px var(--ring);
    88:         outline: none;
    89:       }
    90:       &:active {
    91:         transform: translateY(1px);
    92:       }
    93: 
    94:       &.primary {
    95:         background: linear-gradient(135deg, var(--primary-1), var(--primary-2));
    96:         border-color: transparent;
    97:         color: #fff;
    98:         font-weight: 600;
    99:         box-shadow: 0 6px 16px rgba(34, 197, 94, 0.22);
   100:       }
   101:       &.danger {
   102:         background: linear-gradient(135deg, var(--danger-1), var(--danger-2));
   103:         border-color: transparent;
   104:         color: #fff;
   105:         box-shadow: 0 6px 16px rgba(239, 68, 68, 0.18);
   106:       }
   107:       &:disabled {
   108:         opacity: 0.7;
   109:         cursor: not-allowed;
   110:       }
   111:     }
   112:   }
   113: 
   114:   .table-card {
   115:     background: var(--card);
   116:     border: 1px solid var(--border);
   117:     border-radius: 14px;
   118:     overflow: hidden;
   119:     margin-top: 12px;
   120:   }
   121: 
   122:   table.org-table {
   123:     width: 100%;
   124:     border-collapse: separate;
   125:     border-spacing: 0;
   126:     font-size: 14px;
   127: 
   128:     thead th {
   129:       text-align: left;
   130:       background: var(--thead-bg);
   131:       color: var(--thead-text);
   132:       border-bottom: 1px solid var(--border);
   133:       padding: 10px 12px;
   134:       user-select: none;
   135:       box-shadow: inset 0 -1px 0 var(--border);
   136:       transition: background-color 0.15s ease, color 0.15s ease;
   137:     }
   138: 
   139:     thead th.sortable:hover,
   140:     thead th.sortable:focus-within {
   141:       background: var(--thead-hover);
   142:     }
   143: 
   144:     tbody td {
   145:       padding: 10px 12px;
   146:       border-bottom: 1px solid var(--border);
   147:       color: var(--text);
   148:       background: var(--row);
   149:       vertical-align: middle;
   150:     }
   151: 
   152:     tbody tr:hover td {
   153:       background: var(--row-hover);
   154:     }
   155: 
   156:     tr.highlight-focus td {
   157:       background: rgba(37, 99, 235, 0.1);
   158:       position: relative;
   159:     }
   160:     tr.highlight-focus::after {
   161:       content: "";
   162:       position: absolute;
   163:       inset: 0;
   164:       pointer-events: none;
   165:       box-shadow: 0 0 0 2px #2563eb inset;
   166:       border-radius: 4px;
   167:       animation: highlightPulse 2s ease-in-out 1;
   168:     }
   169:     @keyframes highlightPulse {
   170:       0% {
   171:         box-shadow: 0 0 0 6px rgba(37, 99, 235, 0.35) inset;
   172:       }
   173:       60% {
   174:         box-shadow: 0 0 0 2px #2563eb inset;
   175:       }
   176:       100% {
   177:         box-shadow: 0 0 0 2px #2563eb inset;
   178:       }
   179:     }
   180: 
   181:     .num {
   182:       font-variant-numeric: tabular-nums;
   183:       text-align: center;
   184:     }
   185:     .muted {
   186:       color: var(--muted);
   187:     }
   188:     .indent {
   189:       display: inline-block;
   190:       width: 0;
   191:     }
   192: 
   193:     .actions {
   194:       display: flex;
   195:       gap: 6px;
   196:       .btn {
   197:         padding: 6px 10px;
   198:         border: 1px solid var(--border);
   199:         border-radius: 8px;
   200:         background: var(--card);
   201:         cursor: pointer;
   202:       }
   203:       .btn.add-child {
   204:         min-width: 104px; /* widen "+ Bo‘lim" for readability */
   205:         text-align: center;
   206:       }
   207:       .danger {
   208:         background: #fff0f0;
   209:         border-color: #ffd6d6;
   210:         color: #b91c1c;
   211:       }
   212:     }
   213: 
   214:     .empty {
   215:       text-align: center;
   216:       color: var(--muted);
   217:       padding: 18px 0;
   218:     }
   219: 
   220:     .sortable {
   221:       cursor: pointer;
   222:       user-select: none;
   223:     }
   224:     .sortable .sort {
   225:       margin-left: 6px;
   226:       font-size: 12px;
   227:       color: #98a2b3;
   228:     }
   229:     th.sortable:hover {
   230:       background: #f5f7fb;
   231:     }
   232:   }
   233: 
   234:   .paginator {
   235:     margin-top: 10px;
   236:     display: flex;
   237:     align-items: center;
   238:     gap: 10px;
   239:     flex-wrap: wrap;
   240:     background: var(--card);
   241:     border: 1px solid var(--border);
   242:     border-radius: 10px;
   243:     padding: 8px;
   244: 
   245:     .btn {
   246:       padding: 6px 10px;
   247:       border: 1px solid var(--border);
   248:       border-radius: 8px;
   249:       background: var(--card);
   250:       cursor: pointer;
   251:     }
   252:     .muted {
   253:       color: var(--muted);
   254:     }
   255:   }
   256: 
   257:   /* Legacy in-page "modal" container (if any) */
   258:   .modal-backdrop {
   259:     position: fixed;
   260:     inset: 0;
   261:     background: rgba(2, 6, 23, 0.45);
   262:     display: grid;
   263:     place-items: center;
   264:     z-index: 5000;
   265:   }
   266:   .modal-card {
   267:     width: 520px;
   268:     background: var(--card);
   269:     color: var(--text);
   270:     border: 1px solid var(--border);
   271:     border-radius: 14px;
   272:     box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
   273:     overflow: hidden;
   274: 
   275:     .modal-header {
   276:       display: flex;
   277:       align-items: center;
   278:       justify-content: space-between;
   279:       padding: 10px 12px;
   280:       border-bottom: 1px solid var(--border);
   281:       background: var(--thead-bg);
   282:       .modal-title {
   283:         font-weight: 600;
   284:       }
   285:       .modal-close {
   286:         border: none;
   287:         background: transparent;
   288:         cursor: pointer;
   289:         font-size: 20px;
   290:         line-height: 1;
   291:         color: var(--muted);
   292:       }
   293:     }
   294:     .modal-body {
   295:       padding: 12px;
   296:     }
   297:   }
   298: 
   299:   .form-grid {
   300:     display: grid;
   301:     gap: 16px;
   302:     .field {
   303:       display: grid;
   304:       gap: 6px;
   305:       label {
   306:         color: var(--muted);
   307:         font-size: 13px;
   308:       }
   309:       input,
   310:       select {
   311:         width: 100%;
   312:         padding: 10px 12px;
   313:         border-radius: 10px;
   314:         border: 1px solid var(--border);
   315:         outline: none;
   316:         background: var(--input-bg);
   317:         color: var(--text);
   318:         &:focus {
   319:           box-shadow: 0 0 0 4px var(--ring);
   320:           border-color: transparent;
   321:         }
   322:       }
   323:     }
   324:     .grid3 {
   325:       display: grid;
   326:       grid-template-columns: repeat(3, 1fr);
   327:       gap: 10px;
   328:     }
   329:     @media (max-width: 720px) {
   330:       .grid3 {
   331:         grid-template-columns: 1fr;
   332:       }
   333:     }
   334:   }
   335: 
   336:   /* Map picker (when rendered inside page, not portal) */
   337:   .map-picker {
   338:     display: grid;
   339:     /* Moved layout declarations above nested rules to avoid Sass mixed-decls deprecation warning */
   340:     grid-template-rows: auto 60vh auto;
   341:     gap: 10px;
   342: 
   343:     .org-table-modal {
   344:       --field-bg-light: color-mix(
   345:         in srgb,
   346:         var(--card, #ffffff) 92%,
   347:         #ffffff 8%
   348:       );
   349:       --field-bg-dark: color-mix(
   350:         in srgb,
   351:         var(--card, #0f172a) 88%,
   352:         #ffffff 12%
   353:       );
   354:       --field-bg: var(--field-bg-light);
   355:     }
   356:     :where(.dark, [data-theme="dark"], .theme-dark) .org-table-modal {
   357:       --field-bg: color-mix(in srgb, var(--card, #0f172a) 70%, #ffffff 4%);
   358:     }
   359: 
   360:     .org-table-modal .form-grid {
   361:       gap: 20px;
   362:     }
   363:     .org-table-modal .form-grid .field {
   364:       background: var(--field-bg);
   365:       padding: 10px 12px 14px;
   366:       border: 1px solid var(--border, #334155);
   367:       border-radius: 14px;
   368:       box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
   369:       transition: background 0.18s, border-color 0.18s, box-shadow 0.18s;
   370:     }
   371:     .org-table-modal .form-grid .field:focus-within {
   372:       border-color: var(--primary-1, #22c55e);
   373:       box-shadow: 0 0 0 3px var(--ring, rgba(34, 197, 94, 0.25));
   374:     }
   375:     .org-table-modal .form-grid .field label {
   376:       font-size: 11px;
   377:       font-weight: 600;
   378:       letter-spacing: 0.5px;
   379:       text-transform: uppercase;
   380:       opacity: 0.8;
   381:     }
   382:     .org-table-modal .form-grid .field input,
   383:     .org-table-modal .form-grid .field select {
   384:       margin-top: 4px;
   385:       background: transparent;
   386:     }
   387: 
   388:     .org-table-modal .form-grid .parent-field select {
   389:       background: linear-gradient(
   390:         135deg,
   391:         var(--field-bg) 60%,
   392:         color-mix(in srgb, var(--field-bg) 92%, #22c55e 8%)
   393:       );
   394:       font-weight: 500;
   395:       border: 1px solid
   396:         color-mix(in srgb, var(--border, #334155) 80%, transparent);
   397:       transition: border-color 0.18s, box-shadow 0.18s;
   398:     }
   399:     .org-table-modal .form-grid .parent-field select:focus {
   400:       border-color: var(--primary-1, #22c55e);
   401:       box-shadow: 0 0 0 2px var(--ring, rgba(34, 197, 94, 0.25));
   402:     }
   403: 
   404:     .org-table-modal .form-grid .grid3 {
   405:       gap: 14px;
   406:     }
   407:     .org-table-modal .form-grid .grid3 .field {
   408:       padding: 8px 10px 12px;
   409:     }
   410: 
   411:     .org-table-modal .modal-actions {
   412:       gap: 14px;
   413:       padding-top: 16px;
   414:     }
   415:     .org-table-modal .modal-actions .btn {
   416:       font-weight: 500;
   417:       letter-spacing: 0.3px;
   418:       min-width: 90px;
   419:     }
   420:     .org-table-modal .modal-actions .btn.primary {
   421:       font-weight: 600;
   422:       box-shadow: 0 6px 16px rgba(34, 197, 94, 0.25);
   423:     }
   424:     .org-table-modal .modal-actions .btn:disabled {
   425:       opacity: 0.55;
   426:       cursor: not-allowed;
   427:     }
   428: 
   429:     .org-table-modal .map-hint-row {
   430:       display: flex;
   431:       align-items: center;
   432:       gap: 12px;
   433:       margin-top: -4px;
   434:       background: var(--field-bg);
   435:       padding: 10px 14px;
   436:       border: 1px dashed var(--border, #334155);
   437:       border-radius: 12px;
   438:     }
   439:     .org-table-modal .map-hint-row .map-btn {
   440:       background: linear-gradient(
   441:         135deg,
   442:         var(--primary-1, #22c55e),
   443:         var(--primary-2, #16a34a)
   444:       );
   445:       color: #fff;
   446:       border: none;
   447:       padding: 8px 14px;
   448:       border-radius: 10px;
   449:       box-shadow: 0 4px 10px rgba(34, 197, 94, 0.25);
   450:     }
   451:     .org-table-modal .map-hint-row .map-btn:hover {
   452:       filter: brightness(1.05);
   453:     }
   454: 
   455:     @media (min-width: 820px) {
   456:       .org-table-modal .form-grid {
   457:         grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
   458:         align-items: start;
   459:       }
   460:       .org-table-modal .form-grid .grid3,
   461:       .org-table-modal .form-grid .modal-actions {
   462:         grid-column: 1/-1;
   463:       }
   464:     }
   465: 
   466:     .controls {
   467:       display: flex;
   468:       align-items: center;
   469:       gap: 8px;
   470:       flex-wrap: wrap;
   471:       .selected-pos {
   472:         font-size: 13px;
   473:       }
   474:       .coord-row {
   475:         display: flex;
   476:         align-items: flex-end;
   477:         flex-wrap: wrap;
   478:       }
   479:       .coord-field {
   480:         display: flex;
   481:         flex-direction: column;
   482:         gap: 8px;
   483:         font-size: 11px;
   484:         font-weight: 600;
   485:         letter-spacing: 0.5px;
   486:         text-transform: uppercase;
   487:         color: var(--muted);
   488:         input {
   489:           width: 120px;
   490:           padding: 6px 10px;
   491:           border-radius: 8px;
   492:           border: 1px solid var(--border);
   493:           background: var(--input-bg, var(--card));
   494:           color: var(--text);
   495:           outline: none;
   496:           font-size: 13px;
   497:           transition: box-shadow 0.15s, border-color 0.15s, background 0.15s;
   498:         }
   499:         input:focus {
   500:           border-color: transparent;
   501:           box-shadow: 0 0 0 3px var(--ring, rgba(34, 197, 94, 0.35));
   502:           background: color-mix(in srgb, var(--brand, #22c55e) 5%, var(--card));
   503:         }
   504:       }
   505:       .btn {
   506:         padding: 8px 12px;
   507:         border: 1px solid var(--border);
   508:         border-radius: 10px;
   509:         background: var(--card);
   510:         cursor: pointer;
   511:         font-size: 13px;
   512:         display: inline-flex;
   513:         align-items: center;
   514:         gap: 6px;
   515:         line-height: 1.1;
   516:         transition: background 0.15s, box-shadow 0.15s;
   517:       }
   518:       .btn:hover {
   519:         background: color-mix(in srgb, var(--brand, #22c55e) 8%, var(--card));
   520:       }
   521:       .locate-btn:before {
   522:         content: "📍"; /* simple icon */
   523:         font-size: 14px;
   524:       }
   525:     }
   526:     .map-holder {
   527:       border: 1px solid var(--border);
   528:       border-radius: 12px;
   529:       overflow: hidden;
   530:       background: var(--card);
   531:     }
   532:   }
   533: }
   534: 
   535: /* 3) DARK OVERRIDE for page */
   536: :where(.dark, [data-theme="dark"], .theme-dark) .org-table-page {
   537:   --bg: #0b1220;
   538:   --card: #0f172a;
   539:   --text: #e6eef9;
   540:   --muted: #9aa5b1;
   541:   --border: #253045;
   542:   --ring: rgba(34, 197, 94, 0.25);
   543: 
   544:   --thead-bg: #111c2b;
   545:   --thead-text: #e6eef9;
   546: 
   547:   --row: #0f172a;
   548:   --row-hover: #0c1726;
   549:   --input-bg: #0b1422;
   550: 
   551:   --thead-hover: color-mix(in srgb, var(--thead-bg) 86%, #ffffff 14%);
   552: }
   553: 
   554: /* 4) Jadvalga kuchliroq scope (ixtiyoriy) */
   555: .org-table-page .table-card .org-table.org-table--scoped thead tr th,
   556: .org-table-page .table-card .org-table.org-table--scoped thead tr td {
   557:   background-color: var(--thead-bg);
   558:   color: var(--thead-text);
   559:   border-bottom: 1px solid var(--border);
   560: }
   561: 
   562: /* 5) ADMIN bo'lmaganda toolbar’dagi "Root qo'shish" tugmasini yashirish */
   563: .appshell[data-admin="false"] .org-table-wrap .toolbar .primary {
   564:   display: none;
   565: }
   566: 
   567: /* 6) Modal & form polishing (scoped to page) */
   568: .org-table-page {
   569:   .org-table-modal .form-grid .field input,
   570:   .org-table-modal .form-grid .field select {
   571:     border: 1px solid var(--border);
   572:     background: var(--card);
   573:     color: var(--text);
   574:     border-radius: 12px;
   575:     padding: 10px 12px;
   576:     outline: none;
   577:   }
   578: 
   579:   .org-table-modal .form-grid .field input:focus,
   580:   .org-table-modal .form-grid .field select:focus {
   581:     box-shadow: 0 0 0 4px color-mix(in srgb, var(--primary-1) 28%, transparent);
   582:     border-color: var(--border);
   583:   }
   584: 
   585:   .org-table-modal .form-grid .grid3 {
   586:     display: grid;
   587:     grid-template-columns: repeat(3, 1fr);
   588:     gap: 10px;
   589:   }
   590:   @media (max-width: 720px) {
   591:     .org-table-modal .form-grid .grid3 {
   592:       grid-template-columns: 1fr;
   593:     }
   594:   }
   595: 
   596:   .org-table-modal .modal-actions {
   597:     margin-top: 14px;
   598:     padding-top: 10px;
   599:     display: flex;
   600:     flex-wrap: wrap;
   601:     gap: 12px;
   602:     justify-content: flex-end;
   603:     border-top: 1px solid var(--border);
   604:   }
   605:   .org-table-modal .modal-actions .btn {
   606:     height: 38px;
   607:     border-radius: 12px;
   608:     padding: 0 18px;
   609:     border: 1px solid var(--border);
   610:     background: var(--card);
   611:     color: var(--text);
   612:     cursor: pointer;
   613:     line-height: 1;
   614:   }
   615:   .org-table-modal .modal-actions .btn.primary {
   616:     /* uses Modal.module.scss --brand tokens when inside portal */
   617:     background: linear-gradient(
   618:       135deg,
   619:       var(--primary-1, #22c55e),
   620:       var(--primary-2, #16a34a)
   621:     );
   622:     border: none;
   623:     color: #fff;
   624:   }
   625:   .org-table-modal .modal-actions .btn.danger {
   626:     background: #ef4444;
   627:     border: 1px solid #ef4444;
   628:     color: #fff;
   629:   }
   630: 
   631:   .org-table-modal .confirm {
   632:     font-size: 14px;
   633:     .muted {
   634:       color: var(--muted);
   635:     }
   636:   }
   637: }
   638: 
   639: /* 7) Extra modal aesthetic enhancements (page scope) */
   640: .org-table-page .org-table-modal {
   641:   --field-bg-light: color-mix(in srgb, var(--card) 92%, #ffffff 8%);
   642:   --field-bg-dark: color-mix(in srgb, var(--card) 88%, #ffffff 12%);
   643:   --field-bg: var(--field-bg-light);
   644: }
   645: :where(.dark, [data-theme="dark"], .theme-dark)
   646:   .org-table-page
   647:   .org-table-modal {
   648:   --field-bg: color-mix(in srgb, var(--card) 70%, #ffffff 4%);
   649: }
   650: 
   651: .org-table-page .org-table-modal .form-grid {
   652:   gap: 20px;
   653: }
   654: .org-table-page .org-table-modal .form-grid .field {
   655:   background: var(--field-bg);
   656:   padding: 10px 12px 14px;
   657:   border: 1px solid var(--border);
   658:   border-radius: 14px;
   659:   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
   660:   transition: background 0.18s, border-color 0.18s, box-shadow 0.18s;
   661:   position: relative;
   662: }
   663: .org-table-page .org-table-modal .form-grid .field:focus-within {
   664:   border-color: var(--primary-1, #22c55e);
   665:   box-shadow: 0 0 0 3px var(--ring);
   666: }
   667: .org-table-page .org-table-modal .form-grid .field label {
   668:   font-size: 11px;
   669:   font-weight: 600;
   670:   letter-spacing: 0.5px;
   671:   text-transform: uppercase;
   672:   opacity: 0.8;
   673: }
   674: .org-table-page .org-table-modal .form-grid .field input,
   675: .org-table-page .org-table-modal .form-grid .field select {
   676:   margin-top: 4px;
   677:   background: transparent;
   678:   border-radius: 10px;
   679:   padding: 10px 12px;
   680:   border: 1px solid color-mix(in srgb, var(--border) 85%, transparent);
   681: }
   682: .org-table-page .org-table-modal .form-grid .field input:focus,
   683: .org-table-page .org-table-modal .form-grid .field select:focus {
   684:   border-color: var(--primary-1, #22c55e);
   685:   box-shadow: 0 0 0 2px var(--ring);
   686: }
   687: 
   688: /* Specific tweaks for edit modal inside page */
   689: .org-edit-modal .org-table-modal--edit .geo-fields .field {
   690:   background: linear-gradient(
   691:     135deg,
   692:     var(--field-bg) 70%,
   693:     color-mix(in srgb, var(--field-bg) 80%, #22c55e 6%)
   694:   );
   695: }
   696: .org-edit-modal .org-table-modal--edit .map-hint-row {
   697:   display: flex;
   698:   align-items: center;
   699:   gap: 12px;
   700:   margin-top: -4px;
   701:   background: var(--field-bg);
   702:   padding: 10px 14px;
   703:   border: 1px dashed var(--border);
   704:   border-radius: 12px;
   705: }
   706: .org-edit-modal .org-table-modal--edit .map-hint-row .map-btn {
   707:   background: linear-gradient(
   708:     135deg,
   709:     var(--primary-1, #22c55e),
   710:     var(--primary-2, #16a34a)
   711:   );
   712:   color: #fff;
   713:   border: none;
   714:   padding: 8px 14px;
   715:   border-radius: 10px;
   716:   box-shadow: 0 4px 10px rgba(34, 197, 94, 0.25);
   717: }
   718: .org-edit-modal .org-table-modal--edit .map-hint-row .map-btn:hover {
   719:   filter: brightness(1.05);
   720: }
   721: 
   722: .org-table-page .org-table-modal .form-grid .grid3 {
   723:   gap: 14px;
   724: }
   725: .org-table-page .org-table-modal .form-grid .grid3 .field {
   726:   padding: 8px 10px 12px;
   727: }
   728: 
   729: .org-table-page .org-table-modal .modal-actions {
   730:   gap: 14px !important;
   731:   padding-top: 16px !important;
   732: }
   733: .org-table-page .org-table-modal .modal-actions .btn {
   734:   font-weight: 500;
   735:   letter-spacing: 0.3px;
   736:   min-width: 90px;
   737: }
   738: .org-table-page .org-table-modal .modal-actions .btn.primary {
   739:   font-weight: 600;
   740:   box-shadow: 0 6px 16px rgba(34, 197, 94, 0.25);
   741: }
   742: .org-table-page .org-table-modal .modal-actions .btn:disabled {
   743:   opacity: 0.55;
   744:   cursor: not-allowed;
   745: }
   746: 
   747: .org-table-page .org-table-modal .muted {
   748:   font-size: 12px;
   749: }
   750: 
   751: @media (min-width: 820px) {
   752:   .org-table-page .org-table-modal .form-grid {
   753:     grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
   754:     align-items: start;
   755:   }
   756:   .org-table-page .org-table-modal .form-grid .grid3,
   757:   .org-table-page .org-table-modal .form-grid .modal-actions {
   758:     grid-column: 1 / -1;
   759:   }
   760: }
   761: 
   762: /* ===================================================== */
   763: /*  8) PORTAL-SAFE STYLES (Modal rendered outside page)  */
   764: /*      ✅ This fixes “light modal stuck in dark” issue   */
   765: /* ===================================================== */
   766: 
   767: /* Base (inherits tokens from Modal.module.scss via CSS variables) */
   768: .org-table-modal {
   769:   /* use modal tokens if present; fall back to sensible defaults */
   770:   --field-bg: color-mix(
   771:     in srgb,
   772:     var(--card-bg, #ffffff) 96%,
   773:     var(--card-fg, #0f172a) 4%
   774:   );
   775:   --field-border: var(--border, #e5e7eb);
   776:   --field-text: var(--card-fg, #0f172a);
   777:   --field-muted: color-mix(in srgb, var(--card-fg, #0f172a) 55%, transparent);
   778: 
   779:   .form-grid {
   780:     display: grid;
   781:     gap: 20px;
   782:   }
   783: 
   784:   .field {
   785:     display: grid;
   786:     gap: 6px;
   787:     background: var(--field-bg);
   788:     padding: 10px 12px 14px;
   789:     border: 1px solid var(--field-border);
   790:     border-radius: 14px;
   791:     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
   792:     transition: background 0.18s, border-color 0.18s, box-shadow 0.18s;
   793:   }
   794:   .field:focus-within {
   795:     border-color: var(--brand, #22c55e);
   796:     box-shadow: 0 0 0 3px var(--ring, rgba(34, 197, 94, 0.25));
   797:   }
   798:   .field label {
   799:     color: var(--field-muted);
   800:     font-size: 11px;
   801:     font-weight: 600;
   802:     letter-spacing: 0.5px;
   803:     text-transform: uppercase;
   804:     opacity: 0.9;
   805:   }
   806:   .field input,
   807:   .field select {
   808:     width: 100%;
   809:     margin-top: 4px;
   810:     color: var(--field-text);
   811:     background: transparent;
   812:     border: 1px solid color-mix(in srgb, var(--field-border) 85%, transparent);
   813:     border-radius: 10px;
   814:     padding: 10px 12px;
   815:     outline: none;
   816:   }
   817:   .field input::placeholder {
   818:     color: var(--field-muted);
   819:   }
   820:   .field input:focus,
   821:   .field select:focus {
   822:     border-color: var(--brand, #22c55e);
   823:     box-shadow: 0 0 0 2px var(--ring, rgba(34, 197, 94, 0.25));
   824:   }
   825: 
   826:   .grid3 {
   827:     display: grid;
   828:     grid-template-columns: repeat(3, 1fr);
   829:     gap: 14px;
   830:   }
   831:   @media (max-width: 720px) {
   832:     .grid3 {
   833:       grid-template-columns: 1fr;
   834:     }
   835:   }
   836: 
   837:   .modal-actions {
   838:     margin-top: 14px;
   839:     padding-top: 12px;
   840:     display: flex;
   841:     gap: 14px;
   842:     justify-content: flex-end;
   843:     border-top: 1px solid var(--field-border);
   844:   }
   845:   .modal-actions .btn {
   846:     min-width: 90px;
   847:     height: 38px;
   848:     border-radius: 12px;
   849:   }
   850: }
   851: 
   852: /* Dark override when modal's root (or any ancestor) has data-theme="dark" */
   853: :where([data-theme="dark"], .dark, .theme-dark) .org-table-modal {
   854:   --field-bg: color-mix(in srgb, var(--card-bg, #0f172a) 85%, #ffffff 6%);
   855:   --field-border: var(--border, #233246);
   856:   --field-text: var(--card-fg, #e6eef9);
   857:   --field-muted: color-mix(in srgb, var(--card-fg, #e6eef9) 55%, transparent);
   858: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_org_tree.scss
SIZE: 2449 bytes
================================================================================
     1: /* src/styles/_org_tree.scss */
     2: /* OrgTree panel overlay styles (top-left over the map) */
     3: 
     4: .org-tree-card {
     5:   position: absolute;
     6:   top: 12px;
     7:   left: 52px; /* leave room for Leaflet zoom control */
     8:   z-index: 1001; /* ensure above panes and toolbars */
     9:   width: min(380px, 40vw);
    10:   max-height: calc(100% - 24px);
    11:   display: flex;
    12:   flex-direction: column;
    13:   gap: 10px;
    14: 
    15:   background: var(--card);
    16:   color: var(--text);
    17:   border: 1px solid var(--border);
    18:   border-radius: var(--radius, 14px);
    19:   box-shadow: var(--shadow-md, 0 10px 24px rgba(16, 24, 40, 0.14));
    20:   padding: 12px 12px;
    21: }
    22: 
    23: /* Header */
    24: .org-tree-card__header {
    25:   display: flex;
    26:   align-items: center;
    27:   justify-content: space-between;
    28:   gap: 8px;
    29:   font-weight: 600;
    30:   font-size: 14px;
    31: }
    32: 
    33: /* Search */
    34: .org-tree-search-wrap {
    35:   display: flex;
    36:   align-items: center;
    37:   gap: 6px;
    38: }
    39: .org-tree-search {
    40:   flex: 1;
    41:   min-width: 120px;
    42:   height: 30px;
    43:   border: 1px solid var(--border);
    44:   border-radius: 8px;
    45:   background: var(--surface, #fff);
    46:   color: var(--text);
    47:   padding: 0 8px;
    48:   outline: none;
    49: }
    50: .org-tree-search:focus {
    51:   border-color: color-mix(in srgb, var(--brand) 25%, var(--border));
    52: }
    53: 
    54: /* Tree box */
    55: .org-tree-box {
    56:   background: var(--surface, #fff);
    57:   border: 1px solid var(--border);
    58:   border-radius: 10px;
    59:   padding: 8px;
    60:   max-height: 48vh;
    61:   overflow: auto;
    62: }
    63: 
    64: /* rc-tree tweaks */
    65: .org-tree-box .rc-tree {
    66:   background: transparent;
    67:   color: var(--text);
    68:   font-size: 13px;
    69: }
    70: .org-tree-box .rc-tree-treenode {
    71:   padding: 2px 0;
    72: }
    73: .org-tree-box .rc-tree-node-content-wrapper:hover {
    74:   background: color-mix(in srgb, var(--brand) 8%, var(--surface));
    75: }
    76: 
    77: /* Filter pills */
    78: .org-tree-card .filter-bar {
    79:   display: flex;
    80:   flex-wrap: wrap;
    81:   gap: 6px;
    82: }
    83: .org-tree-card .pill {
    84:   display: inline-flex;
    85:   align-items: center;
    86:   gap: 6px;
    87:   padding: 4px 8px;
    88:   border-radius: 999px;
    89:   background: color-mix(in srgb, var(--brand) 6%, var(--card));
    90:   border: 1px solid var(--border);
    91:   font-size: 12px;
    92: }
    93: 
    94: /* Hide state */
    95: .org-tree-card.is-hidden {
    96:   pointer-events: none;
    97:   opacity: 0;
    98:   transform: translateY(-8px);
    99:   transition: opacity 0.2s ease, transform 0.2s ease;
   100: }
   101: 
   102: /* Responsive */
   103: @media (max-width: 768px) {
   104:   .org-tree-card {
   105:     width: min(92vw, 520px);
   106:     left: 8px;
   107:     right: 8px;
   108:     top: 8px;
   109:   }
   110:   .org-tree-box {
   111:     max-height: 40vh;
   112:   }
   113: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_sidebar.scss
SIZE: 2881 bytes
================================================================================
     1: // src/styles/_sidebar.scss
     2: @use "./variables" as *;
     3: 
     4: .pro-sidebar {
     5:   border-right: 1px solid $border !important;
     6:   background: $surface !important;
     7:   height: 100vh;
     8: 
     9:   .sidebar-header {
    10:     padding: 16px;
    11:     border-bottom: 1px solid $border;
    12:     h2 {
    13:       margin: 0;
    14:       font-size: 18px;
    15:       color: $heading;
    16:     }
    17:     small {
    18:       color: $muted;
    19:     }
    20:   }
    21: 
    22:   .sidebar-footer {
    23:     margin-top: auto;
    24:     padding: 12px 16px;
    25:     border-top: 1px solid $border;
    26:     color: $muted;
    27:     font-size: 12px;
    28:   }
    29: }
    30: 
    31: .ps-menu-root {
    32:   padding: 8px 6px 12px;
    33: 
    34:   .ps-menuitem-root .ps-menu-button {
    35:     position: relative;
    36:     border-radius: 10px;
    37:     margin: 6px 6px;
    38:     padding: 10px 12px;
    39:     transition: 0.15s ease;
    40:     color: $text-color;
    41:     display: flex;
    42:     align-items: center;
    43:     gap: 10px;
    44: 
    45:     &:hover {
    46:       background: #f4f6fb;
    47:     }
    48: 
    49:     &.ps-active {
    50:       background: $primary-50;
    51:       color: $primary-600;
    52:       font-weight: 700;
    53: 
    54:       /* Chapdagi aktiv indikator chiziq */
    55:       &::before {
    56:         content: "";
    57:         position: absolute;
    58:         left: 0;
    59:         top: 8px;
    60:         bottom: 8px;
    61:         width: 4px;
    62:         border-radius: 0 4px 4px 0;
    63:         background: $sidebar-dark-indicator; // ham light, ham dark uchun ko‘k
    64:       }
    65:     }
    66: 
    67:     .menu-icon {
    68:       width: 20px;
    69:       height: 20px;
    70:       display: grid;
    71:       place-items: center;
    72:       opacity: 0.95;
    73: 
    74:       /* Ikonlar matn rangiga mos bo‘lsin */
    75:       svg {
    76:         color: currentColor;
    77:       }
    78:     }
    79:     .menu-text {
    80:       flex: 1;
    81:       display: inline-flex;
    82:       align-items: center;
    83:       gap: 8px;
    84:     }
    85:     .badge {
    86:       display: inline-block;
    87:       padding: 2px 8px;
    88:       border-radius: 999px;
    89:       font-size: 11px;
    90:       line-height: 1.2;
    91:       background: #eef3ff;
    92:       color: #1f4bd8;
    93:       border: 1px solid #d9e3ff;
    94:     }
    95:   }
    96: }
    97: 
    98: /* ---- DARK MODE OVERRIDES FOR SIDEBAR ONLY ---- */
    99: body.theme-dark {
   100:   .pro-sidebar {
   101:     background: $sidebar-dark-bg !important;
   102:     border-right-color: $dark-border !important;
   103: 
   104:     .sidebar-header {
   105:       border-bottom-color: $dark-border;
   106:       h2 {
   107:         color: $dark-heading;
   108:       }
   109:       small {
   110:         color: $dark-muted;
   111:       }
   112:     }
   113:     .sidebar-footer {
   114:       border-top-color: $dark-border;
   115:       color: $dark-muted;
   116:     }
   117:   }
   118: 
   119:   .ps-menu-root .ps-menuitem-root .ps-menu-button {
   120:     color: $dark-text;
   121: 
   122:     &:hover {
   123:       background: $sidebar-dark-hover;
   124:     }
   125: 
   126:     &.ps-active {
   127:       background: $sidebar-dark-active-bg;
   128:       color: $sidebar-dark-active-text;
   129: 
   130:       &::before {
   131:         background: $sidebar-dark-indicator;
   132:       }
   133:     }
   134: 
   135:     .badge {
   136:       background: $badge-dark-bg;
   137:       color: $badge-dark-text;
   138:       border: 1px solid $badge-dark-border;
   139:     }
   140:   }
   141: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_themes.scss
SIZE: 1025 bytes
================================================================================
     1: // src/styles/_themes.scss
     2: /* Light defaults */
     3: :root {
     4:   /* semantic tokens */
     5:   --bg: #f6f9fc;
     6:   --card: #ffffff;
     7:   --text: #0f172a;
     8:   --muted: #64748b;
     9:   --border: #e5e7eb;
    10: 
    11:   --brand: #22c55e;
    12:   --brand-2: #16a34a;
    13: 
    14:   /* feedback tokens */
    15:   --danger-bg: #fee2e2;
    16:   --danger-text: #991b1b;
    17:   --danger-border: #fecaca;
    18: 
    19:   /* shadows */
    20:   --shadow-sm: 0 2px 10px rgba(0, 0, 0, 0.06);
    21:   --shadow-md: 0 8px 24px rgba(0, 0, 0, 0.1);
    22:   --shadow-lg: 0 12px 36px rgba(0, 0, 0, 0.14);
    23: 
    24:   /* native widgets */
    25:   color-scheme: light dark;
    26: }
    27: 
    28: /* Dark overrides (toggle: <html data-theme="dark">) */
    29: :root[data-theme="dark"] {
    30:   --bg: #0b1220;
    31:   --card: #0f172a;
    32:   --text: #e6eef9;
    33:   --muted: #9aa5b1;
    34:   --border: #1f2937;
    35: 
    36:   --brand: #22c55e;
    37:   --brand-2: #16a34a;
    38: 
    39:   --danger-bg: #3f1d1d;
    40:   --danger-text: #fecaca;
    41:   --danger-border: #7f1d1d;
    42: 
    43:   --shadow-sm: 0 2px 10px rgba(0, 0, 0, 0.3);
    44:   --shadow-md: 0 8px 24px rgba(0, 0, 0, 0.35);
    45:   --shadow-lg: 0 12px 36px rgba(0, 0, 0, 0.4);
    46: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\_variables.scss
SIZE: 1894 bytes
================================================================================
     1: // src/styles/_variables.scss
     2: @use "sass:color";
     3: 
     4: $font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto,
     5:   "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif;
     6: 
     7: $primary: #3b82f6;
     8: $primary-600: #2563eb;
     9: $primary-50: #eff6ff;
    10: 
    11: $bg-body: #f5f7fb;
    12: $surface: #ffffff;
    13: $border: #e9ecf1;
    14: 
    15: $text-color: #1f2937;
    16: $muted: #6b7280;
    17: $heading: #111827;
    18: 
    19: $success: #16a34a;
    20: $warning: #f59e0b;
    21: $danger: #ef4444;
    22: 
    23: $radius: 14px;
    24: $radius-sm: 10px;
    25: 
    26: $shadow-sm: 0 4px 16px rgba(16, 24, 40, 0.06);
    27: $shadow-md: 0 10px 24px rgba(16, 24, 40, 0.08);
    28: 
    29: $sidebar-w: 260px;
    30: $sidebar-w-collapsed: 80px;
    31: 
    32: $z-header: 5;
    33: /* drawer eng tepada turishi uchun yuqori qiymat */
    34: $z-overlay: 2000;
    35: 
    36: $bp-lg: 1024px;
    37: 
    38: /* ===== DARK THEME TOKENS ===== */
    39: $dark-body: #0f172a;
    40: $dark-surface: #0b1224;
    41: $dark-border: #1b2440;
    42: 
    43: $dark-text: #e5e7eb;
    44: $dark-muted: #94a3b8;
    45: $dark-heading: #f8fafc;
    46: 
    47: /* Sidebar holatlari */
    48: $sidebar-dark-bg: $dark-surface;
    49: $sidebar-dark-hover: color.mix(#fff, $sidebar-dark-bg, 6%);
    50: $sidebar-dark-active-bg: rgba($primary, 0.14);
    51: $sidebar-dark-active-text: #bfdbfe;
    52: $sidebar-dark-indicator: $primary;
    53: 
    54: /* Badge */
    55: $badge-dark-bg: rgba($primary, 0.22);
    56: $badge-dark-text: #dbeafe;
    57: $badge-dark-border: transparent;
    58: 
    59: $text: #fcfcfc;
    60: 
    61: /* CSS var ni SASSda ishlatish uchun helper */
    62: @function c($name, $fallback: null) {
    63:   @if $fallback == null {
    64:     @return var(--#{$name});
    65:   }
    66:   @return var(--#{$name}, #{$fallback});
    67: }
    68: 
    69: /* Endi $variables faqat var(--...) ga ko'prik */
    70: $bg: c("bg", #f6f9fc);
    71: $card: c("card", #ffffff);
    72: $text: c("text", #0f172a);
    73: $muted: c("muted", #64748b);
    74: $border: c("border", #e5e7eb);
    75: 
    76: $brand: c("brand", #22c55e);
    77: $brand2: c("brand-2", #16a34a);
    78: 
    79: $danger-bg: c("danger-bg", #fee2e2);
    80: $danger-text: c("danger-text", #991b1b);
    81: $danger-border: c("danger-border", #fecaca);


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\index.scss
SIZE: 1650 bytes
================================================================================
     1: /* src/styles/index.scss */
     2: 
     3: /* 1) Token va mixinlar */
     4: @use "./variables" as *;
     5: @use "./mixins" as *;
     6: 
     7: /* 2) Modullar */
     8: @use "./themes"; /* :root tokenlar */
     9: @use "./layout";
    10: @use "./sidebar";
    11: @use "./map"; /* ← yangilangan (yuqoridagi) */
    12: @use "./org_table";
    13: @use "./org_tree"; /* ← YANGI */
    14: @use "./auth";
    15: 
    16: /* Global surfaces */
    17: html,
    18: body,
    19: #root {
    20:   background: var(--bg);
    21:   color: var(--text);
    22:   min-height: 100%;
    23: }
    24: .app-layout {
    25:   background: var(--bg);
    26: }
    27: .app-main {
    28:   background: var(--bg);
    29: }
    30: .app-content {
    31:   background: var(--bg);
    32: }
    33: 
    34: /* Umumiy “card” va “table” lar */
    35: .card {
    36:   background: var(--card);
    37:   color: var(--text);
    38:   border: 1px solid var(--border);
    39:   box-shadow: var(--shadow-sm);
    40: }
    41: 
    42: /* Agar umumiy .table ishlatilsa */
    43: .table {
    44:   color: var(--text);
    45:   background: var(--card);
    46: }
    47: .table thead th {
    48:   background: var(--card);
    49:   border-bottom: 1px solid var(--border);
    50: }
    51: .table tbody td {
    52:   background: var(--card);
    53:   border-bottom: 1px solid var(--border);
    54: }
    55: 
    56: /* Reset/utility – SASS $… dan emas, tokenlardan foydalanamiz */
    57: * {
    58:   box-sizing: border-box;
    59: }
    60: body {
    61:   margin: 0;
    62:   line-height: 1.5;
    63:   font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell,
    64:     Noto Sans, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji";
    65: }
    66: h1,
    67: h2,
    68: h3 {
    69:   color: var(--text);
    70:   margin: 0 0 10px;
    71: }
    72: .container {
    73:   max-width: 1280px;
    74:   margin: 0 auto;
    75:   padding: 0 16px;
    76: }
    77: 
    78: /* Leaflet default marker shadow ni butunlay o'chirish (agar oldin yaratilgan bo'lsa) */
    79: .leaflet-marker-shadow {
    80:   display: none !important;
    81: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\styles\leaflet-theme.css
SIZE: 4367 bytes
================================================================================
     1: /* leaflet-theme.css */
     2: /* LIGHT (default) */
     3: .leaflet-popup-content-wrapper {
     4:   background: #ffffff;
     5:   color: #0f172a;
     6:   border: 1px solid #e5e7eb;
     7:   border-radius: 12px;
     8:   box-shadow: 0 12px 30px rgba(16, 24, 40, 0.15);
     9: }
    10: .leaflet-popup-content {
    11:   margin: 10px 12px;
    12: }
    13: .leaflet-popup-tip {
    14:   background: #ffffff;
    15:   border: 1px solid #e5e7eb;
    16: }
    17: .leaflet-container a.leaflet-popup-close-button {
    18:   color: #334155;
    19:   opacity: 0.85;
    20: }
    21: .leaflet-container a.leaflet-popup-close-button:hover {
    22:   opacity: 1;
    23: }
    24: 
    25: /* DARK override */
    26: :where(.theme-dark, .dark, [data-theme="dark"]) .leaflet-popup-content-wrapper {
    27:   background: #0f172a;
    28:   color: #e6eef9;
    29:   border-color: #253045;
    30: }
    31: :where(.theme-dark, .dark, [data-theme="dark"]) .leaflet-popup-tip {
    32:   background: #0f172a;
    33:   border-color: #253045;
    34: }
    35: :where(.theme-dark, .dark, [data-theme="dark"])
    36:   .leaflet-container
    37:   a.leaflet-popup-close-button {
    38:   color: #e6eef9;
    39:   opacity: 0.9;
    40: }
    41: 
    42: /* Org icon (divIcon) — yirik ko'rinish, haloli, oq ring */
    43: .org-icon__dot {
    44:   width: var(--s);
    45:   height: var(--s);
    46:   border-radius: 50%;
    47:   background: var(--bg, #0ea5e9);
    48:   /* oq ring + rangli halo + soyalar */
    49:   box-shadow: 0 0 0 2px var(--stroke, #fff),
    50:     0 0 0 8px var(--halo, rgba(14, 165, 233, 0.32)),
    51:     0 4px 14px rgba(0, 0, 0, 0.35);
    52:   display: grid;
    53:   place-items: center;
    54: }
    55: .org-icon__emoji {
    56:   font-size: calc(var(--s) * 0.55);
    57:   line-height: 1;
    58:   transform: translateY(-1px);
    59:   user-select: none;
    60: }
    61: 
    62: /* ===== Org (organizational) marker — ROMB dizayn ===== */
    63: .orgk {
    64:   position: relative;
    65:   width: var(--s);
    66:   height: var(--s);
    67: }
    68: 
    69: .orgk__diamond {
    70:   position: absolute;
    71:   inset: 0;
    72:   background: var(--bg, #0ea5e9);
    73:   transform: rotate(45deg);
    74:   border-radius: 14%; /* yumshoq burchak */
    75:   /* oq kontur + rangli halo + soyalar */
    76:   box-shadow: 0 0 0 3px #ffffff,
    77:     0 0 0 10px var(--halo, rgba(14, 165, 233, 0.28)),
    78:     0 8px 18px rgba(0, 0, 0, 0.35);
    79: }
    80: 
    81: .orgk__emoji {
    82:   position: absolute;
    83:   left: 50%;
    84:   top: 50%;
    85:   transform: translate(-50%, -50%); /* romb ichida to‘g‘ri turadi */
    86:   font-size: calc(var(--s) * 0.52);
    87:   line-height: 1;
    88:   user-select: none;
    89: }
    90: 
    91: /* ============================
    92:    Map UI tokens (dark/light)
    93:    va "Geometriya tahrirlash" banneri
    94:    ============================ */
    95: .map-ui {
    96:   --panel-bg: #ffffff;
    97:   --panel-fg: #0f172a;
    98:   --panel-border: #e5e7eb;
    99:   --panel-shadow: 0 10px 30px rgba(16, 24, 40, 0.15);
   100: 
   101:   --brand: #22c55e;
   102:   --brand-2: #16a34a;
   103: }
   104: 
   105: :where(.dark, [data-theme="dark"], .theme-dark) .map-ui {
   106:   --panel-bg: #0f172a;
   107:   --panel-fg: #e6eef9;
   108:   --panel-border: #253045;
   109:   --panel-shadow: 0 10px 30px rgba(0, 0, 0, 0.45);
   110: }
   111: 
   112: /* Geometriya banneri (dark-aware) */
   113: .map-ui .geom-edit-banner {
   114:   position: absolute;
   115:   top: 12px;
   116:   right: 12px;
   117:   z-index: 550;
   118:   background: var(--panel-bg);
   119:   color: var(--panel-fg);
   120:   border: 1px solid var(--panel-border);
   121:   padding: 10px 12px;
   122:   border-radius: 12px;
   123:   box-shadow: var(--panel-shadow);
   124:   max-width: 360px;
   125: }
   126: 
   127: .map-ui .geom-edit-banner .title {
   128:   font-weight: 700;
   129:   margin-bottom: 6px;
   130: }
   131: 
   132: .map-ui .geom-edit-banner .desc {
   133:   font-size: 13px;
   134:   color: color-mix(in srgb, var(--panel-fg) 70%, transparent);
   135:   margin-bottom: 8px;
   136: }
   137: 
   138: /* Tugmalarni banner ichida tema bo‘yicha moslash */
   139: .map-ui .geom-edit-banner .actions {
   140:   display: flex;
   141:   gap: 8px;
   142:   justify-content: flex-end;
   143: }
   144: 
   145: .map-ui .geom-edit-banner .btn {
   146:   appearance: none;
   147:   border: 1px solid var(--panel-border);
   148:   background: color-mix(in srgb, var(--panel-bg) 96%, var(--panel-fg) 4%);
   149:   color: var(--panel-fg);
   150:   border-radius: 10px;
   151:   height: 36px;
   152:   padding: 0 12px;
   153:   cursor: pointer;
   154:   transition: transform 0.03s ease, box-shadow 0.15s ease, background 0.15s ease;
   155: }
   156: 
   157: .map-ui .geom-edit-banner .btn:hover {
   158:   background: color-mix(in srgb, var(--panel-bg) 90%, var(--panel-fg) 10%);
   159: }
   160: .map-ui .geom-edit-banner .btn:focus {
   161:   outline: none;
   162:   box-shadow: 0 0 0 4px rgba(34, 197, 94, 0.25);
   163: }
   164: .map-ui .geom-edit-banner .btn:active {
   165:   transform: translateY(1px);
   166: }
   167: 
   168: .map-ui .geom-edit-banner .btn.primary {
   169:   background: linear-gradient(135deg, var(--brand), var(--brand-2));
   170:   color: #fff;
   171:   border-color: transparent;
   172:   box-shadow: 0 8px 18px rgba(34, 197, 94, 0.22);
   173: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\utils\apiErrors.js
SIZE: 1673 bytes
================================================================================
     1: // Central API error -> user friendly message mapper
     2: // Usage: import { mapApiError } from '../utils/apiErrors'; const msg = mapApiError(err, 'Saqlashda xatolik');
     3: import { debugWarn } from "./../utils/debug";
     4: 
     5: export function extractStatus(err) {
     6:   return err?.response?.status || null;
     7: }
     8: 
     9: export function extractCode(err) {
    10:   return err?.response?.data?.code || err?.data?.code || null;
    11: }
    12: 
    13: const CODE_MESSAGES = {
    14:   REFRESH_REPLAY: "Sessiya kolliziyasi (replay). Qayta kiring.",
    15:   SESSION_REVOKED: "Sessiya bekor qilingan.",
    16:   REFRESH_EXPIRED: "Sessiya muddati tugadi.",
    17:   REFRESH_INVALID: "Sessiya yaroqsiz.",
    18: };
    19: 
    20: export function mapApiError(err, fallback = "Xatolik") {
    21:   if (!err) return fallback;
    22:   const st = extractStatus(err);
    23:   const code = extractCode(err);
    24:   if (code && CODE_MESSAGES[code]) return CODE_MESSAGES[code];
    25:   switch (st) {
    26:     case 400:
    27:       return "Noto'g'ri so'rov (400)";
    28:     case 401:
    29:       return "Avtorizatsiya talab etiladi (401)";
    30:     case 403:
    31:       return "Ruxsat yo'q (403)";
    32:     case 404:
    33:       return "Topilmadi (404)";
    34:     case 409:
    35:       return "Konflikt (409)";
    36:     case 413:
    37:       return "Juda katta fayl (413)";
    38:     case 415:
    39:       return "Qo'llab-quvvatlanmaydigan format (415)";
    40:     case 429:
    41:       return "Ko'p so'rov (429)";
    42:     case 500:
    43:       return "Server xatosi (500)";
    44:     default:
    45:       if (err?.code === "ERR_NETWORK") return "Tarmoq xatosi";
    46:       break;
    47:   }
    48:   debugWarn("[apiErrors] Unmapped error", st, code);
    49:   return fallback;
    50: }
    51: 
    52: export function toastApiError(toast, err, fallback) {
    53:   const msg = mapApiError(err, fallback);
    54:   if (msg) toast.error(msg);
    55: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\utils\debug.js
SIZE: 787 bytes
================================================================================
     1: // Unified lightweight debug utilities.
     2: // Enable if either: build is dev OR localStorage['debug'] === '1'.
     3: // Usage: import { debugLog, debugWarn, debugError, debugEnabled } from '../utils/debug';
     4: 
     5: export const debugEnabled = (() => {
     6:   if (typeof window === "undefined") return import.meta.env.DEV;
     7:   try {
     8:     return import.meta.env.DEV || window.localStorage.getItem("debug") === "1";
     9:   } catch {
    10:     return import.meta.env.DEV;
    11:   }
    12: })();
    13: 
    14: function emit(fn, args) {
    15:   if (!debugEnabled) return;
    16:   // eslint-disable-next-line no-console
    17:   fn(...args);
    18: }
    19: 
    20: export function debugLog(...args) {
    21:   emit(console.log, args);
    22: }
    23: export function debugWarn(...args) {
    24:   emit(console.warn, args);
    25: }
    26: export function debugError(...args) {
    27:   emit(console.error, args);
    28: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\utils\geo.js
SIZE: 3581 bytes
================================================================================
     1: // src/utils/geo.js
     2: export function centroidOfGeometry(geometry) {
     3:   if (!geometry || !geometry.type) return null;
     4:   if (geometry.type === "Point") {
     5:     const [lng, lat] = geometry.coordinates || [];
     6:     if (
     7:       Number.isFinite(lat) &&
     8:       Number.isFinite(lng) &&
     9:       lat >= -90 &&
    10:       lat <= 90 &&
    11:       lng >= -180 &&
    12:       lng <= 180
    13:     )
    14:       return { lat, lng };
    15:     return null;
    16:   }
    17:   if (geometry.type === "Polygon") {
    18:     return centroidOfPolygon(geometry.coordinates);
    19:   }
    20:   if (geometry.type === "MultiPolygon") {
    21:     let best = null,
    22:       bestArea = -Infinity;
    23:     for (const poly of geometry.coordinates || []) {
    24:       const c = centroidOfPolygon(poly);
    25:       if (c && c.area > bestArea) {
    26:         bestArea = c.area;
    27:         best = { lat: c.lat, lng: c.lng };
    28:       }
    29:     }
    30:     return best;
    31:   }
    32:   return null;
    33: }
    34: 
    35: function centroidOfPolygon(rings) {
    36:   if (!rings || !rings[0] || rings[0].length < 3) return null;
    37:   const outer = rings[0];
    38:   let area = 0,
    39:     cx = 0,
    40:     cy = 0;
    41:   for (let i = 0, j = outer.length - 1; i < outer.length; j = i++) {
    42:     const [x1, y1] = outer[j];
    43:     const [x2, y2] = outer[i];
    44:     const f = x1 * y2 - x2 * y1;
    45:     area += f;
    46:     cx += (x1 + x2) * f;
    47:     cy += (y1 + y2) * f;
    48:   }
    49:   if (area === 0) {
    50:     let minX = Infinity,
    51:       minY = Infinity,
    52:       maxX = -Infinity,
    53:       maxY = -Infinity;
    54:     for (const [x, y] of outer) {
    55:       if (x < minX) minX = x;
    56:       if (y < minY) minY = y;
    57:       if (x > maxX) maxX = x;
    58:       if (y > maxY) maxY = y;
    59:     }
    60:     return { lat: (minY + maxY) / 2, lng: (minX + maxX) / 2, area: 0 };
    61:   }
    62:   area *= 0.5;
    63:   cx /= 6 * area;
    64:   cy /= 6 * area;
    65:   return { lat: cy, lng: cx, area: Math.abs(area) };
    66: }
    67: 
    68: /* ==================== YANGI: Maydon (m²) hisoblash ==================== */
    69: /**
    70:  * GeoJSON Geometry uchun maydon (m²) ni hisoblaydi.
    71:  * - Polygon: tashqi halqa − ichki halqalar (agar bo‘lsa)
    72:  * - MultiPolygon: barcha poligonlar yig‘indisi
    73:  * - Point: 0
    74:  * Eslatma: hisob Web Mercator (EPSG:3857) ga proyeksiya qilib, shoelace bilan.
    75:  */
    76: export function areaOfGeometryM2(geometry) {
    77:   if (!geometry || !geometry.type) return null;
    78: 
    79:   if (geometry.type === "Point") return 0;
    80: 
    81:   if (geometry.type === "Polygon") {
    82:     return Math.max(0, polygonAreaM2(geometry.coordinates));
    83:   }
    84: 
    85:   if (geometry.type === "MultiPolygon") {
    86:     let sum = 0;
    87:     for (const poly of geometry.coordinates || []) {
    88:       sum += Math.max(0, polygonAreaM2(poly));
    89:     }
    90:     return sum;
    91:   }
    92: 
    93:   return null;
    94: }
    95: 
    96: function polygonAreaM2(rings) {
    97:   if (!Array.isArray(rings) || rings.length === 0) return 0;
    98:   const outer = rings[0];
    99:   let area = Math.abs(ringAreaM2(outer));
   100:   // Ichki halqalarni ayiramiz (holes)
   101:   for (let i = 1; i < rings.length; i++) {
   102:     area -= Math.abs(ringAreaM2(rings[i]));
   103:   }
   104:   return area;
   105: }
   106: 
   107: function ringAreaM2(coords) {
   108:   // coords: [[lng,lat], ...]
   109:   if (!Array.isArray(coords) || coords.length < 3) return 0;
   110:   const pts = coords.map(([lng, lat]) => projectWebMercator(lng, lat));
   111:   let sum = 0;
   112:   for (let i = 0, j = pts.length - 1; i < pts.length; j = i++) {
   113:     const p1 = pts[j];
   114:     const p2 = pts[i];
   115:     sum += p1.x * p2.y - p2.x * p1.y;
   116:   }
   117:   return Math.abs(sum) / 2; // m²
   118: }
   119: 
   120: function projectWebMercator(lng, lat) {
   121:   // EPSG:3857 (Spherical Mercator) — natija: metr
   122:   const R = 6378137.0;
   123:   const d2r = Math.PI / 180;
   124:   const x = R * lng * d2r;
   125:   const y = R * Math.log(Math.tan(Math.PI / 4 + (lat * d2r) / 2));
   126:   return { x, y };
   127: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\src\utils\sanitize.js
SIZE: 1235 bytes
================================================================================
     1: // Centralized HTML sanitizer to prevent XSS when inserting any rich HTML (e.g. map popups)
     2: // Usage: import { sanitizeHTML } from './utils/sanitize'; element.innerHTML = sanitizeHTML(userHtml)
     3: // Library DOMPurify is dynamically imported to keep bundle slim if unused.
     4: 
     5: let purifyPromise = null;
     6: 
     7: async function getPurify() {
     8:   if (!purifyPromise) {
     9:     purifyPromise = import("dompurify").then((m) => m.default || m);
    10:   }
    11:   return purifyPromise;
    12: }
    13: 
    14: export function sanitizeHTMLSync(html) {
    15:   // Fallback very small sync escape (no complex policy) while async lib loads.
    16:   if (html == null) return "";
    17:   return String(html)
    18:     .replace(/&/g, "&amp;")
    19:     .replace(/</g, "&lt;")
    20:     .replace(/>/g, "&gt;")
    21:     .replace(/"/g, "&quot;")
    22:     .replace(/'/g, "&#39;");
    23: }
    24: 
    25: export async function sanitizeHTML(html, opts) {
    26:   if (html == null) return "";
    27:   try {
    28:     const purify = await getPurify();
    29:     return purify.sanitize(html, {
    30:       USE_PROFILES: { html: true },
    31:       ADD_ATTR: ["target", "rel"],
    32:       ...opts,
    33:     });
    34:   } catch {
    35:     return sanitizeHTMLSync(html);
    36:   }
    37: }
    38: 
    39: // Convenience: escape only (no tags allowed)
    40: export function escapeHTML(html) {
    41:   return sanitizeHTMLSync(html);
    42: }


================================================================================
FILE: E:\DEVELOP2\REACT\map-test\vite.config.js
SIZE: 1285 bytes
================================================================================
     1: import { defineConfig } from "vite";
     2: import react from "@vitejs/plugin-react";
     3: 
     4: export default defineConfig(({ mode }) => {
     5:   return {
     6:     plugins: [react()],
     7:     build: {
     8:       sourcemap: mode === "development" ? true : false,
     9:       outDir: "dist",
    10:       chunkSizeWarningLimit: 1400,
    11:       rollupOptions: {
    12:         onwarn(warning, defaultHandler) {
    13:           // Ignore leaflet-draw default export warning coming from react-leaflet-draw build
    14:           if (
    15:             warning.code === "MISSING_EXPORT" &&
    16:             /leaflet\.draw\.js$/.test(String(warning.id || ""))
    17:           ) {
    18:             return;
    19:           }
    20:           defaultHandler(warning);
    21:         },
    22:         output: {
    23:           manualChunks: {
    24:             vendor: ["react", "react-dom", "react-router-dom"],
    25:             leaflet: ["leaflet", "react-leaflet-draw"],
    26:             charts: ["apexcharts", "react-apexcharts"],
    27:             ui: ["react-toastify", "rc-tree"],
    28:           },
    29:         },
    30:       },
    31:     },
    32:     server: {
    33:       proxy: {
    34:         "/api": {
    35:           target: process.env.VITE_PROXY_API || "http://localhost:8080",
    36:           changeOrigin: true,
    37:         },
    38:       },
    39:     },
    40:     define: {
    41:       __BUILD_TIME__: JSON.stringify(new Date().toISOString()),
    42:     },
    43:   };
    44: });


